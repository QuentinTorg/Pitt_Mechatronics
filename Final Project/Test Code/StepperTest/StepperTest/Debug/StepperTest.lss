
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  00000bd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001de  00000000  00000000  00001a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000271  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073b  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
  9e:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value &= ~(1<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value |= (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 14 01 	lds	r25, 0x0114
  c0:	89 2b       	or	r24, r25
  c2:	80 93 14 01 	sts	0x0114, r24
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <digitalWritePortD+0x40>
	}
	else {
		portD_value &= ~(1<<pin);
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWritePortD+0x2e>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWritePortD+0x2a>
  d8:	ca 01       	movw	r24, r20
  da:	80 95       	com	r24
  dc:	90 91 14 01 	lds	r25, 0x0114
  e0:	89 23       	and	r24, r25
  e2:	80 93 14 01 	sts	0x0114, r24
	}
	PORTD = portD_value;
  e6:	80 91 14 01 	lds	r24, 0x0114
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	08 95       	ret

000000ee <driveShark>:
	}
	return 0;
}

void driveShark(long sharkDirection) {
	if (sharkDirection == HIGH) {
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	71 05       	cpc	r23, r1
  f2:	81 05       	cpc	r24, r1
  f4:	91 05       	cpc	r25, r1
  f6:	59 f4       	brne	.+22     	; 0x10e <driveShark+0x20>
		digitalWritePortD(sharkMot_Pin_Right, LOW);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 91 01 01 	lds	r24, 0x0101
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(sharkMot_Pin_Left, HIGH);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	80 91 02 01 	lds	r24, 0x0102
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 10c:	08 95       	ret
	}
	else if (sharkDirection == LOW) {
 10e:	61 15       	cp	r22, r1
 110:	71 05       	cpc	r23, r1
 112:	81 05       	cpc	r24, r1
 114:	91 05       	cpc	r25, r1
 116:	59 f4       	brne	.+22     	; 0x12e <driveShark+0x40>
		digitalWritePortD(sharkMot_Pin_Left, LOW);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 91 02 01 	lds	r24, 0x0102
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(sharkMot_Pin_Right, HIGH);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	80 91 01 01 	lds	r24, 0x0101
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 12c:	08 95       	ret
	}
	else if (sharkDirection == OFF) { //Turns the Shark off
 12e:	62 30       	cpi	r22, 0x02	; 2
 130:	71 05       	cpc	r23, r1
 132:	81 05       	cpc	r24, r1
 134:	91 05       	cpc	r25, r1
 136:	51 f4       	brne	.+20     	; 0x14c <driveShark+0x5e>
		digitalWritePortD(sharkMot_Pin_Left, LOW);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 91 02 01 	lds	r24, 0x0102
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(sharkMot_Pin_Right, LOW);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	80 91 01 01 	lds	r24, 0x0101
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 14c:	08 95       	ret

0000014e <playFlute>:
}
*/

void playFlute(long playSound)
{
	if (playSound == HIGH) { //Tells the motor to up and snuff sound
 14e:	61 30       	cpi	r22, 0x01	; 1
 150:	71 05       	cpc	r23, r1
 152:	81 05       	cpc	r24, r1
 154:	91 05       	cpc	r25, r1
 156:	59 f4       	brne	.+22     	; 0x16e <playFlute+0x20>
		digitalWritePortD(mot_Pin_Right, LOW);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	80 91 03 01 	lds	r24, 0x0103
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Left, HIGH);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	80 91 04 01 	lds	r24, 0x0104
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 16c:	08 95       	ret
	}
	else if (playSound == LOW) {
 16e:	67 2b       	or	r22, r23
 170:	68 2b       	or	r22, r24
 172:	69 2b       	or	r22, r25
 174:	51 f4       	brne	.+20     	; 0x18a <playFlute+0x3c>
		digitalWritePortD(mot_Pin_Left, LOW);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 91 04 01 	lds	r24, 0x0104
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Right, HIGH);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	80 91 03 01 	lds	r24, 0x0103
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 18a:	08 95       	ret

0000018c <delay_ms>:
	}
	PORTD = portD_value;
}

void delay_ms(long count) {
	while(count--) {
 18c:	61 15       	cp	r22, r1
 18e:	71 05       	cpc	r23, r1
 190:	81 05       	cpc	r24, r1
 192:	91 05       	cpc	r25, r1
 194:	61 f0       	breq	.+24     	; 0x1ae <delay_ms+0x22>
 196:	dc 01       	movw	r26, r24
 198:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	ef e9       	ldi	r30, 0x9F	; 159
 19c:	ff e0       	ldi	r31, 0x0F	; 15
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <delay_ms+0x12>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <delay_ms+0x18>
 1a4:	00 00       	nop
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	a1 09       	sbc	r26, r1
 1aa:	b1 09       	sbc	r27, r1
 1ac:	b1 f7       	brne	.-20     	; 0x19a <delay_ms+0xe>
 1ae:	08 95       	ret

000001b0 <delay_us>:
		_delay_ms(1);
	}
}

void delay_us(long count) {
	while(count--) {
 1b0:	61 15       	cp	r22, r1
 1b2:	71 05       	cpc	r23, r1
 1b4:	81 05       	cpc	r24, r1
 1b6:	91 05       	cpc	r25, r1
 1b8:	51 f0       	breq	.+20     	; 0x1ce <delay_us+0x1e>
 1ba:	dc 01       	movw	r26, r24
 1bc:	cb 01       	movw	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	25 e0       	ldi	r18, 0x05	; 5
 1c0:	2a 95       	dec	r18
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <delay_us+0x10>
 1c4:	00 00       	nop
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	a1 09       	sbc	r26, r1
 1ca:	b1 09       	sbc	r27, r1
 1cc:	c1 f7       	brne	.-16     	; 0x1be <delay_us+0xe>
 1ce:	08 95       	ret

000001d0 <updateStepper>:
	
	return steps = (4000.0 / 112.75) * length;
}

void updateStepper(long step_desired)
{
 1d0:	2f 92       	push	r2
 1d2:	3f 92       	push	r3
 1d4:	4f 92       	push	r4
 1d6:	5f 92       	push	r5
 1d8:	6f 92       	push	r6
 1da:	7f 92       	push	r7
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	2e 97       	sbiw	r28, 0x0e	; 14
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	2b 01       	movw	r4, r22
 206:	3c 01       	movw	r6, r24
	long step_start = step_current;
	long accel_distance = 0;
	long accel_sign = 0; //initially the acceleration is neither forward nor backward
	long distance_from_start = 0;
	long velocity_sign = 0;
	long current_velocity = start_velocity;
 208:	c0 90 07 01 	lds	r12, 0x0107
 20c:	d0 90 08 01 	lds	r13, 0x0108
 210:	e0 90 09 01 	lds	r14, 0x0109
 214:	f0 90 0a 01 	lds	r15, 0x010A
	long steps_to_max_velocity = 0;
	long adder_var = 0;
	long flipped_accel_flag = 1;

	playFlute(HIGH);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

	//Gives velocity and acceleration signs
	if (step_desired > step_current) {
 224:	80 91 15 01 	lds	r24, 0x0115
 228:	90 91 16 01 	lds	r25, 0x0116
 22c:	a0 91 17 01 	lds	r26, 0x0117
 230:	b0 91 18 01 	lds	r27, 0x0118
 234:	84 15       	cp	r24, r4
 236:	95 05       	cpc	r25, r5
 238:	a6 05       	cpc	r26, r6
 23a:	b7 05       	cpc	r27, r7
 23c:	04 f5       	brge	.+64     	; 0x27e <updateStepper+0xae>
		accel_sign = 1;
		velocity_sign = 1;
		digitalWritePortD(direction_pin, HIGH);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	80 91 05 01 	lds	r24, 0x0105
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>

	playFlute(HIGH);

	//Gives velocity and acceleration signs
	if (step_desired > step_current) {
		accel_sign = 1;
 248:	81 2c       	mov	r8, r1
 24a:	91 2c       	mov	r9, r1
 24c:	54 01       	movw	r10, r8
 24e:	83 94       	inc	r8
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
			steps_to_max_velocity++;
		}
		else if ((steps_to_max_velocity > abs(step_current - step_desired)) & (flipped_accel_flag != 0)){
			accel_sign = -accel_sign;
			flipped_accel_flag = 0;
 250:	8d 82       	std	Y+5, r8	; 0x05
 252:	9e 82       	std	Y+6, r9	; 0x06
 254:	af 82       	std	Y+7, r10	; 0x07
 256:	b8 86       	std	Y+8, r11	; 0x08
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	29 83       	std	Y+1, r18	; 0x01
 262:	3a 83       	std	Y+2, r19	; 0x02
 264:	4b 83       	std	Y+3, r20	; 0x03
 266:	5c 83       	std	Y+4, r21	; 0x04
 268:	19 86       	std	Y+9, r1	; 0x09
 26a:	1a 86       	std	Y+10, r1	; 0x0a
 26c:	1b 86       	std	Y+11, r1	; 0x0b
 26e:	1c 86       	std	Y+12, r1	; 0x0c
 270:	00 e0       	ldi	r16, 0x00	; 0
 272:	10 e0       	ldi	r17, 0x00	; 0
		if (current_velocity < max_velocity) {
			current_velocity = max_velocity;
		}

		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
			steps_to_max_velocity++;
 274:	38 2c       	mov	r3, r8
 276:	29 2c       	mov	r2, r9
 278:	ad 86       	std	Y+13, r10	; 0x0d
 27a:	be 86       	std	Y+14, r11	; 0x0e
 27c:	00 c1       	rjmp	.+512    	; 0x47e <updateStepper+0x2ae>
		accel_sign = 1;
		velocity_sign = 1;
		digitalWritePortD(direction_pin, HIGH);
		adder_var = 1;
	}
	else if (step_desired < step_current) {
 27e:	48 16       	cp	r4, r24
 280:	59 06       	cpc	r5, r25
 282:	6a 06       	cpc	r6, r26
 284:	7b 06       	cpc	r7, r27
 286:	0c f0       	brlt	.+2      	; 0x28a <updateStepper+0xba>
 288:	08 c1       	rjmp	.+528    	; 0x49a <updateStepper+0x2ca>
		accel_sign = -1;
		velocity_sign = -1;
		digitalWritePortD(direction_pin, LOW);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	80 91 05 01 	lds	r24, 0x0105
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		velocity_sign = 1;
		digitalWritePortD(direction_pin, HIGH);
		adder_var = 1;
	}
	else if (step_desired < step_current) {
		accel_sign = -1;
 294:	88 24       	eor	r8, r8
 296:	8a 94       	dec	r8
 298:	98 2c       	mov	r9, r8
 29a:	54 01       	movw	r10, r8
 29c:	d9 cf       	rjmp	.-78     	; 0x250 <updateStepper+0x80>

	while (step_current != step_desired)
	{
		if (adder_var != 0) //If the motor is not at the desired step, write step pin high then low for a single pulse
		{
			digitalWritePortD(step_pin, HIGH);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	80 91 06 01 	lds	r24, 0x0106
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
			digitalWritePortD(step_pin, LOW);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	80 91 06 01 	lds	r24, 0x0106
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		}

		// increment current position
		step_current += adder_var;
 2b2:	80 91 15 01 	lds	r24, 0x0115
 2b6:	90 91 16 01 	lds	r25, 0x0116
 2ba:	a0 91 17 01 	lds	r26, 0x0117
 2be:	b0 91 18 01 	lds	r27, 0x0118
 2c2:	88 0d       	add	r24, r8
 2c4:	99 1d       	adc	r25, r9
 2c6:	aa 1d       	adc	r26, r10
 2c8:	bb 1d       	adc	r27, r11
 2ca:	80 93 15 01 	sts	0x0115, r24
 2ce:	90 93 16 01 	sts	0x0116, r25
 2d2:	a0 93 17 01 	sts	0x0117, r26
 2d6:	b0 93 18 01 	sts	0x0118, r27
		delay_us(current_velocity);
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <delay_us>

		if (velocity_sign == accel_sign) {
 2e2:	4d 81       	ldd	r20, Y+5	; 0x05
 2e4:	5e 81       	ldd	r21, Y+6	; 0x06
 2e6:	6f 81       	ldd	r22, Y+7	; 0x07
 2e8:	78 85       	ldd	r23, Y+8	; 0x08
 2ea:	48 15       	cp	r20, r8
 2ec:	59 05       	cpc	r21, r9
 2ee:	6a 05       	cpc	r22, r10
 2f0:	7b 05       	cpc	r23, r11
 2f2:	69 f5       	brne	.+90     	; 0x34e <updateStepper+0x17e>
			current_velocity = current_velocity / accel_multiplier;
 2f4:	c7 01       	movw	r24, r14
 2f6:	b6 01       	movw	r22, r12
 2f8:	0e 94 9d 04 	call	0x93a	; 0x93a <__floatsisf>
 2fc:	20 91 0f 01 	lds	r18, 0x010F
 300:	30 91 10 01 	lds	r19, 0x0110
 304:	40 91 11 01 	lds	r20, 0x0111
 308:	50 91 12 01 	lds	r21, 0x0112
 30c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__divsf3>
 310:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fixsfsi>
 314:	36 2f       	mov	r19, r22
 316:	27 2f       	mov	r18, r23
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
		}

		if (current_velocity < max_velocity) {
 318:	40 91 0b 01 	lds	r20, 0x010B
 31c:	50 91 0c 01 	lds	r21, 0x010C
 320:	60 91 0d 01 	lds	r22, 0x010D
 324:	70 91 0e 01 	lds	r23, 0x010E
 328:	c3 2e       	mov	r12, r19
 32a:	d2 2e       	mov	r13, r18
 32c:	e8 2e       	mov	r14, r24
 32e:	f9 2e       	mov	r15, r25
 330:	c4 16       	cp	r12, r20
 332:	d5 06       	cpc	r13, r21
 334:	e6 06       	cpc	r14, r22
 336:	f7 06       	cpc	r15, r23
 338:	14 f4       	brge	.+4      	; 0x33e <updateStepper+0x16e>
 33a:	6a 01       	movw	r12, r20
 33c:	7b 01       	movw	r14, r22
			current_velocity = max_velocity;
		}

		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 33e:	c4 16       	cp	r12, r20
 340:	d5 06       	cpc	r13, r21
 342:	e6 06       	cpc	r14, r22
 344:	f7 06       	cpc	r15, r23
 346:	49 f5       	brne	.+82     	; 0x39a <updateStepper+0x1ca>
 348:	6a 01       	movw	r12, r20
 34a:	7b 01       	movw	r14, r22
 34c:	55 c0       	rjmp	.+170    	; 0x3f8 <updateStepper+0x228>

		if (velocity_sign == accel_sign) {
			current_velocity = current_velocity / accel_multiplier;
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
 34e:	c7 01       	movw	r24, r14
 350:	b6 01       	movw	r22, r12
 352:	0e 94 9d 04 	call	0x93a	; 0x93a <__floatsisf>
 356:	20 91 0f 01 	lds	r18, 0x010F
 35a:	30 91 10 01 	lds	r19, 0x0110
 35e:	40 91 11 01 	lds	r20, 0x0111
 362:	50 91 12 01 	lds	r21, 0x0112
 366:	0e 94 29 05 	call	0xa52	; 0xa52 <__mulsf3>
 36a:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fixsfsi>
 36e:	36 2f       	mov	r19, r22
 370:	27 2f       	mov	r18, r23
		}

		if (current_velocity < max_velocity) {
 372:	40 91 0b 01 	lds	r20, 0x010B
 376:	50 91 0c 01 	lds	r21, 0x010C
 37a:	60 91 0d 01 	lds	r22, 0x010D
 37e:	70 91 0e 01 	lds	r23, 0x010E
 382:	c3 2e       	mov	r12, r19
 384:	d2 2e       	mov	r13, r18
 386:	e8 2e       	mov	r14, r24
 388:	f9 2e       	mov	r15, r25
 38a:	c4 16       	cp	r12, r20
 38c:	d5 06       	cpc	r13, r21
 38e:	e6 06       	cpc	r14, r22
 390:	f7 06       	cpc	r15, r23
 392:	94 f5       	brge	.+100    	; 0x3f8 <updateStepper+0x228>
 394:	6a 01       	movw	r12, r20
 396:	7b 01       	movw	r14, r22
 398:	2f c0       	rjmp	.+94     	; 0x3f8 <updateStepper+0x228>
			current_velocity = max_velocity;
		}

		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 39a:	40 91 15 01 	lds	r20, 0x0115
 39e:	50 91 16 01 	lds	r21, 0x0116
 3a2:	60 91 17 01 	lds	r22, 0x0117
 3a6:	70 91 18 01 	lds	r23, 0x0118
 3aa:	44 19       	sub	r20, r4
 3ac:	55 09       	sbc	r21, r5
 3ae:	66 09       	sbc	r22, r6
 3b0:	77 09       	sbc	r23, r7
 3b2:	ca 01       	movw	r24, r20
 3b4:	99 23       	and	r25, r25
 3b6:	24 f4       	brge	.+8      	; 0x3c0 <updateStepper+0x1f0>
 3b8:	88 27       	eor	r24, r24
 3ba:	99 27       	eor	r25, r25
 3bc:	84 1b       	sub	r24, r20
 3be:	95 0b       	sbc	r25, r21
 3c0:	09 2e       	mov	r0, r25
 3c2:	00 0c       	add	r0, r0
 3c4:	aa 0b       	sbc	r26, r26
 3c6:	bb 0b       	sbc	r27, r27
 3c8:	29 85       	ldd	r18, Y+9	; 0x09
 3ca:	3a 85       	ldd	r19, Y+10	; 0x0a
 3cc:	4b 85       	ldd	r20, Y+11	; 0x0b
 3ce:	5c 85       	ldd	r21, Y+12	; 0x0c
 3d0:	28 17       	cp	r18, r24
 3d2:	39 07       	cpc	r19, r25
 3d4:	4a 07       	cpc	r20, r26
 3d6:	5b 07       	cpc	r21, r27
 3d8:	7c f4       	brge	.+30     	; 0x3f8 <updateStepper+0x228>
			steps_to_max_velocity++;
 3da:	2f 5f       	subi	r18, 0xFF	; 255
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
 3de:	4f 4f       	sbci	r20, 0xFF	; 255
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	29 87       	std	Y+9, r18	; 0x09
 3e4:	3a 87       	std	Y+10, r19	; 0x0a
 3e6:	4b 87       	std	Y+11, r20	; 0x0b
 3e8:	5c 87       	std	Y+12, r21	; 0x0c
 3ea:	3d 82       	std	Y+5, r3	; 0x05
 3ec:	2e 82       	std	Y+6, r2	; 0x06
 3ee:	3d 85       	ldd	r19, Y+13	; 0x0d
 3f0:	3f 83       	std	Y+7, r19	; 0x07
 3f2:	4e 85       	ldd	r20, Y+14	; 0x0e
 3f4:	48 87       	std	Y+8, r20	; 0x08
 3f6:	43 c0       	rjmp	.+134    	; 0x47e <updateStepper+0x2ae>
		}
		else if ((steps_to_max_velocity > abs(step_current - step_desired)) & (flipped_accel_flag != 0)){
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	29 81       	ldd	r18, Y+1	; 0x01
 3fc:	3a 81       	ldd	r19, Y+2	; 0x02
 3fe:	4b 81       	ldd	r20, Y+3	; 0x03
 400:	5c 81       	ldd	r21, Y+4	; 0x04
 402:	23 2b       	or	r18, r19
 404:	24 2b       	or	r18, r20
 406:	25 2b       	or	r18, r21
 408:	09 f4       	brne	.+2      	; 0x40c <updateStepper+0x23c>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	88 23       	and	r24, r24
 40e:	b9 f1       	breq	.+110    	; 0x47e <updateStepper+0x2ae>
 410:	40 91 15 01 	lds	r20, 0x0115
 414:	50 91 16 01 	lds	r21, 0x0116
 418:	60 91 17 01 	lds	r22, 0x0117
 41c:	70 91 18 01 	lds	r23, 0x0118
 420:	44 19       	sub	r20, r4
 422:	55 09       	sbc	r21, r5
 424:	66 09       	sbc	r22, r6
 426:	77 09       	sbc	r23, r7
 428:	ca 01       	movw	r24, r20
 42a:	99 23       	and	r25, r25
 42c:	24 f4       	brge	.+8      	; 0x436 <updateStepper+0x266>
 42e:	88 27       	eor	r24, r24
 430:	99 27       	eor	r25, r25
 432:	84 1b       	sub	r24, r20
 434:	95 0b       	sbc	r25, r21
 436:	09 2e       	mov	r0, r25
 438:	00 0c       	add	r0, r0
 43a:	aa 0b       	sbc	r26, r26
 43c:	bb 0b       	sbc	r27, r27
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	49 85       	ldd	r20, Y+9	; 0x09
 442:	5a 85       	ldd	r21, Y+10	; 0x0a
 444:	6b 85       	ldd	r22, Y+11	; 0x0b
 446:	7c 85       	ldd	r23, Y+12	; 0x0c
 448:	84 17       	cp	r24, r20
 44a:	95 07       	cpc	r25, r21
 44c:	a6 07       	cpc	r26, r22
 44e:	b7 07       	cpc	r27, r23
 450:	0c f0       	brlt	.+2      	; 0x454 <updateStepper+0x284>
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	22 23       	and	r18, r18
 456:	99 f0       	breq	.+38     	; 0x47e <updateStepper+0x2ae>
			accel_sign = -accel_sign;
 458:	6d 81       	ldd	r22, Y+5	; 0x05
 45a:	7e 81       	ldd	r23, Y+6	; 0x06
 45c:	8f 81       	ldd	r24, Y+7	; 0x07
 45e:	98 85       	ldd	r25, Y+8	; 0x08
 460:	90 95       	com	r25
 462:	80 95       	com	r24
 464:	70 95       	com	r23
 466:	61 95       	neg	r22
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	6d 83       	std	Y+5, r22	; 0x05
 470:	7e 83       	std	Y+6, r23	; 0x06
 472:	8f 83       	std	Y+7, r24	; 0x07
 474:	98 87       	std	Y+8, r25	; 0x08
			flipped_accel_flag = 0;
 476:	09 83       	std	Y+1, r16	; 0x01
 478:	1a 83       	std	Y+2, r17	; 0x02
 47a:	1b 82       	std	Y+3, r1	; 0x03
 47c:	1c 82       	std	Y+4, r1	; 0x04
	}
	else { //if your current step = the desired step
		return;
	}

	while (step_current != step_desired)
 47e:	80 91 15 01 	lds	r24, 0x0115
 482:	90 91 16 01 	lds	r25, 0x0116
 486:	a0 91 17 01 	lds	r26, 0x0117
 48a:	b0 91 18 01 	lds	r27, 0x0118
 48e:	84 15       	cp	r24, r4
 490:	95 05       	cpc	r25, r5
 492:	a6 05       	cpc	r26, r6
 494:	b7 05       	cpc	r27, r7
 496:	09 f0       	breq	.+2      	; 0x49a <updateStepper+0x2ca>
 498:	02 cf       	rjmp	.-508    	; 0x29e <updateStepper+0xce>
			flipped_accel_flag = 0;
		}

	}
	return;
}
 49a:	2e 96       	adiw	r28, 0x0e	; 14
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	bf 90       	pop	r11
 4b8:	af 90       	pop	r10
 4ba:	9f 90       	pop	r9
 4bc:	8f 90       	pop	r8
 4be:	7f 90       	pop	r7
 4c0:	6f 90       	pop	r6
 4c2:	5f 90       	pop	r5
 4c4:	4f 90       	pop	r4
 4c6:	3f 90       	pop	r3
 4c8:	2f 90       	pop	r2
 4ca:	08 95       	ret

000004cc <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

long main(void)
{
	DDRD =	0b11111110; // Sets pins of Port D according to circuit
 4cc:	8e ef       	ldi	r24, 0xFE	; 254
 4ce:	8a b9       	out	0x0a, r24	; 10
	//Stepper Pins: sets PD2 = step pin and PD3 = direction pins
	//Shark Motor Pins: sets PD4 = left pin and PD5 = right pin for the H bridge
	//Motor Pins: sets PD6 = left pin and PD7 = right pin for the H bridge
	PORTD = 0b00000000; //Sets Port D to match the initial of all zeros
 4d0:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b00000010; // Sets PB1 as output, sets the rest as input
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 4d6:	e0 e8       	ldi	r30, 0x80	; 128
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	82 6a       	ori	r24, 0xA2	; 162
 4de:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 4e0:	e1 e8       	ldi	r30, 0x81	; 129
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	8c 61       	ori	r24, 0x1C	; 28
 4e8:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 4ea:	87 e8       	ldi	r24, 0x87	; 135
 4ec:	93 e1       	ldi	r25, 0x13	; 19
 4ee:	90 93 87 00 	sts	0x0087, r25
 4f2:	80 93 86 00 	sts	0x0086, r24
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 4f6:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 4f8:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 4fc:	87 e8       	ldi	r24, 0x87	; 135
 4fe:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 502:	80 e6       	ldi	r24, 0x60	; 96
 504:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)
	
	while (1)
	{
		playFlute(HIGH);  //Starts the flute out as closed
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
		*/

		while (PINB & (1<<PB0) == 1);
 514:	18 99       	sbic	0x03, 0	; 3
 516:	fe cf       	rjmp	.-4      	; 0x514 <main+0x48>
		
		
		delay_ms(2000);
 518:	60 ed       	ldi	r22, 0xD0	; 208
 51a:	77 e0       	ldi	r23, 0x07	; 7
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>

		
		driveShark(HIGH);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 77 00 	call	0xee	; 0xee <driveShark>
		

		updateStepper(noteLookup('G'));
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	72 e0       	ldi	r23, 0x02	; 2
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	cb 01       	movw	r24, r22
 542:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	80 91 00 01 	lds	r24, 0x0100
 54c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(150);
 550:	66 e9       	ldi	r22, 0x96	; 150
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	80 91 00 01 	lds	r24, 0x0100
 562:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('A'));
 572:	68 eb       	ldi	r22, 0xB8	; 184
 574:	73 e0       	ldi	r23, 0x03	; 3
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	cb 01       	movw	r24, r22
 584:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	80 91 00 01 	lds	r24, 0x0100
 58e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(150);
 592:	66 e9       	ldi	r22, 0x96	; 150
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	80 91 00 01 	lds	r24, 0x0100
 5a4:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('a'));
 5b4:	6c e7       	ldi	r22, 0x7C	; 124
 5b6:	74 e0       	ldi	r23, 0x04	; 4
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	cb 01       	movw	r24, r22
 5c6:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	80 91 00 01 	lds	r24, 0x0100
 5d0:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(400);
 5d4:	60 e9       	ldi	r22, 0x90	; 144
 5d6:	71 e0       	ldi	r23, 0x01	; 1
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	80 91 00 01 	lds	r24, 0x0100
 5e6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		delay_ms(50);
 5f6:	62 e3       	ldi	r22, 0x32	; 50
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		
		
		//updateStepper(noteLookup('a'));
		playFlute(LOW);
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	cb 01       	movw	r24, r22
 608:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	80 91 00 01 	lds	r24, 0x0100
 612:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(350);
 616:	6e e5       	ldi	r22, 0x5E	; 94
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	80 91 00 01 	lds	r24, 0x0100
 628:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('F'));
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	cb 01       	movw	r24, r22
 63e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	cb 01       	movw	r24, r22
 648:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	80 91 00 01 	lds	r24, 0x0100
 652:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(200);
 656:	68 ec       	ldi	r22, 0xC8	; 200
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	80 91 00 01 	lds	r24, 0x0100
 668:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('d'));
 678:	6e ee       	ldi	r22, 0xEE	; 238
 67a:	76 e0       	ldi	r23, 0x06	; 6
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	cb 01       	movw	r24, r22
 68a:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	80 91 00 01 	lds	r24, 0x0100
 694:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(300);
 698:	6c e2       	ldi	r22, 0x2C	; 44
 69a:	71 e0       	ldi	r23, 0x01	; 1
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	80 91 00 01 	lds	r24, 0x0100
 6aa:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('w'));
 6ba:	6f e6       	ldi	r22, 0x6F	; 111
 6bc:	74 e0       	ldi	r23, 0x04	; 4
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	cb 01       	movw	r24, r22
 6cc:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	80 91 00 01 	lds	r24, 0x0100
 6d6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(270);
 6da:	6e e0       	ldi	r22, 0x0E	; 14
 6dc:	71 e0       	ldi	r23, 0x01	; 1
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 6e6:	60 e0       	ldi	r22, 0x00	; 0
 6e8:	80 91 00 01 	lds	r24, 0x0100
 6ec:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>

		
		updateStepper(noteLookup('D'));
 6fc:	6e ee       	ldi	r22, 0xEE	; 238
 6fe:	76 e0       	ldi	r23, 0x06	; 6
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>
		playFlute(LOW);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	cb 01       	movw	r24, r22
 70e:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 712:	61 e0       	ldi	r22, 0x01	; 1
 714:	80 91 00 01 	lds	r24, 0x0100
 718:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(225);
 71c:	61 ee       	ldi	r22, 0xE1	; 225
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	80 91 00 01 	lds	r24, 0x0100
 72e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		delay_ms(50);
 73e:	62 e3       	ldi	r22, 0x32	; 50
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		
		//updateStepper(noteLookup('D'));
		playFlute(LOW);
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	cb 01       	movw	r24, r22
 750:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	80 91 00 01 	lds	r24, 0x0100
 75a:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(225);
 75e:	61 ee       	ldi	r22, 0xE1	; 225
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	80 91 00 01 	lds	r24, 0x0100
 770:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		delay_ms(50);
 780:	62 e3       	ldi	r22, 0x32	; 50
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		
		//updateStepper(noteLookup('D'));
		playFlute(LOW);
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	cb 01       	movw	r24, r22
 792:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		digitalWritePortD(communication_signal_pin,HIGH);
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	80 91 00 01 	lds	r24, 0x0100
 79c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		delay_ms(500);
 7a0:	64 ef       	ldi	r22, 0xF4	; 244
 7a2:	71 e0       	ldi	r23, 0x01	; 1
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		digitalWritePortD(communication_signal_pin,LOW);
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	80 91 00 01 	lds	r24, 0x0100
 7b2:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		playFlute(HIGH);
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 a7 00 	call	0x14e	; 0x14e <playFlute>
		
		
		driveShark(OFF);
 7c2:	62 e0       	ldi	r22, 0x02	; 2
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 77 00 	call	0xee	; 0xee <driveShark>
		delay_ms(500);
 7ce:	64 ef       	ldi	r22, 0xF4	; 244
 7d0:	71 e0       	ldi	r23, 0x01	; 1
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 c6 00 	call	0x18c	; 0x18c <delay_ms>
		updateStepper(0);
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	cb 01       	movw	r24, r22
 7e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <updateStepper>

		
	}
 7e4:	91 ce       	rjmp	.-734    	; 0x508 <main+0x3c>

000007e6 <__divsf3>:
 7e6:	0e 94 07 04 	call	0x80e	; 0x80e <__divsf3x>
 7ea:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 7ee:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 7f2:	58 f0       	brcs	.+22     	; 0x80a <__divsf3+0x24>
 7f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 7f8:	40 f0       	brcs	.+16     	; 0x80a <__divsf3+0x24>
 7fa:	29 f4       	brne	.+10     	; 0x806 <__divsf3+0x20>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	29 f0       	breq	.+10     	; 0x80a <__divsf3+0x24>
 800:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 804:	51 11       	cpse	r21, r1
 806:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 80a:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>

0000080e <__divsf3x>:
 80e:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 812:	68 f3       	brcs	.-38     	; 0x7ee <__divsf3+0x8>

00000814 <__divsf3_pse>:
 814:	99 23       	and	r25, r25
 816:	b1 f3       	breq	.-20     	; 0x804 <__divsf3+0x1e>
 818:	55 23       	and	r21, r21
 81a:	91 f3       	breq	.-28     	; 0x800 <__divsf3+0x1a>
 81c:	95 1b       	sub	r25, r21
 81e:	55 0b       	sbc	r21, r21
 820:	bb 27       	eor	r27, r27
 822:	aa 27       	eor	r26, r26
 824:	62 17       	cp	r22, r18
 826:	73 07       	cpc	r23, r19
 828:	84 07       	cpc	r24, r20
 82a:	38 f0       	brcs	.+14     	; 0x83a <__divsf3_pse+0x26>
 82c:	9f 5f       	subi	r25, 0xFF	; 255
 82e:	5f 4f       	sbci	r21, 0xFF	; 255
 830:	22 0f       	add	r18, r18
 832:	33 1f       	adc	r19, r19
 834:	44 1f       	adc	r20, r20
 836:	aa 1f       	adc	r26, r26
 838:	a9 f3       	breq	.-22     	; 0x824 <__divsf3_pse+0x10>
 83a:	35 d0       	rcall	.+106    	; 0x8a6 <__divsf3_pse+0x92>
 83c:	0e 2e       	mov	r0, r30
 83e:	3a f0       	brmi	.+14     	; 0x84e <__divsf3_pse+0x3a>
 840:	e0 e8       	ldi	r30, 0x80	; 128
 842:	32 d0       	rcall	.+100    	; 0x8a8 <__divsf3_pse+0x94>
 844:	91 50       	subi	r25, 0x01	; 1
 846:	50 40       	sbci	r21, 0x00	; 0
 848:	e6 95       	lsr	r30
 84a:	00 1c       	adc	r0, r0
 84c:	ca f7       	brpl	.-14     	; 0x840 <__divsf3_pse+0x2c>
 84e:	2b d0       	rcall	.+86     	; 0x8a6 <__divsf3_pse+0x92>
 850:	fe 2f       	mov	r31, r30
 852:	29 d0       	rcall	.+82     	; 0x8a6 <__divsf3_pse+0x92>
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	bb 1f       	adc	r27, r27
 85c:	26 17       	cp	r18, r22
 85e:	37 07       	cpc	r19, r23
 860:	48 07       	cpc	r20, r24
 862:	ab 07       	cpc	r26, r27
 864:	b0 e8       	ldi	r27, 0x80	; 128
 866:	09 f0       	breq	.+2      	; 0x86a <__divsf3_pse+0x56>
 868:	bb 0b       	sbc	r27, r27
 86a:	80 2d       	mov	r24, r0
 86c:	bf 01       	movw	r22, r30
 86e:	ff 27       	eor	r31, r31
 870:	93 58       	subi	r25, 0x83	; 131
 872:	5f 4f       	sbci	r21, 0xFF	; 255
 874:	3a f0       	brmi	.+14     	; 0x884 <__divsf3_pse+0x70>
 876:	9e 3f       	cpi	r25, 0xFE	; 254
 878:	51 05       	cpc	r21, r1
 87a:	78 f0       	brcs	.+30     	; 0x89a <__divsf3_pse+0x86>
 87c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 880:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 884:	5f 3f       	cpi	r21, 0xFF	; 255
 886:	e4 f3       	brlt	.-8      	; 0x880 <__divsf3_pse+0x6c>
 888:	98 3e       	cpi	r25, 0xE8	; 232
 88a:	d4 f3       	brlt	.-12     	; 0x880 <__divsf3_pse+0x6c>
 88c:	86 95       	lsr	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f7 95       	ror	r31
 896:	9f 5f       	subi	r25, 0xFF	; 255
 898:	c9 f7       	brne	.-14     	; 0x88c <__divsf3_pse+0x78>
 89a:	88 0f       	add	r24, r24
 89c:	91 1d       	adc	r25, r1
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret
 8a6:	e1 e0       	ldi	r30, 0x01	; 1
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	bb 1f       	adc	r27, r27
 8b0:	62 17       	cp	r22, r18
 8b2:	73 07       	cpc	r23, r19
 8b4:	84 07       	cpc	r24, r20
 8b6:	ba 07       	cpc	r27, r26
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__divsf3_pse+0xae>
 8ba:	62 1b       	sub	r22, r18
 8bc:	73 0b       	sbc	r23, r19
 8be:	84 0b       	sbc	r24, r20
 8c0:	ba 0b       	sbc	r27, r26
 8c2:	ee 1f       	adc	r30, r30
 8c4:	88 f7       	brcc	.-30     	; 0x8a8 <__divsf3_pse+0x94>
 8c6:	e0 95       	com	r30
 8c8:	08 95       	ret

000008ca <__fixsfsi>:
 8ca:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fixunssfsi>
 8ce:	68 94       	set
 8d0:	b1 11       	cpse	r27, r1
 8d2:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 8d6:	08 95       	ret

000008d8 <__fixunssfsi>:
 8d8:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_splitA>
 8dc:	88 f0       	brcs	.+34     	; 0x900 <__stack+0x1>
 8de:	9f 57       	subi	r25, 0x7F	; 127
 8e0:	98 f0       	brcs	.+38     	; 0x908 <__stack+0x9>
 8e2:	b9 2f       	mov	r27, r25
 8e4:	99 27       	eor	r25, r25
 8e6:	b7 51       	subi	r27, 0x17	; 23
 8e8:	b0 f0       	brcs	.+44     	; 0x916 <__stack+0x17>
 8ea:	e1 f0       	breq	.+56     	; 0x924 <__stack+0x25>
 8ec:	66 0f       	add	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	1a f0       	brmi	.+6      	; 0x8fc <__fixunssfsi+0x24>
 8f6:	ba 95       	dec	r27
 8f8:	c9 f7       	brne	.-14     	; 0x8ec <__fixunssfsi+0x14>
 8fa:	14 c0       	rjmp	.+40     	; 0x924 <__stack+0x25>
 8fc:	b1 30       	cpi	r27, 0x01	; 1
 8fe:	91 f0       	breq	.+36     	; 0x924 <__stack+0x25>
 900:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_zero>
 904:	b1 e0       	ldi	r27, 0x01	; 1
 906:	08 95       	ret
 908:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_zero>
 90c:	67 2f       	mov	r22, r23
 90e:	78 2f       	mov	r23, r24
 910:	88 27       	eor	r24, r24
 912:	b8 5f       	subi	r27, 0xF8	; 248
 914:	39 f0       	breq	.+14     	; 0x924 <__stack+0x25>
 916:	b9 3f       	cpi	r27, 0xF9	; 249
 918:	cc f3       	brlt	.-14     	; 0x90c <__stack+0xd>
 91a:	86 95       	lsr	r24
 91c:	77 95       	ror	r23
 91e:	67 95       	ror	r22
 920:	b3 95       	inc	r27
 922:	d9 f7       	brne	.-10     	; 0x91a <__stack+0x1b>
 924:	3e f4       	brtc	.+14     	; 0x934 <__stack+0x35>
 926:	90 95       	com	r25
 928:	80 95       	com	r24
 92a:	70 95       	com	r23
 92c:	61 95       	neg	r22
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	08 95       	ret

00000936 <__floatunsisf>:
 936:	e8 94       	clt
 938:	09 c0       	rjmp	.+18     	; 0x94c <__floatsisf+0x12>

0000093a <__floatsisf>:
 93a:	97 fb       	bst	r25, 7
 93c:	3e f4       	brtc	.+14     	; 0x94c <__floatsisf+0x12>
 93e:	90 95       	com	r25
 940:	80 95       	com	r24
 942:	70 95       	com	r23
 944:	61 95       	neg	r22
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	99 23       	and	r25, r25
 94e:	a9 f0       	breq	.+42     	; 0x97a <__floatsisf+0x40>
 950:	f9 2f       	mov	r31, r25
 952:	96 e9       	ldi	r25, 0x96	; 150
 954:	bb 27       	eor	r27, r27
 956:	93 95       	inc	r25
 958:	f6 95       	lsr	r31
 95a:	87 95       	ror	r24
 95c:	77 95       	ror	r23
 95e:	67 95       	ror	r22
 960:	b7 95       	ror	r27
 962:	f1 11       	cpse	r31, r1
 964:	f8 cf       	rjmp	.-16     	; 0x956 <__floatsisf+0x1c>
 966:	fa f4       	brpl	.+62     	; 0x9a6 <__floatsisf+0x6c>
 968:	bb 0f       	add	r27, r27
 96a:	11 f4       	brne	.+4      	; 0x970 <__floatsisf+0x36>
 96c:	60 ff       	sbrs	r22, 0
 96e:	1b c0       	rjmp	.+54     	; 0x9a6 <__floatsisf+0x6c>
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	16 c0       	rjmp	.+44     	; 0x9a6 <__floatsisf+0x6c>
 97a:	88 23       	and	r24, r24
 97c:	11 f0       	breq	.+4      	; 0x982 <__floatsisf+0x48>
 97e:	96 e9       	ldi	r25, 0x96	; 150
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <__floatsisf+0x6a>
 982:	77 23       	and	r23, r23
 984:	21 f0       	breq	.+8      	; 0x98e <__floatsisf+0x54>
 986:	9e e8       	ldi	r25, 0x8E	; 142
 988:	87 2f       	mov	r24, r23
 98a:	76 2f       	mov	r23, r22
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__floatsisf+0x5e>
 98e:	66 23       	and	r22, r22
 990:	71 f0       	breq	.+28     	; 0x9ae <__floatsisf+0x74>
 992:	96 e8       	ldi	r25, 0x86	; 134
 994:	86 2f       	mov	r24, r22
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	2a f0       	brmi	.+10     	; 0x9a6 <__floatsisf+0x6c>
 99c:	9a 95       	dec	r25
 99e:	66 0f       	add	r22, r22
 9a0:	77 1f       	adc	r23, r23
 9a2:	88 1f       	adc	r24, r24
 9a4:	da f7       	brpl	.-10     	; 0x99c <__floatsisf+0x62>
 9a6:	88 0f       	add	r24, r24
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <__fp_inf>:
 9b0:	97 f9       	bld	r25, 7
 9b2:	9f 67       	ori	r25, 0x7F	; 127
 9b4:	80 e8       	ldi	r24, 0x80	; 128
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	08 95       	ret

000009bc <__fp_nan>:
 9bc:	9f ef       	ldi	r25, 0xFF	; 255
 9be:	80 ec       	ldi	r24, 0xC0	; 192
 9c0:	08 95       	ret

000009c2 <__fp_pscA>:
 9c2:	00 24       	eor	r0, r0
 9c4:	0a 94       	dec	r0
 9c6:	16 16       	cp	r1, r22
 9c8:	17 06       	cpc	r1, r23
 9ca:	18 06       	cpc	r1, r24
 9cc:	09 06       	cpc	r0, r25
 9ce:	08 95       	ret

000009d0 <__fp_pscB>:
 9d0:	00 24       	eor	r0, r0
 9d2:	0a 94       	dec	r0
 9d4:	12 16       	cp	r1, r18
 9d6:	13 06       	cpc	r1, r19
 9d8:	14 06       	cpc	r1, r20
 9da:	05 06       	cpc	r0, r21
 9dc:	08 95       	ret

000009de <__fp_round>:
 9de:	09 2e       	mov	r0, r25
 9e0:	03 94       	inc	r0
 9e2:	00 0c       	add	r0, r0
 9e4:	11 f4       	brne	.+4      	; 0x9ea <__fp_round+0xc>
 9e6:	88 23       	and	r24, r24
 9e8:	52 f0       	brmi	.+20     	; 0x9fe <__fp_round+0x20>
 9ea:	bb 0f       	add	r27, r27
 9ec:	40 f4       	brcc	.+16     	; 0x9fe <__fp_round+0x20>
 9ee:	bf 2b       	or	r27, r31
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0x18>
 9f2:	60 ff       	sbrs	r22, 0
 9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__fp_round+0x20>
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	08 95       	ret

00000a00 <__fp_split3>:
 a00:	57 fd       	sbrc	r21, 7
 a02:	90 58       	subi	r25, 0x80	; 128
 a04:	44 0f       	add	r20, r20
 a06:	55 1f       	adc	r21, r21
 a08:	59 f0       	breq	.+22     	; 0xa20 <__fp_splitA+0x10>
 a0a:	5f 3f       	cpi	r21, 0xFF	; 255
 a0c:	71 f0       	breq	.+28     	; 0xa2a <__fp_splitA+0x1a>
 a0e:	47 95       	ror	r20

00000a10 <__fp_splitA>:
 a10:	88 0f       	add	r24, r24
 a12:	97 fb       	bst	r25, 7
 a14:	99 1f       	adc	r25, r25
 a16:	61 f0       	breq	.+24     	; 0xa30 <__fp_splitA+0x20>
 a18:	9f 3f       	cpi	r25, 0xFF	; 255
 a1a:	79 f0       	breq	.+30     	; 0xa3a <__fp_splitA+0x2a>
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret
 a20:	12 16       	cp	r1, r18
 a22:	13 06       	cpc	r1, r19
 a24:	14 06       	cpc	r1, r20
 a26:	55 1f       	adc	r21, r21
 a28:	f2 cf       	rjmp	.-28     	; 0xa0e <__fp_split3+0xe>
 a2a:	46 95       	lsr	r20
 a2c:	f1 df       	rcall	.-30     	; 0xa10 <__fp_splitA>
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__fp_splitA+0x30>
 a30:	16 16       	cp	r1, r22
 a32:	17 06       	cpc	r1, r23
 a34:	18 06       	cpc	r1, r24
 a36:	99 1f       	adc	r25, r25
 a38:	f1 cf       	rjmp	.-30     	; 0xa1c <__fp_splitA+0xc>
 a3a:	86 95       	lsr	r24
 a3c:	71 05       	cpc	r23, r1
 a3e:	61 05       	cpc	r22, r1
 a40:	08 94       	sec
 a42:	08 95       	ret

00000a44 <__fp_zero>:
 a44:	e8 94       	clt

00000a46 <__fp_szero>:
 a46:	bb 27       	eor	r27, r27
 a48:	66 27       	eor	r22, r22
 a4a:	77 27       	eor	r23, r23
 a4c:	cb 01       	movw	r24, r22
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__mulsf3>:
 a52:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3x>
 a56:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 a5a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 a5e:	38 f0       	brcs	.+14     	; 0xa6e <__mulsf3+0x1c>
 a60:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__mulsf3+0x1c>
 a66:	95 23       	and	r25, r21
 a68:	11 f0       	breq	.+4      	; 0xa6e <__mulsf3+0x1c>
 a6a:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 a6e:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>
 a72:	11 24       	eor	r1, r1
 a74:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>

00000a78 <__mulsf3x>:
 a78:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 a7c:	70 f3       	brcs	.-36     	; 0xa5a <__mulsf3+0x8>

00000a7e <__mulsf3_pse>:
 a7e:	95 9f       	mul	r25, r21
 a80:	c1 f3       	breq	.-16     	; 0xa72 <__mulsf3+0x20>
 a82:	95 0f       	add	r25, r21
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	55 1f       	adc	r21, r21
 a88:	62 9f       	mul	r22, r18
 a8a:	f0 01       	movw	r30, r0
 a8c:	72 9f       	mul	r23, r18
 a8e:	bb 27       	eor	r27, r27
 a90:	f0 0d       	add	r31, r0
 a92:	b1 1d       	adc	r27, r1
 a94:	63 9f       	mul	r22, r19
 a96:	aa 27       	eor	r26, r26
 a98:	f0 0d       	add	r31, r0
 a9a:	b1 1d       	adc	r27, r1
 a9c:	aa 1f       	adc	r26, r26
 a9e:	64 9f       	mul	r22, r20
 aa0:	66 27       	eor	r22, r22
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	66 1f       	adc	r22, r22
 aa8:	82 9f       	mul	r24, r18
 aaa:	22 27       	eor	r18, r18
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	62 1f       	adc	r22, r18
 ab2:	73 9f       	mul	r23, r19
 ab4:	b0 0d       	add	r27, r0
 ab6:	a1 1d       	adc	r26, r1
 ab8:	62 1f       	adc	r22, r18
 aba:	83 9f       	mul	r24, r19
 abc:	a0 0d       	add	r26, r0
 abe:	61 1d       	adc	r22, r1
 ac0:	22 1f       	adc	r18, r18
 ac2:	74 9f       	mul	r23, r20
 ac4:	33 27       	eor	r19, r19
 ac6:	a0 0d       	add	r26, r0
 ac8:	61 1d       	adc	r22, r1
 aca:	23 1f       	adc	r18, r19
 acc:	84 9f       	mul	r24, r20
 ace:	60 0d       	add	r22, r0
 ad0:	21 1d       	adc	r18, r1
 ad2:	82 2f       	mov	r24, r18
 ad4:	76 2f       	mov	r23, r22
 ad6:	6a 2f       	mov	r22, r26
 ad8:	11 24       	eor	r1, r1
 ada:	9f 57       	subi	r25, 0x7F	; 127
 adc:	50 40       	sbci	r21, 0x00	; 0
 ade:	9a f0       	brmi	.+38     	; 0xb06 <__mulsf3_pse+0x88>
 ae0:	f1 f0       	breq	.+60     	; 0xb1e <__mulsf3_pse+0xa0>
 ae2:	88 23       	and	r24, r24
 ae4:	4a f0       	brmi	.+18     	; 0xaf8 <__mulsf3_pse+0x7a>
 ae6:	ee 0f       	add	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	bb 1f       	adc	r27, r27
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	91 50       	subi	r25, 0x01	; 1
 af4:	50 40       	sbci	r21, 0x00	; 0
 af6:	a9 f7       	brne	.-22     	; 0xae2 <__mulsf3_pse+0x64>
 af8:	9e 3f       	cpi	r25, 0xFE	; 254
 afa:	51 05       	cpc	r21, r1
 afc:	80 f0       	brcs	.+32     	; 0xb1e <__mulsf3_pse+0xa0>
 afe:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 b02:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 b06:	5f 3f       	cpi	r21, 0xFF	; 255
 b08:	e4 f3       	brlt	.-8      	; 0xb02 <__mulsf3_pse+0x84>
 b0a:	98 3e       	cpi	r25, 0xE8	; 232
 b0c:	d4 f3       	brlt	.-12     	; 0xb02 <__mulsf3_pse+0x84>
 b0e:	86 95       	lsr	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b7 95       	ror	r27
 b16:	f7 95       	ror	r31
 b18:	e7 95       	ror	r30
 b1a:	9f 5f       	subi	r25, 0xFF	; 255
 b1c:	c1 f7       	brne	.-16     	; 0xb0e <__mulsf3_pse+0x90>
 b1e:	fe 2b       	or	r31, r30
 b20:	88 0f       	add	r24, r24
 b22:	91 1d       	adc	r25, r1
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
