
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800106  00800106  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c9  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016d  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ae  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b7  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029c  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  9e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value = (portC_value) & (0<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value = (portD_value) | (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 06 01 	lds	r25, 0x0106
  c0:	89 2b       	or	r24, r25
  c2:	80 93 06 01 	sts	0x0106, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <digitalWritePortD+0x26>
	}
	else {
		portD_value = (portD_value) & (0<<pin);
  c8:	10 92 06 01 	sts	0x0106, r1
	}
	PORTD = portD_value;
  cc:	80 91 06 01 	lds	r24, 0x0106
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret

000000d4 <updateStepper>:
	
	return(0);
}

int updateStepper(int step_desired)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	int adder_var = 0;
	
	if (step_desired > step_current)
  d8:	20 91 09 01 	lds	r18, 0x0109
  dc:	30 91 0a 01 	lds	r19, 0x010A
  e0:	28 17       	cp	r18, r24
  e2:	39 07       	cpc	r19, r25
  e4:	44 f4       	brge	.+16     	; 0xf6 <updateStepper+0x22>
	{
		digitalWritePortD(direction_pin, HIGH);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = 1;
  f0:	c1 e0       	ldi	r28, 0x01	; 1
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	18 c0       	rjmp	.+48     	; 0x126 <updateStepper+0x52>
	}
	else if (step_desired < step_current)
  f6:	82 17       	cp	r24, r18
  f8:	93 07       	cpc	r25, r19
  fa:	44 f4       	brge	.+16     	; 0x10c <updateStepper+0x38>
	{
		digitalWritePortD(direction_pin, LOW);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	80 91 00 01 	lds	r24, 0x0100
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = -1;
 106:	cf ef       	ldi	r28, 0xFF	; 255
 108:	df ef       	ldi	r29, 0xFF	; 255
 10a:	0d c0       	rjmp	.+26     	; 0x126 <updateStepper+0x52>
	return(0);
}

int updateStepper(int step_desired)
{
	int adder_var = 0;
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
		// write pin high then low for a single pulse
		digitalWritePortD(step_pin, HIGH);
		digitalWritePortD(step_pin, LOW);
	}
	// increment current position
	step_current += adder_var;
 110:	80 91 09 01 	lds	r24, 0x0109
 114:	90 91 0a 01 	lds	r25, 0x010A
 118:	8c 0f       	add	r24, r28
 11a:	9d 1f       	adc	r25, r29
 11c:	90 93 0a 01 	sts	0x010A, r25
 120:	80 93 09 01 	sts	0x0109, r24
 124:	0b c0       	rjmp	.+22     	; 0x13c <updateStepper+0x68>
	}

	if (adder_var != 0)
	{
		// write pin high then low for a single pulse
		digitalWritePortD(step_pin, HIGH);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 91 01 01 	lds	r24, 0x0101
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(step_pin, LOW);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 91 01 01 	lds	r24, 0x0101
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 13a:	ea cf       	rjmp	.-44     	; 0x110 <updateStepper+0x3c>
	}
	// increment current position
	step_current += adder_var;
	// return current position in case required for a wait function
	return step_current;
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <delay_us>:

	}
}

void delay_us(uint16_t count) {
	while(count--) {
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	31 f0       	breq	.+12     	; 0x152 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	25 e0       	ldi	r18, 0x05	; 5
 148:	2a 95       	dec	r18
 14a:	f1 f7       	brne	.-4      	; 0x148 <delay_us+0x6>
 14c:	00 00       	nop
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	d1 f7       	brne	.-12     	; 0x146 <delay_us+0x4>
 152:	08 95       	ret

00000154 <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b000101100; // Sets all pins of Port D to output.
 154:	8c e2       	ldi	r24, 0x2C	; 44
 156:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b000000000; //Sets Port D to match the initial
 158:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b000000010;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 15e:	e0 e8       	ldi	r30, 0x80	; 128
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 6a       	ori	r24, 0xA2	; 162
 166:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8c 61       	ori	r24, 0x1C	; 28
 170:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 172:	87 e8       	ldi	r24, 0x87	; 135
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	90 93 87 00 	sts	0x0087, r25
 17a:	80 93 86 00 	sts	0x0086, r24
	
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 17e:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 180:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	80 93 7c 00 	sts	0x007C, r24
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 190:	ca e7       	ldi	r28, 0x7A	; 122
 192:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 194:	0f 2e       	mov	r0, r31
 196:	f9 e7       	ldi	r31, 0x79	; 121
 198:	ef 2e       	mov	r14, r31
 19a:	f1 2c       	mov	r15, r1
 19c:	f0 2d       	mov	r31, r0
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 19e:	0f 2e       	mov	r0, r31
 1a0:	f2 e3       	ldi	r31, 0x32	; 50
 1a2:	df 2e       	mov	r13, r31
 1a4:	f0 2d       	mov	r31, r0
		
		//Stepper Stuff
		updateStepper(desired_location);
		
		//A time delay to accommodate out stepper
		delay_us(delay_between_steps);
 1a6:	02 e0       	ldi	r16, 0x02	; 2
 1a8:	11 e0       	ldi	r17, 0x01	; 1
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 1aa:	88 81       	ld	r24, Y
 1ac:	80 64       	ori	r24, 0x40	; 64
 1ae:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 1b0:	88 81       	ld	r24, Y
 1b2:	84 ff       	sbrs	r24, 4
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <main+0x5c>
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 1b6:	f7 01       	movw	r30, r14
 1b8:	20 81       	ld	r18, Z
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	30 93 0c 01 	sts	0x010C, r19
 1c0:	20 93 0b 01 	sts	0x010B, r18
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 1c4:	d2 9e       	mul	r13, r18
 1c6:	c0 01       	movw	r24, r0
 1c8:	d3 9e       	mul	r13, r19
 1ca:	90 0d       	add	r25, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	90 93 08 01 	sts	0x0108, r25
 1d2:	80 93 07 01 	sts	0x0107, r24
		
		//Stepper Stuff
		updateStepper(desired_location);
 1d6:	0e 94 6a 00 	call	0xd4	; 0xd4 <updateStepper>
		
		//A time delay to accommodate out stepper
		delay_us(delay_between_steps);
 1da:	f8 01       	movw	r30, r16
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	0e 94 a1 00 	call	0x142	; 0x142 <delay_us>

		//OCR1A=145;  //135 degree
		//delay_ms(1000);


	}
 1e4:	e2 cf       	rjmp	.-60     	; 0x1aa <main+0x56>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
