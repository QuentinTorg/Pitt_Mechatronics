
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010e  0080010e  0000073e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000054d  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000190  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e8  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036e  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b1  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  9e:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value &= ~(1<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value |= (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 0e 01 	lds	r25, 0x010E
  c0:	89 2b       	or	r24, r25
  c2:	80 93 0e 01 	sts	0x010E, r24
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <digitalWritePortD+0x40>
	}
	else {
		portD_value &= ~(1<<pin);
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWritePortD+0x2e>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWritePortD+0x2a>
  d8:	ca 01       	movw	r24, r20
  da:	80 95       	com	r24
  dc:	90 91 0e 01 	lds	r25, 0x010E
  e0:	89 23       	and	r24, r25
  e2:	80 93 0e 01 	sts	0x010E, r24
	}
	PORTD = portD_value;
  e6:	80 91 0e 01 	lds	r24, 0x010E
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	08 95       	ret

000000ee <playFlute>:
	return step_current;
}

void playFlute(int playSound)
{
	if (playSound == LOW) { //Tells the motor to go CW
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	59 f4       	brne	.+22     	; 0x108 <playFlute+0x1a>
		digitalWritePortD(mot_Pin_Right, LOW);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	80 91 00 01 	lds	r24, 0x0100
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Left, HIGH);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 91 01 01 	lds	r24, 0x0101
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 106:	08 95       	ret
	}
	else if (playSound == HIGH) {
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	51 f4       	brne	.+20     	; 0x120 <playFlute+0x32>
		digitalWritePortD(mot_Pin_Left, LOW);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	80 91 01 01 	lds	r24, 0x0101
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Right, HIGH);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	80 91 00 01 	lds	r24, 0x0100
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 120:	08 95       	ret

00000122 <delay_us>:
		_delay_ms(1);
	}
}

void delay_us(uint16_t count) {
	while(count--) {
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	31 f0       	breq	.+12     	; 0x132 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	25 e0       	ldi	r18, 0x05	; 5
 128:	2a 95       	dec	r18
 12a:	f1 f7       	brne	.-4      	; 0x128 <delay_us+0x6>
 12c:	00 00       	nop
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	d1 f7       	brne	.-12     	; 0x126 <delay_us+0x4>
 132:	08 95       	ret

00000134 <updateStepper>:
		
	}
}*/

int updateStepper(int step_desired)
{
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
	int step_start = step_current;
	int accel_distance = 0;
	int accel_sign = 0; //initially the acceleration is neither forward nor backward
	int distance_from_start = 0;
	int velocity_sign = 0;
	int current_velocity = start_velocity;
 14e:	c0 91 04 01 	lds	r28, 0x0104
 152:	d0 91 05 01 	lds	r29, 0x0105
	int steps_to_max_velocity = 0;
	
	//Gives velocity and acceleration signs
	if (step_desired > step_current) {
 156:	80 91 11 01 	lds	r24, 0x0111
 15a:	90 91 12 01 	lds	r25, 0x0112
 15e:	80 17       	cp	r24, r16
 160:	91 07       	cpc	r25, r17
 162:	0c f4       	brge	.+2      	; 0x166 <updateStepper+0x32>
 164:	9b c0       	rjmp	.+310    	; 0x29c <updateStepper+0x168>
		accel_sign = 1;
		velocity_sign = 1;
	}
	else if (step_desired < step_current) {
 166:	08 17       	cp	r16, r24
 168:	19 07       	cpc	r17, r25
 16a:	0c f4       	brge	.+2      	; 0x16e <updateStepper+0x3a>
 16c:	8e c0       	rjmp	.+284    	; 0x28a <updateStepper+0x156>
 16e:	9f c0       	rjmp	.+318    	; 0x2ae <updateStepper+0x17a>
		if (current_velocity < max_velocity) {
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
			steps_to_max_velocity++;
 170:	75 01       	movw	r14, r10
 172:	c1 2c       	mov	r12, r1
 174:	d1 2c       	mov	r13, r1
 176:	8a 2c       	mov	r8, r10
 178:	9b 2c       	mov	r9, r11
 17a:	7e c0       	rjmp	.+252    	; 0x278 <updateStepper+0x144>
	
	while (step_current != step_desired)
	{
		if (adder_var != 0) //If the motor is not at the desired step, write step pin high then low for a single pulse
		{
			digitalWritePortD(step_pin, HIGH);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	80 91 03 01 	lds	r24, 0x0103
 182:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
			digitalWritePortD(step_pin, LOW);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	80 91 03 01 	lds	r24, 0x0103
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		}
		
		// increment current position
		step_current += adder_var;
 190:	80 91 11 01 	lds	r24, 0x0111
 194:	90 91 12 01 	lds	r25, 0x0112
 198:	8a 0d       	add	r24, r10
 19a:	9b 1d       	adc	r25, r11
 19c:	90 93 12 01 	sts	0x0112, r25
 1a0:	80 93 11 01 	sts	0x0111, r24
		delay_us(current_velocity);
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		
		if (velocity_sign == accel_sign) {
 1aa:	ea 14       	cp	r14, r10
 1ac:	fb 04       	cpc	r15, r11
 1ae:	01 f5       	brne	.+64     	; 0x1f0 <updateStepper+0xbc>
			current_velocity = current_velocity / accel_multiplier;
 1b0:	be 01       	movw	r22, r28
 1b2:	dd 0f       	add	r29, r29
 1b4:	88 0b       	sbc	r24, r24
 1b6:	99 0b       	sbc	r25, r25
 1b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__floatsisf>
 1bc:	20 91 0a 01 	lds	r18, 0x010A
 1c0:	30 91 0b 01 	lds	r19, 0x010B
 1c4:	40 91 0c 01 	lds	r20, 0x010C
 1c8:	50 91 0d 01 	lds	r21, 0x010D
 1cc:	0e 94 a9 01 	call	0x352	; 0x352 <__divsf3>
 1d0:	0e 94 1b 02 	call	0x436	; 0x436 <__fixsfsi>
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
		}
		
		if (current_velocity < max_velocity) {
 1d4:	20 91 08 01 	lds	r18, 0x0108
 1d8:	30 91 09 01 	lds	r19, 0x0109
 1dc:	eb 01       	movw	r28, r22
 1de:	62 17       	cp	r22, r18
 1e0:	73 07       	cpc	r23, r19
 1e2:	0c f4       	brge	.+2      	; 0x1e6 <updateStepper+0xb2>
 1e4:	e9 01       	movw	r28, r18
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 1e6:	c2 17       	cp	r28, r18
 1e8:	d3 07       	cpc	r29, r19
 1ea:	f1 f4       	brne	.+60     	; 0x228 <updateStepper+0xf4>
 1ec:	e9 01       	movw	r28, r18
 1ee:	31 c0       	rjmp	.+98     	; 0x252 <updateStepper+0x11e>
		
		if (velocity_sign == accel_sign) {
			current_velocity = current_velocity / accel_multiplier;
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
 1f0:	be 01       	movw	r22, r28
 1f2:	dd 0f       	add	r29, r29
 1f4:	88 0b       	sbc	r24, r24
 1f6:	99 0b       	sbc	r25, r25
 1f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__floatsisf>
 1fc:	20 91 0a 01 	lds	r18, 0x010A
 200:	30 91 0b 01 	lds	r19, 0x010B
 204:	40 91 0c 01 	lds	r20, 0x010C
 208:	50 91 0d 01 	lds	r21, 0x010D
 20c:	0e 94 df 02 	call	0x5be	; 0x5be <__mulsf3>
 210:	0e 94 1b 02 	call	0x436	; 0x436 <__fixsfsi>
		}
		
		if (current_velocity < max_velocity) {
 214:	20 91 08 01 	lds	r18, 0x0108
 218:	30 91 09 01 	lds	r19, 0x0109
 21c:	eb 01       	movw	r28, r22
 21e:	62 17       	cp	r22, r18
 220:	73 07       	cpc	r23, r19
 222:	bc f4       	brge	.+46     	; 0x252 <updateStepper+0x11e>
 224:	e9 01       	movw	r28, r18
 226:	15 c0       	rjmp	.+42     	; 0x252 <updateStepper+0x11e>
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 228:	80 91 11 01 	lds	r24, 0x0111
 22c:	90 91 12 01 	lds	r25, 0x0112
 230:	80 1b       	sub	r24, r16
 232:	91 0b       	sbc	r25, r17
 234:	9c 01       	movw	r18, r24
 236:	22 f4       	brpl	.+8      	; 0x240 <updateStepper+0x10c>
 238:	22 27       	eor	r18, r18
 23a:	33 27       	eor	r19, r19
 23c:	28 1b       	sub	r18, r24
 23e:	39 0b       	sbc	r19, r25
 240:	c2 16       	cp	r12, r18
 242:	d3 06       	cpc	r13, r19
 244:	34 f4       	brge	.+12     	; 0x252 <updateStepper+0x11e>
			steps_to_max_velocity++;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	c8 1a       	sub	r12, r24
 24a:	d8 0a       	sbc	r13, r24
 24c:	e8 2c       	mov	r14, r8
 24e:	f9 2c       	mov	r15, r9
 250:	13 c0       	rjmp	.+38     	; 0x278 <updateStepper+0x144>
		}
		else if (steps_to_max_velocity > abs(step_current - step_desired)){
 252:	20 91 11 01 	lds	r18, 0x0111
 256:	30 91 12 01 	lds	r19, 0x0112
 25a:	20 1b       	sub	r18, r16
 25c:	31 0b       	sbc	r19, r17
 25e:	c9 01       	movw	r24, r18
 260:	99 23       	and	r25, r25
 262:	24 f4       	brge	.+8      	; 0x26c <updateStepper+0x138>
 264:	88 27       	eor	r24, r24
 266:	99 27       	eor	r25, r25
 268:	82 1b       	sub	r24, r18
 26a:	93 0b       	sbc	r25, r19
 26c:	8c 15       	cp	r24, r12
 26e:	9d 05       	cpc	r25, r13
 270:	1c f4       	brge	.+6      	; 0x278 <updateStepper+0x144>
			accel_sign = -accel_sign;
 272:	f1 94       	neg	r15
 274:	e1 94       	neg	r14
 276:	f1 08       	sbc	r15, r1
	{
		digitalWritePortD(direction_pin, LOW);
		adder_var = -1;
	}
	
	while (step_current != step_desired)
 278:	80 91 11 01 	lds	r24, 0x0111
 27c:	90 91 12 01 	lds	r25, 0x0112
 280:	80 17       	cp	r24, r16
 282:	91 07       	cpc	r25, r17
 284:	09 f0       	breq	.+2      	; 0x288 <updateStepper+0x154>
 286:	7a cf       	rjmp	.-268    	; 0x17c <updateStepper+0x48>
 288:	12 c0       	rjmp	.+36     	; 0x2ae <updateStepper+0x17a>
		digitalWritePortD(direction_pin, HIGH);
		adder_var = 1;
	}
	else if (step_desired < step_current)
	{
		digitalWritePortD(direction_pin, LOW);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	80 91 02 01 	lds	r24, 0x0102
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = -1;
 294:	aa 24       	eor	r10, r10
 296:	aa 94       	dec	r10
 298:	ba 2c       	mov	r11, r10
 29a:	6a cf       	rjmp	.-300    	; 0x170 <updateStepper+0x3c>
	}
	
	int adder_var = 0;
	if (step_desired > step_current)
	{
		digitalWritePortD(direction_pin, HIGH);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	80 91 02 01 	lds	r24, 0x0102
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = 1;
 2a6:	aa 24       	eor	r10, r10
 2a8:	a3 94       	inc	r10
 2aa:	b1 2c       	mov	r11, r1
 2ac:	61 cf       	rjmp	.-318    	; 0x170 <updateStepper+0x3c>
			accel_sign = -accel_sign;
		}

	}
	return step_current;
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	08 95       	ret

000002c8 <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b11001100; // Sets pins of Port D according to circuit
 2c8:	8c ec       	ldi	r24, 0xCC	; 204
 2ca:	8a b9       	out	0x0a, r24	; 10
	//Stepper Pins: sets PD2 = step pin and PD3 = direction pins
	//Motor Pins: sets PD6 = left pin and PD7 = right pin for the H bridge
	PORTD = 0b00000000; //Sets Port D to match the initial of all zeros
 2cc:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b00000010; // Sets PB1 as output, sets the rest as input
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 6a       	ori	r24, 0xA2	; 162
 2da:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 2dc:	e1 e8       	ldi	r30, 0x81	; 129
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	8c 61       	ori	r24, 0x1C	; 28
 2e4:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 2e6:	87 e8       	ldi	r24, 0x87	; 135
 2e8:	93 e1       	ldi	r25, 0x13	; 19
 2ea:	90 93 87 00 	sts	0x0087, r25
 2ee:	80 93 86 00 	sts	0x0086, r24
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 2f2:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 2f4:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 2f8:	87 e8       	ldi	r24, 0x87	; 135
 2fa:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 2fe:	80 e6       	ldi	r24, 0x60	; 96
 300:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)
	
	playFlute(LOW);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		playFlute(HIGH);
		delay_ms(500);
		*/
		
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 30c:	ca e7       	ldi	r28, 0x7A	; 122
 30e:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 310:	09 e7       	ldi	r16, 0x79	; 121
 312:	10 e0       	ldi	r17, 0x00	; 0
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 314:	0f 2e       	mov	r0, r31
 316:	f2 e3       	ldi	r31, 0x32	; 50
 318:	ff 2e       	mov	r15, r31
 31a:	f0 2d       	mov	r31, r0
		playFlute(HIGH);
		delay_ms(500);
		*/
		
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 31c:	88 81       	ld	r24, Y
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 322:	88 81       	ld	r24, Y
 324:	84 ff       	sbrs	r24, 4
 326:	fd cf       	rjmp	.-6      	; 0x322 <main+0x5a>
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 328:	f8 01       	movw	r30, r16
 32a:	80 81       	ld	r24, Z
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 14 01 	sts	0x0114, r25
 332:	80 93 13 01 	sts	0x0113, r24
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 336:	f8 9e       	mul	r15, r24
 338:	90 01       	movw	r18, r0
 33a:	f9 9e       	mul	r15, r25
 33c:	30 0d       	add	r19, r0
 33e:	11 24       	eor	r1, r1
 340:	30 93 10 01 	sts	0x0110, r19
 344:	20 93 0f 01 	sts	0x010F, r18
		
		//Stepper Stuff
		updateStepper(5000);
 348:	88 e8       	ldi	r24, 0x88	; 136
 34a:	93 e1       	ldi	r25, 0x13	; 19
 34c:	0e 94 9a 00 	call	0x134	; 0x134 <updateStepper>
		
	}
 350:	e5 cf       	rjmp	.-54     	; 0x31c <main+0x54>

00000352 <__divsf3>:
 352:	0e 94 bd 01 	call	0x37a	; 0x37a <__divsf3x>
 356:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_round>
 35a:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscB>
 35e:	58 f0       	brcs	.+22     	; 0x376 <__divsf3+0x24>
 360:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_pscA>
 364:	40 f0       	brcs	.+16     	; 0x376 <__divsf3+0x24>
 366:	29 f4       	brne	.+10     	; 0x372 <__divsf3+0x20>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	29 f0       	breq	.+10     	; 0x376 <__divsf3+0x24>
 36c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 370:	51 11       	cpse	r21, r1
 372:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>
 376:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_nan>

0000037a <__divsf3x>:
 37a:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_split3>
 37e:	68 f3       	brcs	.-38     	; 0x35a <__divsf3+0x8>

00000380 <__divsf3_pse>:
 380:	99 23       	and	r25, r25
 382:	b1 f3       	breq	.-20     	; 0x370 <__divsf3+0x1e>
 384:	55 23       	and	r21, r21
 386:	91 f3       	breq	.-28     	; 0x36c <__divsf3+0x1a>
 388:	95 1b       	sub	r25, r21
 38a:	55 0b       	sbc	r21, r21
 38c:	bb 27       	eor	r27, r27
 38e:	aa 27       	eor	r26, r26
 390:	62 17       	cp	r22, r18
 392:	73 07       	cpc	r23, r19
 394:	84 07       	cpc	r24, r20
 396:	38 f0       	brcs	.+14     	; 0x3a6 <__divsf3_pse+0x26>
 398:	9f 5f       	subi	r25, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	44 1f       	adc	r20, r20
 3a2:	aa 1f       	adc	r26, r26
 3a4:	a9 f3       	breq	.-22     	; 0x390 <__divsf3_pse+0x10>
 3a6:	35 d0       	rcall	.+106    	; 0x412 <__divsf3_pse+0x92>
 3a8:	0e 2e       	mov	r0, r30
 3aa:	3a f0       	brmi	.+14     	; 0x3ba <__divsf3_pse+0x3a>
 3ac:	e0 e8       	ldi	r30, 0x80	; 128
 3ae:	32 d0       	rcall	.+100    	; 0x414 <__divsf3_pse+0x94>
 3b0:	91 50       	subi	r25, 0x01	; 1
 3b2:	50 40       	sbci	r21, 0x00	; 0
 3b4:	e6 95       	lsr	r30
 3b6:	00 1c       	adc	r0, r0
 3b8:	ca f7       	brpl	.-14     	; 0x3ac <__divsf3_pse+0x2c>
 3ba:	2b d0       	rcall	.+86     	; 0x412 <__divsf3_pse+0x92>
 3bc:	fe 2f       	mov	r31, r30
 3be:	29 d0       	rcall	.+82     	; 0x412 <__divsf3_pse+0x92>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	bb 1f       	adc	r27, r27
 3c8:	26 17       	cp	r18, r22
 3ca:	37 07       	cpc	r19, r23
 3cc:	48 07       	cpc	r20, r24
 3ce:	ab 07       	cpc	r26, r27
 3d0:	b0 e8       	ldi	r27, 0x80	; 128
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <__divsf3_pse+0x56>
 3d4:	bb 0b       	sbc	r27, r27
 3d6:	80 2d       	mov	r24, r0
 3d8:	bf 01       	movw	r22, r30
 3da:	ff 27       	eor	r31, r31
 3dc:	93 58       	subi	r25, 0x83	; 131
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	3a f0       	brmi	.+14     	; 0x3f0 <__divsf3_pse+0x70>
 3e2:	9e 3f       	cpi	r25, 0xFE	; 254
 3e4:	51 05       	cpc	r21, r1
 3e6:	78 f0       	brcs	.+30     	; 0x406 <__divsf3_pse+0x86>
 3e8:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 3ec:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	e4 f3       	brlt	.-8      	; 0x3ec <__divsf3_pse+0x6c>
 3f4:	98 3e       	cpi	r25, 0xE8	; 232
 3f6:	d4 f3       	brlt	.-12     	; 0x3ec <__divsf3_pse+0x6c>
 3f8:	86 95       	lsr	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b7 95       	ror	r27
 400:	f7 95       	ror	r31
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	c9 f7       	brne	.-14     	; 0x3f8 <__divsf3_pse+0x78>
 406:	88 0f       	add	r24, r24
 408:	91 1d       	adc	r25, r1
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	97 f9       	bld	r25, 7
 410:	08 95       	ret
 412:	e1 e0       	ldi	r30, 0x01	; 1
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	bb 1f       	adc	r27, r27
 41c:	62 17       	cp	r22, r18
 41e:	73 07       	cpc	r23, r19
 420:	84 07       	cpc	r24, r20
 422:	ba 07       	cpc	r27, r26
 424:	20 f0       	brcs	.+8      	; 0x42e <__divsf3_pse+0xae>
 426:	62 1b       	sub	r22, r18
 428:	73 0b       	sbc	r23, r19
 42a:	84 0b       	sbc	r24, r20
 42c:	ba 0b       	sbc	r27, r26
 42e:	ee 1f       	adc	r30, r30
 430:	88 f7       	brcc	.-30     	; 0x414 <__divsf3_pse+0x94>
 432:	e0 95       	com	r30
 434:	08 95       	ret

00000436 <__fixsfsi>:
 436:	0e 94 22 02 	call	0x444	; 0x444 <__fixunssfsi>
 43a:	68 94       	set
 43c:	b1 11       	cpse	r27, r1
 43e:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>
 442:	08 95       	ret

00000444 <__fixunssfsi>:
 444:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_splitA>
 448:	88 f0       	brcs	.+34     	; 0x46c <__fixunssfsi+0x28>
 44a:	9f 57       	subi	r25, 0x7F	; 127
 44c:	98 f0       	brcs	.+38     	; 0x474 <__fixunssfsi+0x30>
 44e:	b9 2f       	mov	r27, r25
 450:	99 27       	eor	r25, r25
 452:	b7 51       	subi	r27, 0x17	; 23
 454:	b0 f0       	brcs	.+44     	; 0x482 <__fixunssfsi+0x3e>
 456:	e1 f0       	breq	.+56     	; 0x490 <__fixunssfsi+0x4c>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	1a f0       	brmi	.+6      	; 0x468 <__fixunssfsi+0x24>
 462:	ba 95       	dec	r27
 464:	c9 f7       	brne	.-14     	; 0x458 <__fixunssfsi+0x14>
 466:	14 c0       	rjmp	.+40     	; 0x490 <__fixunssfsi+0x4c>
 468:	b1 30       	cpi	r27, 0x01	; 1
 46a:	91 f0       	breq	.+36     	; 0x490 <__fixunssfsi+0x4c>
 46c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_zero>
 470:	b1 e0       	ldi	r27, 0x01	; 1
 472:	08 95       	ret
 474:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_zero>
 478:	67 2f       	mov	r22, r23
 47a:	78 2f       	mov	r23, r24
 47c:	88 27       	eor	r24, r24
 47e:	b8 5f       	subi	r27, 0xF8	; 248
 480:	39 f0       	breq	.+14     	; 0x490 <__fixunssfsi+0x4c>
 482:	b9 3f       	cpi	r27, 0xF9	; 249
 484:	cc f3       	brlt	.-14     	; 0x478 <__fixunssfsi+0x34>
 486:	86 95       	lsr	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b3 95       	inc	r27
 48e:	d9 f7       	brne	.-10     	; 0x486 <__fixunssfsi+0x42>
 490:	3e f4       	brtc	.+14     	; 0x4a0 <__fixunssfsi+0x5c>
 492:	90 95       	com	r25
 494:	80 95       	com	r24
 496:	70 95       	com	r23
 498:	61 95       	neg	r22
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__floatunsisf>:
 4a2:	e8 94       	clt
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__floatsisf+0x12>

000004a6 <__floatsisf>:
 4a6:	97 fb       	bst	r25, 7
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__floatsisf+0x12>
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	99 23       	and	r25, r25
 4ba:	a9 f0       	breq	.+42     	; 0x4e6 <__floatsisf+0x40>
 4bc:	f9 2f       	mov	r31, r25
 4be:	96 e9       	ldi	r25, 0x96	; 150
 4c0:	bb 27       	eor	r27, r27
 4c2:	93 95       	inc	r25
 4c4:	f6 95       	lsr	r31
 4c6:	87 95       	ror	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f1 11       	cpse	r31, r1
 4d0:	f8 cf       	rjmp	.-16     	; 0x4c2 <__floatsisf+0x1c>
 4d2:	fa f4       	brpl	.+62     	; 0x512 <__floatsisf+0x6c>
 4d4:	bb 0f       	add	r27, r27
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__floatsisf+0x36>
 4d8:	60 ff       	sbrs	r22, 0
 4da:	1b c0       	rjmp	.+54     	; 0x512 <__floatsisf+0x6c>
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	16 c0       	rjmp	.+44     	; 0x512 <__floatsisf+0x6c>
 4e6:	88 23       	and	r24, r24
 4e8:	11 f0       	breq	.+4      	; 0x4ee <__floatsisf+0x48>
 4ea:	96 e9       	ldi	r25, 0x96	; 150
 4ec:	11 c0       	rjmp	.+34     	; 0x510 <__floatsisf+0x6a>
 4ee:	77 23       	and	r23, r23
 4f0:	21 f0       	breq	.+8      	; 0x4fa <__floatsisf+0x54>
 4f2:	9e e8       	ldi	r25, 0x8E	; 142
 4f4:	87 2f       	mov	r24, r23
 4f6:	76 2f       	mov	r23, r22
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <__floatsisf+0x5e>
 4fa:	66 23       	and	r22, r22
 4fc:	71 f0       	breq	.+28     	; 0x51a <__floatsisf+0x74>
 4fe:	96 e8       	ldi	r25, 0x86	; 134
 500:	86 2f       	mov	r24, r22
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	2a f0       	brmi	.+10     	; 0x512 <__floatsisf+0x6c>
 508:	9a 95       	dec	r25
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	da f7       	brpl	.-10     	; 0x508 <__floatsisf+0x62>
 512:	88 0f       	add	r24, r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__fp_inf>:
 51c:	97 f9       	bld	r25, 7
 51e:	9f 67       	ori	r25, 0x7F	; 127
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	08 95       	ret

00000528 <__fp_nan>:
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	08 95       	ret

0000052e <__fp_pscA>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	09 06       	cpc	r0, r25
 53a:	08 95       	ret

0000053c <__fp_pscB>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	12 16       	cp	r1, r18
 542:	13 06       	cpc	r1, r19
 544:	14 06       	cpc	r1, r20
 546:	05 06       	cpc	r0, r21
 548:	08 95       	ret

0000054a <__fp_round>:
 54a:	09 2e       	mov	r0, r25
 54c:	03 94       	inc	r0
 54e:	00 0c       	add	r0, r0
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0xc>
 552:	88 23       	and	r24, r24
 554:	52 f0       	brmi	.+20     	; 0x56a <__fp_round+0x20>
 556:	bb 0f       	add	r27, r27
 558:	40 f4       	brcc	.+16     	; 0x56a <__fp_round+0x20>
 55a:	bf 2b       	or	r27, r31
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0x18>
 55e:	60 ff       	sbrs	r22, 0
 560:	04 c0       	rjmp	.+8      	; 0x56a <__fp_round+0x20>
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

000005b0 <__fp_zero>:
 5b0:	e8 94       	clt

000005b2 <__fp_szero>:
 5b2:	bb 27       	eor	r27, r27
 5b4:	66 27       	eor	r22, r22
 5b6:	77 27       	eor	r23, r23
 5b8:	cb 01       	movw	r24, r22
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__mulsf3>:
 5be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulsf3x>
 5c2:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_round>
 5c6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_pscA>
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__mulsf3+0x1c>
 5cc:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscB>
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__mulsf3+0x1c>
 5d2:	95 23       	and	r25, r21
 5d4:	11 f0       	breq	.+4      	; 0x5da <__mulsf3+0x1c>
 5d6:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 5da:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_nan>
 5de:	11 24       	eor	r1, r1
 5e0:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>

000005e4 <__mulsf3x>:
 5e4:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_split3>
 5e8:	70 f3       	brcs	.-36     	; 0x5c6 <__mulsf3+0x8>

000005ea <__mulsf3_pse>:
 5ea:	95 9f       	mul	r25, r21
 5ec:	c1 f3       	breq	.-16     	; 0x5de <__mulsf3+0x20>
 5ee:	95 0f       	add	r25, r21
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	55 1f       	adc	r21, r21
 5f4:	62 9f       	mul	r22, r18
 5f6:	f0 01       	movw	r30, r0
 5f8:	72 9f       	mul	r23, r18
 5fa:	bb 27       	eor	r27, r27
 5fc:	f0 0d       	add	r31, r0
 5fe:	b1 1d       	adc	r27, r1
 600:	63 9f       	mul	r22, r19
 602:	aa 27       	eor	r26, r26
 604:	f0 0d       	add	r31, r0
 606:	b1 1d       	adc	r27, r1
 608:	aa 1f       	adc	r26, r26
 60a:	64 9f       	mul	r22, r20
 60c:	66 27       	eor	r22, r22
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	66 1f       	adc	r22, r22
 614:	82 9f       	mul	r24, r18
 616:	22 27       	eor	r18, r18
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	62 1f       	adc	r22, r18
 61e:	73 9f       	mul	r23, r19
 620:	b0 0d       	add	r27, r0
 622:	a1 1d       	adc	r26, r1
 624:	62 1f       	adc	r22, r18
 626:	83 9f       	mul	r24, r19
 628:	a0 0d       	add	r26, r0
 62a:	61 1d       	adc	r22, r1
 62c:	22 1f       	adc	r18, r18
 62e:	74 9f       	mul	r23, r20
 630:	33 27       	eor	r19, r19
 632:	a0 0d       	add	r26, r0
 634:	61 1d       	adc	r22, r1
 636:	23 1f       	adc	r18, r19
 638:	84 9f       	mul	r24, r20
 63a:	60 0d       	add	r22, r0
 63c:	21 1d       	adc	r18, r1
 63e:	82 2f       	mov	r24, r18
 640:	76 2f       	mov	r23, r22
 642:	6a 2f       	mov	r22, r26
 644:	11 24       	eor	r1, r1
 646:	9f 57       	subi	r25, 0x7F	; 127
 648:	50 40       	sbci	r21, 0x00	; 0
 64a:	9a f0       	brmi	.+38     	; 0x672 <__mulsf3_pse+0x88>
 64c:	f1 f0       	breq	.+60     	; 0x68a <__mulsf3_pse+0xa0>
 64e:	88 23       	and	r24, r24
 650:	4a f0       	brmi	.+18     	; 0x664 <__mulsf3_pse+0x7a>
 652:	ee 0f       	add	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	bb 1f       	adc	r27, r27
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	91 50       	subi	r25, 0x01	; 1
 660:	50 40       	sbci	r21, 0x00	; 0
 662:	a9 f7       	brne	.-22     	; 0x64e <__mulsf3_pse+0x64>
 664:	9e 3f       	cpi	r25, 0xFE	; 254
 666:	51 05       	cpc	r21, r1
 668:	80 f0       	brcs	.+32     	; 0x68a <__mulsf3_pse+0xa0>
 66a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 66e:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_szero>
 672:	5f 3f       	cpi	r21, 0xFF	; 255
 674:	e4 f3       	brlt	.-8      	; 0x66e <__mulsf3_pse+0x84>
 676:	98 3e       	cpi	r25, 0xE8	; 232
 678:	d4 f3       	brlt	.-12     	; 0x66e <__mulsf3_pse+0x84>
 67a:	86 95       	lsr	r24
 67c:	77 95       	ror	r23
 67e:	67 95       	ror	r22
 680:	b7 95       	ror	r27
 682:	f7 95       	ror	r31
 684:	e7 95       	ror	r30
 686:	9f 5f       	subi	r25, 0xFF	; 255
 688:	c1 f7       	brne	.-16     	; 0x67a <__mulsf3_pse+0x90>
 68a:	fe 2b       	or	r31, r30
 68c:	88 0f       	add	r24, r24
 68e:	91 1d       	adc	r25, r1
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
