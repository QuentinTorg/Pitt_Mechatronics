
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010c  0080010c  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000049f  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000190  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d3  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034b  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046d  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  9e:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value = (portC_value) & (0<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value = (portD_value) | (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 0c 01 	lds	r25, 0x010C
  c0:	89 2b       	or	r24, r25
  c2:	80 93 0c 01 	sts	0x010C, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <digitalWritePortD+0x26>
	}
	else {
		portD_value = (portD_value) & (0<<pin);
  c8:	10 92 0c 01 	sts	0x010C, r1
	}
	PORTD = portD_value;
  cc:	80 91 0c 01 	lds	r24, 0x010C
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret

000000d4 <delay_us>:

	}
}

void delay_us(uint16_t count) {
	while(count--) {
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	31 f0       	breq	.+12     	; 0xe4 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	25 e0       	ldi	r18, 0x05	; 5
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <delay_us+0x6>
  de:	00 00       	nop
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	d1 f7       	brne	.-12     	; 0xd8 <delay_us+0x4>
  e4:	08 95       	ret

000000e6 <updateStepper>:
	
	return(0);
}

int updateStepper(int step_desired)
{
  e6:	8f 92       	push	r8
  e8:	9f 92       	push	r9
  ea:	af 92       	push	r10
  ec:	bf 92       	push	r11
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	8c 01       	movw	r16, r24
	int step_start = step_current;
	int accel_distance = 0;
	int accel_sign = 0;
	int distance_from_start = 0;
	int velocity_sign = 0;
	int current_velocity = start_velocity;
 100:	c0 91 02 01 	lds	r28, 0x0102
 104:	d0 91 03 01 	lds	r29, 0x0103
	int steps_to_max_velocity = 0;
	
	if (step_desired > step_current) {
 108:	80 91 0f 01 	lds	r24, 0x010F
 10c:	90 91 10 01 	lds	r25, 0x0110
 110:	80 17       	cp	r24, r16
 112:	91 07       	cpc	r25, r17
 114:	0c f4       	brge	.+2      	; 0x118 <updateStepper+0x32>
 116:	9b c0       	rjmp	.+310    	; 0x24e <updateStepper+0x168>
		accel_sign = 1;
		velocity_sign = 1;
	}
	else if (step_desired < step_current) {
 118:	08 17       	cp	r16, r24
 11a:	19 07       	cpc	r17, r25
 11c:	0c f4       	brge	.+2      	; 0x120 <updateStepper+0x3a>
 11e:	8e c0       	rjmp	.+284    	; 0x23c <updateStepper+0x156>
 120:	9f c0       	rjmp	.+318    	; 0x260 <updateStepper+0x17a>
		if (current_velocity < max_velocity){
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
			steps_to_max_velocity++;
 122:	75 01       	movw	r14, r10
 124:	c1 2c       	mov	r12, r1
 126:	d1 2c       	mov	r13, r1
 128:	8a 2c       	mov	r8, r10
 12a:	9b 2c       	mov	r9, r11
 12c:	7e c0       	rjmp	.+252    	; 0x22a <updateStepper+0x144>
		

		if (adder_var != 0)
		{
			// write pin high then low for a single pulse
			digitalWritePortD(step_pin, HIGH);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	80 91 01 01 	lds	r24, 0x0101
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
			digitalWritePortD(step_pin, LOW);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 91 01 01 	lds	r24, 0x0101
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		}
		// increment current position
		step_current += adder_var;
 142:	80 91 0f 01 	lds	r24, 0x010F
 146:	90 91 10 01 	lds	r25, 0x0110
 14a:	8a 0d       	add	r24, r10
 14c:	9b 1d       	adc	r25, r11
 14e:	90 93 10 01 	sts	0x0110, r25
 152:	80 93 0f 01 	sts	0x010F, r24
		
		delay_us(current_velocity);
 156:	ce 01       	movw	r24, r28
 158:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_us>
		if (velocity_sign == accel_sign) {
 15c:	ea 14       	cp	r14, r10
 15e:	fb 04       	cpc	r15, r11
 160:	01 f5       	brne	.+64     	; 0x1a2 <updateStepper+0xbc>
			current_velocity = current_velocity / accel_multiplier;
 162:	be 01       	movw	r22, r28
 164:	dd 0f       	add	r29, r29
 166:	88 0b       	sbc	r24, r24
 168:	99 0b       	sbc	r25, r25
 16a:	0e 94 28 02 	call	0x450	; 0x450 <__floatsisf>
 16e:	20 91 08 01 	lds	r18, 0x0108
 172:	30 91 09 01 	lds	r19, 0x0109
 176:	40 91 0a 01 	lds	r20, 0x010A
 17a:	50 91 0b 01 	lds	r21, 0x010B
 17e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divsf3>
 182:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fixsfsi>
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
		}
		
		if (current_velocity < max_velocity){
 186:	20 91 06 01 	lds	r18, 0x0106
 18a:	30 91 07 01 	lds	r19, 0x0107
 18e:	eb 01       	movw	r28, r22
 190:	62 17       	cp	r22, r18
 192:	73 07       	cpc	r23, r19
 194:	0c f4       	brge	.+2      	; 0x198 <updateStepper+0xb2>
 196:	e9 01       	movw	r28, r18
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 198:	c2 17       	cp	r28, r18
 19a:	d3 07       	cpc	r29, r19
 19c:	f1 f4       	brne	.+60     	; 0x1da <updateStepper+0xf4>
 19e:	e9 01       	movw	r28, r18
 1a0:	31 c0       	rjmp	.+98     	; 0x204 <updateStepper+0x11e>
		delay_us(current_velocity);
		if (velocity_sign == accel_sign) {
			current_velocity = current_velocity / accel_multiplier;
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
 1a2:	be 01       	movw	r22, r28
 1a4:	dd 0f       	add	r29, r29
 1a6:	88 0b       	sbc	r24, r24
 1a8:	99 0b       	sbc	r25, r25
 1aa:	0e 94 28 02 	call	0x450	; 0x450 <__floatsisf>
 1ae:	20 91 08 01 	lds	r18, 0x0108
 1b2:	30 91 09 01 	lds	r19, 0x0109
 1b6:	40 91 0a 01 	lds	r20, 0x010A
 1ba:	50 91 0b 01 	lds	r21, 0x010B
 1be:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 1c2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fixsfsi>
		}
		
		if (current_velocity < max_velocity){
 1c6:	20 91 06 01 	lds	r18, 0x0106
 1ca:	30 91 07 01 	lds	r19, 0x0107
 1ce:	eb 01       	movw	r28, r22
 1d0:	62 17       	cp	r22, r18
 1d2:	73 07       	cpc	r23, r19
 1d4:	bc f4       	brge	.+46     	; 0x204 <updateStepper+0x11e>
 1d6:	e9 01       	movw	r28, r18
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <updateStepper+0x11e>
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 1da:	80 91 0f 01 	lds	r24, 0x010F
 1de:	90 91 10 01 	lds	r25, 0x0110
 1e2:	80 1b       	sub	r24, r16
 1e4:	91 0b       	sbc	r25, r17
 1e6:	9c 01       	movw	r18, r24
 1e8:	22 f4       	brpl	.+8      	; 0x1f2 <updateStepper+0x10c>
 1ea:	22 27       	eor	r18, r18
 1ec:	33 27       	eor	r19, r19
 1ee:	28 1b       	sub	r18, r24
 1f0:	39 0b       	sbc	r19, r25
 1f2:	c2 16       	cp	r12, r18
 1f4:	d3 06       	cpc	r13, r19
 1f6:	34 f4       	brge	.+12     	; 0x204 <updateStepper+0x11e>
			steps_to_max_velocity++;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	c8 1a       	sub	r12, r24
 1fc:	d8 0a       	sbc	r13, r24
 1fe:	e8 2c       	mov	r14, r8
 200:	f9 2c       	mov	r15, r9
 202:	13 c0       	rjmp	.+38     	; 0x22a <updateStepper+0x144>
		}
		else if (steps_to_max_velocity > abs(step_current - step_desired)){
 204:	20 91 0f 01 	lds	r18, 0x010F
 208:	30 91 10 01 	lds	r19, 0x0110
 20c:	20 1b       	sub	r18, r16
 20e:	31 0b       	sbc	r19, r17
 210:	c9 01       	movw	r24, r18
 212:	99 23       	and	r25, r25
 214:	24 f4       	brge	.+8      	; 0x21e <updateStepper+0x138>
 216:	88 27       	eor	r24, r24
 218:	99 27       	eor	r25, r25
 21a:	82 1b       	sub	r24, r18
 21c:	93 0b       	sbc	r25, r19
 21e:	8c 15       	cp	r24, r12
 220:	9d 05       	cpc	r25, r13
 222:	1c f4       	brge	.+6      	; 0x22a <updateStepper+0x144>
			accel_sign = -accel_sign;
 224:	f1 94       	neg	r15
 226:	e1 94       	neg	r14
 228:	f1 08       	sbc	r15, r1
				digitalWritePortD(direction_pin, LOW);
				adder_var = -1;
			}
	
	
	while (step_current != step_desired){
 22a:	80 91 0f 01 	lds	r24, 0x010F
 22e:	90 91 10 01 	lds	r25, 0x0110
 232:	80 17       	cp	r24, r16
 234:	91 07       	cpc	r25, r17
 236:	09 f0       	breq	.+2      	; 0x23a <updateStepper+0x154>
 238:	7a cf       	rjmp	.-268    	; 0x12e <updateStepper+0x48>
 23a:	12 c0       	rjmp	.+36     	; 0x260 <updateStepper+0x17a>
				digitalWritePortD(direction_pin, HIGH);
				adder_var = 1;
			}
			else if (step_desired < step_current)
			{
				digitalWritePortD(direction_pin, LOW);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	80 91 00 01 	lds	r24, 0x0100
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
				adder_var = -1;
 246:	aa 24       	eor	r10, r10
 248:	aa 94       	dec	r10
 24a:	ba 2c       	mov	r11, r10
 24c:	6a cf       	rjmp	.-300    	; 0x122 <updateStepper+0x3c>
	
	
			int adder_var = 0;
			if (step_desired > step_current)
			{
				digitalWritePortD(direction_pin, HIGH);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 91 00 01 	lds	r24, 0x0100
 254:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
				adder_var = 1;
 258:	aa 24       	eor	r10, r10
 25a:	a3 94       	inc	r10
 25c:	b1 2c       	mov	r11, r1
 25e:	61 cf       	rjmp	.-318    	; 0x122 <updateStepper+0x3c>
		}
		
		
	}
	return step_current;
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	df 90       	pop	r13
 26e:	cf 90       	pop	r12
 270:	bf 90       	pop	r11
 272:	af 90       	pop	r10
 274:	9f 90       	pop	r9
 276:	8f 90       	pop	r8
 278:	08 95       	ret

0000027a <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b000101100; // Sets all pins of Port D to output.
 27a:	8c e2       	ldi	r24, 0x2C	; 44
 27c:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b000000000; //Sets Port D to match the initial
 27e:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b000000010;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 284:	e0 e8       	ldi	r30, 0x80	; 128
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	82 6a       	ori	r24, 0xA2	; 162
 28c:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 28e:	e1 e8       	ldi	r30, 0x81	; 129
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8c 61       	ori	r24, 0x1C	; 28
 296:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	93 e1       	ldi	r25, 0x13	; 19
 29c:	90 93 87 00 	sts	0x0087, r25
 2a0:	80 93 86 00 	sts	0x0086, r24
	
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 2a4:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 2a6:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 2aa:	87 e8       	ldi	r24, 0x87	; 135
 2ac:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 2b0:	80 e6       	ldi	r24, 0x60	; 96
 2b2:	80 93 7c 00 	sts	0x007C, r24
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 2b6:	ca e7       	ldi	r28, 0x7A	; 122
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 2ba:	09 e7       	ldi	r16, 0x79	; 121
 2bc:	10 e0       	ldi	r17, 0x00	; 0
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 2be:	0f 2e       	mov	r0, r31
 2c0:	f2 e3       	ldi	r31, 0x32	; 50
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 2c6:	88 81       	ld	r24, Y
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 2cc:	88 81       	ld	r24, Y
 2ce:	84 ff       	sbrs	r24, 4
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <main+0x52>
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 2d2:	f8 01       	movw	r30, r16
 2d4:	80 81       	ld	r24, Z
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 12 01 	sts	0x0112, r25
 2dc:	80 93 11 01 	sts	0x0111, r24
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 2e0:	f8 9e       	mul	r15, r24
 2e2:	90 01       	movw	r18, r0
 2e4:	f9 9e       	mul	r15, r25
 2e6:	30 0d       	add	r19, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	30 93 0e 01 	sts	0x010E, r19
 2ee:	20 93 0d 01 	sts	0x010D, r18
		
		//Stepper Stuff
		updateStepper(5000);
 2f2:	88 e8       	ldi	r24, 0x88	; 136
 2f4:	93 e1       	ldi	r25, 0x13	; 19
 2f6:	0e 94 73 00 	call	0xe6	; 0xe6 <updateStepper>

		//OCR1A=145;  //135 degree
		//delay_ms(1000);


	}
 2fa:	e5 cf       	rjmp	.-54     	; 0x2c6 <main+0x4c>

000002fc <__divsf3>:
 2fc:	0e 94 92 01 	call	0x324	; 0x324 <__divsf3x>
 300:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_round>
 304:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscB>
 308:	58 f0       	brcs	.+22     	; 0x320 <__divsf3+0x24>
 30a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fp_pscA>
 30e:	40 f0       	brcs	.+16     	; 0x320 <__divsf3+0x24>
 310:	29 f4       	brne	.+10     	; 0x31c <__divsf3+0x20>
 312:	5f 3f       	cpi	r21, 0xFF	; 255
 314:	29 f0       	breq	.+10     	; 0x320 <__divsf3+0x24>
 316:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 31a:	51 11       	cpse	r21, r1
 31c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 320:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_nan>

00000324 <__divsf3x>:
 324:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_split3>
 328:	68 f3       	brcs	.-38     	; 0x304 <__divsf3+0x8>

0000032a <__divsf3_pse>:
 32a:	99 23       	and	r25, r25
 32c:	b1 f3       	breq	.-20     	; 0x31a <__divsf3+0x1e>
 32e:	55 23       	and	r21, r21
 330:	91 f3       	breq	.-28     	; 0x316 <__divsf3+0x1a>
 332:	95 1b       	sub	r25, r21
 334:	55 0b       	sbc	r21, r21
 336:	bb 27       	eor	r27, r27
 338:	aa 27       	eor	r26, r26
 33a:	62 17       	cp	r22, r18
 33c:	73 07       	cpc	r23, r19
 33e:	84 07       	cpc	r24, r20
 340:	38 f0       	brcs	.+14     	; 0x350 <__divsf3_pse+0x26>
 342:	9f 5f       	subi	r25, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	44 1f       	adc	r20, r20
 34c:	aa 1f       	adc	r26, r26
 34e:	a9 f3       	breq	.-22     	; 0x33a <__divsf3_pse+0x10>
 350:	35 d0       	rcall	.+106    	; 0x3bc <__divsf3_pse+0x92>
 352:	0e 2e       	mov	r0, r30
 354:	3a f0       	brmi	.+14     	; 0x364 <__divsf3_pse+0x3a>
 356:	e0 e8       	ldi	r30, 0x80	; 128
 358:	32 d0       	rcall	.+100    	; 0x3be <__divsf3_pse+0x94>
 35a:	91 50       	subi	r25, 0x01	; 1
 35c:	50 40       	sbci	r21, 0x00	; 0
 35e:	e6 95       	lsr	r30
 360:	00 1c       	adc	r0, r0
 362:	ca f7       	brpl	.-14     	; 0x356 <__divsf3_pse+0x2c>
 364:	2b d0       	rcall	.+86     	; 0x3bc <__divsf3_pse+0x92>
 366:	fe 2f       	mov	r31, r30
 368:	29 d0       	rcall	.+82     	; 0x3bc <__divsf3_pse+0x92>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	bb 1f       	adc	r27, r27
 372:	26 17       	cp	r18, r22
 374:	37 07       	cpc	r19, r23
 376:	48 07       	cpc	r20, r24
 378:	ab 07       	cpc	r26, r27
 37a:	b0 e8       	ldi	r27, 0x80	; 128
 37c:	09 f0       	breq	.+2      	; 0x380 <__divsf3_pse+0x56>
 37e:	bb 0b       	sbc	r27, r27
 380:	80 2d       	mov	r24, r0
 382:	bf 01       	movw	r22, r30
 384:	ff 27       	eor	r31, r31
 386:	93 58       	subi	r25, 0x83	; 131
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	3a f0       	brmi	.+14     	; 0x39a <__divsf3_pse+0x70>
 38c:	9e 3f       	cpi	r25, 0xFE	; 254
 38e:	51 05       	cpc	r21, r1
 390:	78 f0       	brcs	.+30     	; 0x3b0 <__divsf3_pse+0x86>
 392:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 396:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 39a:	5f 3f       	cpi	r21, 0xFF	; 255
 39c:	e4 f3       	brlt	.-8      	; 0x396 <__divsf3_pse+0x6c>
 39e:	98 3e       	cpi	r25, 0xE8	; 232
 3a0:	d4 f3       	brlt	.-12     	; 0x396 <__divsf3_pse+0x6c>
 3a2:	86 95       	lsr	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	b7 95       	ror	r27
 3aa:	f7 95       	ror	r31
 3ac:	9f 5f       	subi	r25, 0xFF	; 255
 3ae:	c9 f7       	brne	.-14     	; 0x3a2 <__divsf3_pse+0x78>
 3b0:	88 0f       	add	r24, r24
 3b2:	91 1d       	adc	r25, r1
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	97 f9       	bld	r25, 7
 3ba:	08 95       	ret
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	bb 1f       	adc	r27, r27
 3c6:	62 17       	cp	r22, r18
 3c8:	73 07       	cpc	r23, r19
 3ca:	84 07       	cpc	r24, r20
 3cc:	ba 07       	cpc	r27, r26
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__divsf3_pse+0xae>
 3d0:	62 1b       	sub	r22, r18
 3d2:	73 0b       	sbc	r23, r19
 3d4:	84 0b       	sbc	r24, r20
 3d6:	ba 0b       	sbc	r27, r26
 3d8:	ee 1f       	adc	r30, r30
 3da:	88 f7       	brcc	.-30     	; 0x3be <__divsf3_pse+0x94>
 3dc:	e0 95       	com	r30
 3de:	08 95       	ret

000003e0 <__fixsfsi>:
 3e0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__fixunssfsi>
 3e4:	68 94       	set
 3e6:	b1 11       	cpse	r27, r1
 3e8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 3ec:	08 95       	ret

000003ee <__fixunssfsi>:
 3ee:	0e 94 93 02 	call	0x526	; 0x526 <__fp_splitA>
 3f2:	88 f0       	brcs	.+34     	; 0x416 <__fixunssfsi+0x28>
 3f4:	9f 57       	subi	r25, 0x7F	; 127
 3f6:	98 f0       	brcs	.+38     	; 0x41e <__fixunssfsi+0x30>
 3f8:	b9 2f       	mov	r27, r25
 3fa:	99 27       	eor	r25, r25
 3fc:	b7 51       	subi	r27, 0x17	; 23
 3fe:	b0 f0       	brcs	.+44     	; 0x42c <__fixunssfsi+0x3e>
 400:	e1 f0       	breq	.+56     	; 0x43a <__fixunssfsi+0x4c>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	1a f0       	brmi	.+6      	; 0x412 <__fixunssfsi+0x24>
 40c:	ba 95       	dec	r27
 40e:	c9 f7       	brne	.-14     	; 0x402 <__fixunssfsi+0x14>
 410:	14 c0       	rjmp	.+40     	; 0x43a <__fixunssfsi+0x4c>
 412:	b1 30       	cpi	r27, 0x01	; 1
 414:	91 f0       	breq	.+36     	; 0x43a <__fixunssfsi+0x4c>
 416:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_zero>
 41a:	b1 e0       	ldi	r27, 0x01	; 1
 41c:	08 95       	ret
 41e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_zero>
 422:	67 2f       	mov	r22, r23
 424:	78 2f       	mov	r23, r24
 426:	88 27       	eor	r24, r24
 428:	b8 5f       	subi	r27, 0xF8	; 248
 42a:	39 f0       	breq	.+14     	; 0x43a <__fixunssfsi+0x4c>
 42c:	b9 3f       	cpi	r27, 0xF9	; 249
 42e:	cc f3       	brlt	.-14     	; 0x422 <__fixunssfsi+0x34>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b3 95       	inc	r27
 438:	d9 f7       	brne	.-10     	; 0x430 <__fixunssfsi+0x42>
 43a:	3e f4       	brtc	.+14     	; 0x44a <__fixunssfsi+0x5c>
 43c:	90 95       	com	r25
 43e:	80 95       	com	r24
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	8f 4f       	sbci	r24, 0xFF	; 255
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	08 95       	ret

0000044c <__floatunsisf>:
 44c:	e8 94       	clt
 44e:	09 c0       	rjmp	.+18     	; 0x462 <__floatsisf+0x12>

00000450 <__floatsisf>:
 450:	97 fb       	bst	r25, 7
 452:	3e f4       	brtc	.+14     	; 0x462 <__floatsisf+0x12>
 454:	90 95       	com	r25
 456:	80 95       	com	r24
 458:	70 95       	com	r23
 45a:	61 95       	neg	r22
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	99 23       	and	r25, r25
 464:	a9 f0       	breq	.+42     	; 0x490 <__floatsisf+0x40>
 466:	f9 2f       	mov	r31, r25
 468:	96 e9       	ldi	r25, 0x96	; 150
 46a:	bb 27       	eor	r27, r27
 46c:	93 95       	inc	r25
 46e:	f6 95       	lsr	r31
 470:	87 95       	ror	r24
 472:	77 95       	ror	r23
 474:	67 95       	ror	r22
 476:	b7 95       	ror	r27
 478:	f1 11       	cpse	r31, r1
 47a:	f8 cf       	rjmp	.-16     	; 0x46c <__floatsisf+0x1c>
 47c:	fa f4       	brpl	.+62     	; 0x4bc <__floatsisf+0x6c>
 47e:	bb 0f       	add	r27, r27
 480:	11 f4       	brne	.+4      	; 0x486 <__floatsisf+0x36>
 482:	60 ff       	sbrs	r22, 0
 484:	1b c0       	rjmp	.+54     	; 0x4bc <__floatsisf+0x6c>
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	16 c0       	rjmp	.+44     	; 0x4bc <__floatsisf+0x6c>
 490:	88 23       	and	r24, r24
 492:	11 f0       	breq	.+4      	; 0x498 <__floatsisf+0x48>
 494:	96 e9       	ldi	r25, 0x96	; 150
 496:	11 c0       	rjmp	.+34     	; 0x4ba <__floatsisf+0x6a>
 498:	77 23       	and	r23, r23
 49a:	21 f0       	breq	.+8      	; 0x4a4 <__floatsisf+0x54>
 49c:	9e e8       	ldi	r25, 0x8E	; 142
 49e:	87 2f       	mov	r24, r23
 4a0:	76 2f       	mov	r23, r22
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__floatsisf+0x5e>
 4a4:	66 23       	and	r22, r22
 4a6:	71 f0       	breq	.+28     	; 0x4c4 <__floatsisf+0x74>
 4a8:	96 e8       	ldi	r25, 0x86	; 134
 4aa:	86 2f       	mov	r24, r22
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	2a f0       	brmi	.+10     	; 0x4bc <__floatsisf+0x6c>
 4b2:	9a 95       	dec	r25
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	88 1f       	adc	r24, r24
 4ba:	da f7       	brpl	.-10     	; 0x4b2 <__floatsisf+0x62>
 4bc:	88 0f       	add	r24, r24
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	97 f9       	bld	r25, 7
 4c4:	08 95       	ret

000004c6 <__fp_inf>:
 4c6:	97 f9       	bld	r25, 7
 4c8:	9f 67       	ori	r25, 0x7F	; 127
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	08 95       	ret

000004d2 <__fp_nan>:
 4d2:	9f ef       	ldi	r25, 0xFF	; 255
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	08 95       	ret

000004d8 <__fp_pscA>:
 4d8:	00 24       	eor	r0, r0
 4da:	0a 94       	dec	r0
 4dc:	16 16       	cp	r1, r22
 4de:	17 06       	cpc	r1, r23
 4e0:	18 06       	cpc	r1, r24
 4e2:	09 06       	cpc	r0, r25
 4e4:	08 95       	ret

000004e6 <__fp_pscB>:
 4e6:	00 24       	eor	r0, r0
 4e8:	0a 94       	dec	r0
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	05 06       	cpc	r0, r21
 4f2:	08 95       	ret

000004f4 <__fp_round>:
 4f4:	09 2e       	mov	r0, r25
 4f6:	03 94       	inc	r0
 4f8:	00 0c       	add	r0, r0
 4fa:	11 f4       	brne	.+4      	; 0x500 <__fp_round+0xc>
 4fc:	88 23       	and	r24, r24
 4fe:	52 f0       	brmi	.+20     	; 0x514 <__fp_round+0x20>
 500:	bb 0f       	add	r27, r27
 502:	40 f4       	brcc	.+16     	; 0x514 <__fp_round+0x20>
 504:	bf 2b       	or	r27, r31
 506:	11 f4       	brne	.+4      	; 0x50c <__fp_round+0x18>
 508:	60 ff       	sbrs	r22, 0
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__fp_round+0x20>
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	08 95       	ret

00000516 <__fp_split3>:
 516:	57 fd       	sbrc	r21, 7
 518:	90 58       	subi	r25, 0x80	; 128
 51a:	44 0f       	add	r20, r20
 51c:	55 1f       	adc	r21, r21
 51e:	59 f0       	breq	.+22     	; 0x536 <__fp_splitA+0x10>
 520:	5f 3f       	cpi	r21, 0xFF	; 255
 522:	71 f0       	breq	.+28     	; 0x540 <__fp_splitA+0x1a>
 524:	47 95       	ror	r20

00000526 <__fp_splitA>:
 526:	88 0f       	add	r24, r24
 528:	97 fb       	bst	r25, 7
 52a:	99 1f       	adc	r25, r25
 52c:	61 f0       	breq	.+24     	; 0x546 <__fp_splitA+0x20>
 52e:	9f 3f       	cpi	r25, 0xFF	; 255
 530:	79 f0       	breq	.+30     	; 0x550 <__fp_splitA+0x2a>
 532:	87 95       	ror	r24
 534:	08 95       	ret
 536:	12 16       	cp	r1, r18
 538:	13 06       	cpc	r1, r19
 53a:	14 06       	cpc	r1, r20
 53c:	55 1f       	adc	r21, r21
 53e:	f2 cf       	rjmp	.-28     	; 0x524 <__fp_split3+0xe>
 540:	46 95       	lsr	r20
 542:	f1 df       	rcall	.-30     	; 0x526 <__fp_splitA>
 544:	08 c0       	rjmp	.+16     	; 0x556 <__fp_splitA+0x30>
 546:	16 16       	cp	r1, r22
 548:	17 06       	cpc	r1, r23
 54a:	18 06       	cpc	r1, r24
 54c:	99 1f       	adc	r25, r25
 54e:	f1 cf       	rjmp	.-30     	; 0x532 <__fp_splitA+0xc>
 550:	86 95       	lsr	r24
 552:	71 05       	cpc	r23, r1
 554:	61 05       	cpc	r22, r1
 556:	08 94       	sec
 558:	08 95       	ret

0000055a <__fp_zero>:
 55a:	e8 94       	clt

0000055c <__fp_szero>:
 55c:	bb 27       	eor	r27, r27
 55e:	66 27       	eor	r22, r22
 560:	77 27       	eor	r23, r23
 562:	cb 01       	movw	r24, r22
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret

00000568 <__mulsf3>:
 568:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3x>
 56c:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_round>
 570:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fp_pscA>
 574:	38 f0       	brcs	.+14     	; 0x584 <__mulsf3+0x1c>
 576:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscB>
 57a:	20 f0       	brcs	.+8      	; 0x584 <__mulsf3+0x1c>
 57c:	95 23       	and	r25, r21
 57e:	11 f0       	breq	.+4      	; 0x584 <__mulsf3+0x1c>
 580:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 584:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_nan>
 588:	11 24       	eor	r1, r1
 58a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>

0000058e <__mulsf3x>:
 58e:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_split3>
 592:	70 f3       	brcs	.-36     	; 0x570 <__mulsf3+0x8>

00000594 <__mulsf3_pse>:
 594:	95 9f       	mul	r25, r21
 596:	c1 f3       	breq	.-16     	; 0x588 <__mulsf3+0x20>
 598:	95 0f       	add	r25, r21
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	55 1f       	adc	r21, r21
 59e:	62 9f       	mul	r22, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	72 9f       	mul	r23, r18
 5a4:	bb 27       	eor	r27, r27
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	63 9f       	mul	r22, r19
 5ac:	aa 27       	eor	r26, r26
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	aa 1f       	adc	r26, r26
 5b4:	64 9f       	mul	r22, r20
 5b6:	66 27       	eor	r22, r22
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	66 1f       	adc	r22, r22
 5be:	82 9f       	mul	r24, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	73 9f       	mul	r23, r19
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	83 9f       	mul	r24, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	22 1f       	adc	r18, r18
 5d8:	74 9f       	mul	r23, r20
 5da:	33 27       	eor	r19, r19
 5dc:	a0 0d       	add	r26, r0
 5de:	61 1d       	adc	r22, r1
 5e0:	23 1f       	adc	r18, r19
 5e2:	84 9f       	mul	r24, r20
 5e4:	60 0d       	add	r22, r0
 5e6:	21 1d       	adc	r18, r1
 5e8:	82 2f       	mov	r24, r18
 5ea:	76 2f       	mov	r23, r22
 5ec:	6a 2f       	mov	r22, r26
 5ee:	11 24       	eor	r1, r1
 5f0:	9f 57       	subi	r25, 0x7F	; 127
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	9a f0       	brmi	.+38     	; 0x61c <__mulsf3_pse+0x88>
 5f6:	f1 f0       	breq	.+60     	; 0x634 <__mulsf3_pse+0xa0>
 5f8:	88 23       	and	r24, r24
 5fa:	4a f0       	brmi	.+18     	; 0x60e <__mulsf3_pse+0x7a>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	a9 f7       	brne	.-22     	; 0x5f8 <__mulsf3_pse+0x64>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	80 f0       	brcs	.+32     	; 0x634 <__mulsf3_pse+0xa0>
 614:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 618:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__mulsf3_pse+0x84>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__mulsf3_pse+0x84>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	e7 95       	ror	r30
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	c1 f7       	brne	.-16     	; 0x624 <__mulsf3_pse+0x90>
 634:	fe 2b       	or	r31, r30
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
