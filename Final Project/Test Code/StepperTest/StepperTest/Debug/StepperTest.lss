
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000662  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000704  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e5  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ca  00000000  00000000  00000db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020f  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a9  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  9e:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value &= ~(1<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value |= (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 0e 01 	lds	r25, 0x010E
  c0:	89 2b       	or	r24, r25
  c2:	80 93 0e 01 	sts	0x010E, r24
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <digitalWritePortD+0x40>
	}
	else {
		portD_value &= ~(1<<pin);
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWritePortD+0x2e>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWritePortD+0x2a>
  d8:	ca 01       	movw	r24, r20
  da:	80 95       	com	r24
  dc:	90 91 0e 01 	lds	r25, 0x010E
  e0:	89 23       	and	r24, r25
  e2:	80 93 0e 01 	sts	0x010E, r24
	}
	PORTD = portD_value;
  e6:	80 91 0e 01 	lds	r24, 0x010E
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	08 95       	ret

000000ee <playFlute>:
}
*/

void playFlute(int playSound)
{
	if (playSound == HIGH) { //Tells the motor to up and snuff sound
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	59 f4       	brne	.+22     	; 0x10a <playFlute+0x1c>
		digitalWritePortD(mot_Pin_Right, LOW);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Left, HIGH);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 91 01 01 	lds	r24, 0x0101
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 108:	08 95       	ret
	}
	else if (playSound == LOW) {
 10a:	89 2b       	or	r24, r25
 10c:	51 f4       	brne	.+20     	; 0x122 <playFlute+0x34>
		digitalWritePortD(mot_Pin_Left, LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	80 91 01 01 	lds	r24, 0x0101
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Right, HIGH);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 122:	08 95       	ret

00000124 <delay_us>:
		_delay_ms(1);
	}
}

void delay_us(uint16_t count) {
	while(count--) {
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	31 f0       	breq	.+12     	; 0x134 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	2a 95       	dec	r18
 12c:	f1 f7       	brne	.-4      	; 0x12a <delay_us+0x6>
 12e:	00 00       	nop
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	d1 f7       	brne	.-12     	; 0x128 <delay_us+0x4>
 134:	08 95       	ret

00000136 <updateStepper>:
	
	return steps = (4000.0 / 111.0) * length;
}

int updateStepper(int step_desired)
{
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
int step_start = step_current;
int accel_distance = 0;
int accel_sign = 0; //initially the acceleration is neither forward nor backward
int distance_from_start = 0;
int velocity_sign = 0;
int current_velocity = start_velocity;
 150:	c0 91 04 01 	lds	r28, 0x0104
 154:	d0 91 05 01 	lds	r29, 0x0105
int steps_to_max_velocity = 0;

//Gives velocity and acceleration signs
if (step_desired > step_current) {
 158:	80 91 0f 01 	lds	r24, 0x010F
 15c:	90 91 10 01 	lds	r25, 0x0110
 160:	80 17       	cp	r24, r16
 162:	91 07       	cpc	r25, r17
 164:	0c f4       	brge	.+2      	; 0x168 <updateStepper+0x32>
 166:	9b c0       	rjmp	.+310    	; 0x29e <updateStepper+0x168>
accel_sign = 1;
velocity_sign = 1;
}
else if (step_desired < step_current) {
 168:	08 17       	cp	r16, r24
 16a:	19 07       	cpc	r17, r25
 16c:	0c f4       	brge	.+2      	; 0x170 <updateStepper+0x3a>
 16e:	8e c0       	rjmp	.+284    	; 0x28c <updateStepper+0x156>
 170:	9f c0       	rjmp	.+318    	; 0x2b0 <updateStepper+0x17a>
if (current_velocity < max_velocity) {
current_velocity = max_velocity;
}

if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
steps_to_max_velocity++;
 172:	75 01       	movw	r14, r10
 174:	c1 2c       	mov	r12, r1
 176:	d1 2c       	mov	r13, r1
 178:	8a 2c       	mov	r8, r10
 17a:	9b 2c       	mov	r9, r11
 17c:	7e c0       	rjmp	.+252    	; 0x27a <updateStepper+0x144>

while (step_current != step_desired)
{
if (adder_var != 0) //If the motor is not at the desired step, write step pin high then low for a single pulse
{
digitalWritePortD(step_pin, HIGH);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	80 91 03 01 	lds	r24, 0x0103
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
digitalWritePortD(step_pin, LOW);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 91 03 01 	lds	r24, 0x0103
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
}

// increment current position
step_current += adder_var;
 192:	80 91 0f 01 	lds	r24, 0x010F
 196:	90 91 10 01 	lds	r25, 0x0110
 19a:	8a 0d       	add	r24, r10
 19c:	9b 1d       	adc	r25, r11
 19e:	90 93 10 01 	sts	0x0110, r25
 1a2:	80 93 0f 01 	sts	0x010F, r24
delay_us(current_velocity);
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 92 00 	call	0x124	; 0x124 <delay_us>

if (velocity_sign == accel_sign) {
 1ac:	ea 14       	cp	r14, r10
 1ae:	fb 04       	cpc	r15, r11
 1b0:	01 f5       	brne	.+64     	; 0x1f2 <updateStepper+0xbc>
current_velocity = current_velocity / accel_multiplier;
 1b2:	be 01       	movw	r22, r28
 1b4:	dd 0f       	add	r29, r29
 1b6:	88 0b       	sbc	r24, r24
 1b8:	99 0b       	sbc	r25, r25
 1ba:	0e 94 36 02 	call	0x46c	; 0x46c <__floatsisf>
 1be:	20 91 0a 01 	lds	r18, 0x010A
 1c2:	30 91 0b 01 	lds	r19, 0x010B
 1c6:	40 91 0c 01 	lds	r20, 0x010C
 1ca:	50 91 0d 01 	lds	r21, 0x010D
 1ce:	0e 94 8c 01 	call	0x318	; 0x318 <__divsf3>
 1d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fixsfsi>
}
else {
current_velocity = current_velocity * accel_multiplier;
}

if (current_velocity < max_velocity) {
 1d6:	20 91 08 01 	lds	r18, 0x0108
 1da:	30 91 09 01 	lds	r19, 0x0109
 1de:	eb 01       	movw	r28, r22
 1e0:	62 17       	cp	r22, r18
 1e2:	73 07       	cpc	r23, r19
 1e4:	0c f4       	brge	.+2      	; 0x1e8 <updateStepper+0xb2>
 1e6:	e9 01       	movw	r28, r18
current_velocity = max_velocity;
}

if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 1e8:	c2 17       	cp	r28, r18
 1ea:	d3 07       	cpc	r29, r19
 1ec:	f1 f4       	brne	.+60     	; 0x22a <updateStepper+0xf4>
 1ee:	e9 01       	movw	r28, r18
 1f0:	31 c0       	rjmp	.+98     	; 0x254 <updateStepper+0x11e>

if (velocity_sign == accel_sign) {
current_velocity = current_velocity / accel_multiplier;
}
else {
current_velocity = current_velocity * accel_multiplier;
 1f2:	be 01       	movw	r22, r28
 1f4:	dd 0f       	add	r29, r29
 1f6:	88 0b       	sbc	r24, r24
 1f8:	99 0b       	sbc	r25, r25
 1fa:	0e 94 36 02 	call	0x46c	; 0x46c <__floatsisf>
 1fe:	20 91 0a 01 	lds	r18, 0x010A
 202:	30 91 0b 01 	lds	r19, 0x010B
 206:	40 91 0c 01 	lds	r20, 0x010C
 20a:	50 91 0d 01 	lds	r21, 0x010D
 20e:	0e 94 c2 02 	call	0x584	; 0x584 <__mulsf3>
 212:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fixsfsi>
}

if (current_velocity < max_velocity) {
 216:	20 91 08 01 	lds	r18, 0x0108
 21a:	30 91 09 01 	lds	r19, 0x0109
 21e:	eb 01       	movw	r28, r22
 220:	62 17       	cp	r22, r18
 222:	73 07       	cpc	r23, r19
 224:	bc f4       	brge	.+46     	; 0x254 <updateStepper+0x11e>
 226:	e9 01       	movw	r28, r18
 228:	15 c0       	rjmp	.+42     	; 0x254 <updateStepper+0x11e>
current_velocity = max_velocity;
}

if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 22a:	80 91 0f 01 	lds	r24, 0x010F
 22e:	90 91 10 01 	lds	r25, 0x0110
 232:	80 1b       	sub	r24, r16
 234:	91 0b       	sbc	r25, r17
 236:	9c 01       	movw	r18, r24
 238:	22 f4       	brpl	.+8      	; 0x242 <updateStepper+0x10c>
 23a:	22 27       	eor	r18, r18
 23c:	33 27       	eor	r19, r19
 23e:	28 1b       	sub	r18, r24
 240:	39 0b       	sbc	r19, r25
 242:	c2 16       	cp	r12, r18
 244:	d3 06       	cpc	r13, r19
 246:	34 f4       	brge	.+12     	; 0x254 <updateStepper+0x11e>
steps_to_max_velocity++;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	c8 1a       	sub	r12, r24
 24c:	d8 0a       	sbc	r13, r24
 24e:	e8 2c       	mov	r14, r8
 250:	f9 2c       	mov	r15, r9
 252:	13 c0       	rjmp	.+38     	; 0x27a <updateStepper+0x144>
}
else if (steps_to_max_velocity > abs(step_current - step_desired)){
 254:	20 91 0f 01 	lds	r18, 0x010F
 258:	30 91 10 01 	lds	r19, 0x0110
 25c:	20 1b       	sub	r18, r16
 25e:	31 0b       	sbc	r19, r17
 260:	c9 01       	movw	r24, r18
 262:	99 23       	and	r25, r25
 264:	24 f4       	brge	.+8      	; 0x26e <updateStepper+0x138>
 266:	88 27       	eor	r24, r24
 268:	99 27       	eor	r25, r25
 26a:	82 1b       	sub	r24, r18
 26c:	93 0b       	sbc	r25, r19
 26e:	8c 15       	cp	r24, r12
 270:	9d 05       	cpc	r25, r13
 272:	1c f4       	brge	.+6      	; 0x27a <updateStepper+0x144>
accel_sign = -accel_sign;
 274:	f1 94       	neg	r15
 276:	e1 94       	neg	r14
 278:	f1 08       	sbc	r15, r1
{
digitalWritePortD(direction_pin, LOW);
adder_var = -1;
}

while (step_current != step_desired)
 27a:	80 91 0f 01 	lds	r24, 0x010F
 27e:	90 91 10 01 	lds	r25, 0x0110
 282:	80 17       	cp	r24, r16
 284:	91 07       	cpc	r25, r17
 286:	09 f0       	breq	.+2      	; 0x28a <updateStepper+0x154>
 288:	7a cf       	rjmp	.-268    	; 0x17e <updateStepper+0x48>
 28a:	12 c0       	rjmp	.+36     	; 0x2b0 <updateStepper+0x17a>
digitalWritePortD(direction_pin, HIGH);
adder_var = 1;
}
else if (step_desired < step_current)
{
digitalWritePortD(direction_pin, LOW);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	80 91 02 01 	lds	r24, 0x0102
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
adder_var = -1;
 296:	aa 24       	eor	r10, r10
 298:	aa 94       	dec	r10
 29a:	ba 2c       	mov	r11, r10
 29c:	6a cf       	rjmp	.-300    	; 0x172 <updateStepper+0x3c>
}

int adder_var = 0;
if (step_desired > step_current)
{
digitalWritePortD(direction_pin, HIGH);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	80 91 02 01 	lds	r24, 0x0102
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
adder_var = 1;
 2a8:	aa 24       	eor	r10, r10
 2aa:	a3 94       	inc	r10
 2ac:	b1 2c       	mov	r11, r1
 2ae:	61 cf       	rjmp	.-318    	; 0x172 <updateStepper+0x3c>
accel_sign = -accel_sign;
}

}
return step_current;
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	08 95       	ret

000002ca <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b11001100; // Sets pins of Port D according to circuit
 2ca:	8c ec       	ldi	r24, 0xCC	; 204
 2cc:	8a b9       	out	0x0a, r24	; 10
	//Stepper Pins: sets PD2 = step pin and PD3 = direction pins
	//Motor Pins: sets PD6 = left pin and PD7 = right pin for the H bridge
	PORTD = 0b00000000; //Sets Port D to match the initial of all zeros
 2ce:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b00000010; // Sets PB1 as output, sets the rest as input
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 2d4:	e0 e8       	ldi	r30, 0x80	; 128
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 6a       	ori	r24, 0xA2	; 162
 2dc:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	8c 61       	ori	r24, 0x1C	; 28
 2e6:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 2e8:	87 e8       	ldi	r24, 0x87	; 135
 2ea:	93 e1       	ldi	r25, 0x13	; 19
 2ec:	90 93 87 00 	sts	0x0087, r25
 2f0:	80 93 86 00 	sts	0x0086, r24
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 2f4:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 2f6:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 2fa:	87 e8       	ldi	r24, 0x87	; 135
 2fc:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 300:	80 e6       	ldi	r24, 0x60	; 96
 302:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)
	
	playFlute(HIGH);  //Starts the flute out as closed
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
		*/

		updateStepper(4000);
 30e:	80 ea       	ldi	r24, 0xA0	; 160
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	0e 94 9b 00 	call	0x136	; 0x136 <updateStepper>
		delay_ms(500);
		playFlute(HIGH);
		
		delay_ms(3000);
		*/
	}
 316:	fb cf       	rjmp	.-10     	; 0x30e <main+0x44>

00000318 <__divsf3>:
 318:	0e 94 a0 01 	call	0x340	; 0x340 <__divsf3x>
 31c:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_round>
 320:	0e 94 81 02 	call	0x502	; 0x502 <__fp_pscB>
 324:	58 f0       	brcs	.+22     	; 0x33c <__divsf3+0x24>
 326:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_pscA>
 32a:	40 f0       	brcs	.+16     	; 0x33c <__divsf3+0x24>
 32c:	29 f4       	brne	.+10     	; 0x338 <__divsf3+0x20>
 32e:	5f 3f       	cpi	r21, 0xFF	; 255
 330:	29 f0       	breq	.+10     	; 0x33c <__divsf3+0x24>
 332:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_inf>
 336:	51 11       	cpse	r21, r1
 338:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>
 33c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_nan>

00000340 <__divsf3x>:
 340:	0e 94 99 02 	call	0x532	; 0x532 <__fp_split3>
 344:	68 f3       	brcs	.-38     	; 0x320 <__divsf3+0x8>

00000346 <__divsf3_pse>:
 346:	99 23       	and	r25, r25
 348:	b1 f3       	breq	.-20     	; 0x336 <__divsf3+0x1e>
 34a:	55 23       	and	r21, r21
 34c:	91 f3       	breq	.-28     	; 0x332 <__divsf3+0x1a>
 34e:	95 1b       	sub	r25, r21
 350:	55 0b       	sbc	r21, r21
 352:	bb 27       	eor	r27, r27
 354:	aa 27       	eor	r26, r26
 356:	62 17       	cp	r22, r18
 358:	73 07       	cpc	r23, r19
 35a:	84 07       	cpc	r24, r20
 35c:	38 f0       	brcs	.+14     	; 0x36c <__divsf3_pse+0x26>
 35e:	9f 5f       	subi	r25, 0xFF	; 255
 360:	5f 4f       	sbci	r21, 0xFF	; 255
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	44 1f       	adc	r20, r20
 368:	aa 1f       	adc	r26, r26
 36a:	a9 f3       	breq	.-22     	; 0x356 <__divsf3_pse+0x10>
 36c:	35 d0       	rcall	.+106    	; 0x3d8 <__divsf3_pse+0x92>
 36e:	0e 2e       	mov	r0, r30
 370:	3a f0       	brmi	.+14     	; 0x380 <__divsf3_pse+0x3a>
 372:	e0 e8       	ldi	r30, 0x80	; 128
 374:	32 d0       	rcall	.+100    	; 0x3da <__divsf3_pse+0x94>
 376:	91 50       	subi	r25, 0x01	; 1
 378:	50 40       	sbci	r21, 0x00	; 0
 37a:	e6 95       	lsr	r30
 37c:	00 1c       	adc	r0, r0
 37e:	ca f7       	brpl	.-14     	; 0x372 <__divsf3_pse+0x2c>
 380:	2b d0       	rcall	.+86     	; 0x3d8 <__divsf3_pse+0x92>
 382:	fe 2f       	mov	r31, r30
 384:	29 d0       	rcall	.+82     	; 0x3d8 <__divsf3_pse+0x92>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	bb 1f       	adc	r27, r27
 38e:	26 17       	cp	r18, r22
 390:	37 07       	cpc	r19, r23
 392:	48 07       	cpc	r20, r24
 394:	ab 07       	cpc	r26, r27
 396:	b0 e8       	ldi	r27, 0x80	; 128
 398:	09 f0       	breq	.+2      	; 0x39c <__divsf3_pse+0x56>
 39a:	bb 0b       	sbc	r27, r27
 39c:	80 2d       	mov	r24, r0
 39e:	bf 01       	movw	r22, r30
 3a0:	ff 27       	eor	r31, r31
 3a2:	93 58       	subi	r25, 0x83	; 131
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	3a f0       	brmi	.+14     	; 0x3b6 <__divsf3_pse+0x70>
 3a8:	9e 3f       	cpi	r25, 0xFE	; 254
 3aa:	51 05       	cpc	r21, r1
 3ac:	78 f0       	brcs	.+30     	; 0x3cc <__divsf3_pse+0x86>
 3ae:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_inf>
 3b2:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>
 3b6:	5f 3f       	cpi	r21, 0xFF	; 255
 3b8:	e4 f3       	brlt	.-8      	; 0x3b2 <__divsf3_pse+0x6c>
 3ba:	98 3e       	cpi	r25, 0xE8	; 232
 3bc:	d4 f3       	brlt	.-12     	; 0x3b2 <__divsf3_pse+0x6c>
 3be:	86 95       	lsr	r24
 3c0:	77 95       	ror	r23
 3c2:	67 95       	ror	r22
 3c4:	b7 95       	ror	r27
 3c6:	f7 95       	ror	r31
 3c8:	9f 5f       	subi	r25, 0xFF	; 255
 3ca:	c9 f7       	brne	.-14     	; 0x3be <__divsf3_pse+0x78>
 3cc:	88 0f       	add	r24, r24
 3ce:	91 1d       	adc	r25, r1
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	97 f9       	bld	r25, 7
 3d6:	08 95       	ret
 3d8:	e1 e0       	ldi	r30, 0x01	; 1
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	bb 1f       	adc	r27, r27
 3e2:	62 17       	cp	r22, r18
 3e4:	73 07       	cpc	r23, r19
 3e6:	84 07       	cpc	r24, r20
 3e8:	ba 07       	cpc	r27, r26
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__divsf3_pse+0xae>
 3ec:	62 1b       	sub	r22, r18
 3ee:	73 0b       	sbc	r23, r19
 3f0:	84 0b       	sbc	r24, r20
 3f2:	ba 0b       	sbc	r27, r26
 3f4:	ee 1f       	adc	r30, r30
 3f6:	88 f7       	brcc	.-30     	; 0x3da <__divsf3_pse+0x94>
 3f8:	e0 95       	com	r30
 3fa:	08 95       	ret

000003fc <__fixsfsi>:
 3fc:	0e 94 05 02 	call	0x40a	; 0x40a <__fixunssfsi>
 400:	68 94       	set
 402:	b1 11       	cpse	r27, r1
 404:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>
 408:	08 95       	ret

0000040a <__fixunssfsi>:
 40a:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_splitA>
 40e:	88 f0       	brcs	.+34     	; 0x432 <__fixunssfsi+0x28>
 410:	9f 57       	subi	r25, 0x7F	; 127
 412:	98 f0       	brcs	.+38     	; 0x43a <__fixunssfsi+0x30>
 414:	b9 2f       	mov	r27, r25
 416:	99 27       	eor	r25, r25
 418:	b7 51       	subi	r27, 0x17	; 23
 41a:	b0 f0       	brcs	.+44     	; 0x448 <__fixunssfsi+0x3e>
 41c:	e1 f0       	breq	.+56     	; 0x456 <__fixunssfsi+0x4c>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	1a f0       	brmi	.+6      	; 0x42e <__fixunssfsi+0x24>
 428:	ba 95       	dec	r27
 42a:	c9 f7       	brne	.-14     	; 0x41e <__fixunssfsi+0x14>
 42c:	14 c0       	rjmp	.+40     	; 0x456 <__fixunssfsi+0x4c>
 42e:	b1 30       	cpi	r27, 0x01	; 1
 430:	91 f0       	breq	.+36     	; 0x456 <__fixunssfsi+0x4c>
 432:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_zero>
 436:	b1 e0       	ldi	r27, 0x01	; 1
 438:	08 95       	ret
 43a:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_zero>
 43e:	67 2f       	mov	r22, r23
 440:	78 2f       	mov	r23, r24
 442:	88 27       	eor	r24, r24
 444:	b8 5f       	subi	r27, 0xF8	; 248
 446:	39 f0       	breq	.+14     	; 0x456 <__fixunssfsi+0x4c>
 448:	b9 3f       	cpi	r27, 0xF9	; 249
 44a:	cc f3       	brlt	.-14     	; 0x43e <__fixunssfsi+0x34>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b3 95       	inc	r27
 454:	d9 f7       	brne	.-10     	; 0x44c <__fixunssfsi+0x42>
 456:	3e f4       	brtc	.+14     	; 0x466 <__fixunssfsi+0x5c>
 458:	90 95       	com	r25
 45a:	80 95       	com	r24
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	08 95       	ret

00000468 <__floatunsisf>:
 468:	e8 94       	clt
 46a:	09 c0       	rjmp	.+18     	; 0x47e <__floatsisf+0x12>

0000046c <__floatsisf>:
 46c:	97 fb       	bst	r25, 7
 46e:	3e f4       	brtc	.+14     	; 0x47e <__floatsisf+0x12>
 470:	90 95       	com	r25
 472:	80 95       	com	r24
 474:	70 95       	com	r23
 476:	61 95       	neg	r22
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	99 23       	and	r25, r25
 480:	a9 f0       	breq	.+42     	; 0x4ac <__floatsisf+0x40>
 482:	f9 2f       	mov	r31, r25
 484:	96 e9       	ldi	r25, 0x96	; 150
 486:	bb 27       	eor	r27, r27
 488:	93 95       	inc	r25
 48a:	f6 95       	lsr	r31
 48c:	87 95       	ror	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f1 11       	cpse	r31, r1
 496:	f8 cf       	rjmp	.-16     	; 0x488 <__floatsisf+0x1c>
 498:	fa f4       	brpl	.+62     	; 0x4d8 <__floatsisf+0x6c>
 49a:	bb 0f       	add	r27, r27
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__floatsisf+0x36>
 49e:	60 ff       	sbrs	r22, 0
 4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__floatsisf+0x6c>
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	16 c0       	rjmp	.+44     	; 0x4d8 <__floatsisf+0x6c>
 4ac:	88 23       	and	r24, r24
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <__floatsisf+0x48>
 4b0:	96 e9       	ldi	r25, 0x96	; 150
 4b2:	11 c0       	rjmp	.+34     	; 0x4d6 <__floatsisf+0x6a>
 4b4:	77 23       	and	r23, r23
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <__floatsisf+0x54>
 4b8:	9e e8       	ldi	r25, 0x8E	; 142
 4ba:	87 2f       	mov	r24, r23
 4bc:	76 2f       	mov	r23, r22
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <__floatsisf+0x5e>
 4c0:	66 23       	and	r22, r22
 4c2:	71 f0       	breq	.+28     	; 0x4e0 <__floatsisf+0x74>
 4c4:	96 e8       	ldi	r25, 0x86	; 134
 4c6:	86 2f       	mov	r24, r22
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	2a f0       	brmi	.+10     	; 0x4d8 <__floatsisf+0x6c>
 4ce:	9a 95       	dec	r25
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	da f7       	brpl	.-10     	; 0x4ce <__floatsisf+0x62>
 4d8:	88 0f       	add	r24, r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	97 f9       	bld	r25, 7
 4e0:	08 95       	ret

000004e2 <__fp_inf>:
 4e2:	97 f9       	bld	r25, 7
 4e4:	9f 67       	ori	r25, 0x7F	; 127
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	08 95       	ret

000004ee <__fp_nan>:
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	08 95       	ret

000004f4 <__fp_pscA>:
 4f4:	00 24       	eor	r0, r0
 4f6:	0a 94       	dec	r0
 4f8:	16 16       	cp	r1, r22
 4fa:	17 06       	cpc	r1, r23
 4fc:	18 06       	cpc	r1, r24
 4fe:	09 06       	cpc	r0, r25
 500:	08 95       	ret

00000502 <__fp_pscB>:
 502:	00 24       	eor	r0, r0
 504:	0a 94       	dec	r0
 506:	12 16       	cp	r1, r18
 508:	13 06       	cpc	r1, r19
 50a:	14 06       	cpc	r1, r20
 50c:	05 06       	cpc	r0, r21
 50e:	08 95       	ret

00000510 <__fp_round>:
 510:	09 2e       	mov	r0, r25
 512:	03 94       	inc	r0
 514:	00 0c       	add	r0, r0
 516:	11 f4       	brne	.+4      	; 0x51c <__fp_round+0xc>
 518:	88 23       	and	r24, r24
 51a:	52 f0       	brmi	.+20     	; 0x530 <__fp_round+0x20>
 51c:	bb 0f       	add	r27, r27
 51e:	40 f4       	brcc	.+16     	; 0x530 <__fp_round+0x20>
 520:	bf 2b       	or	r27, r31
 522:	11 f4       	brne	.+4      	; 0x528 <__fp_round+0x18>
 524:	60 ff       	sbrs	r22, 0
 526:	04 c0       	rjmp	.+8      	; 0x530 <__fp_round+0x20>
 528:	6f 5f       	subi	r22, 0xFF	; 255
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	08 95       	ret

00000532 <__fp_split3>:
 532:	57 fd       	sbrc	r21, 7
 534:	90 58       	subi	r25, 0x80	; 128
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	59 f0       	breq	.+22     	; 0x552 <__fp_splitA+0x10>
 53c:	5f 3f       	cpi	r21, 0xFF	; 255
 53e:	71 f0       	breq	.+28     	; 0x55c <__fp_splitA+0x1a>
 540:	47 95       	ror	r20

00000542 <__fp_splitA>:
 542:	88 0f       	add	r24, r24
 544:	97 fb       	bst	r25, 7
 546:	99 1f       	adc	r25, r25
 548:	61 f0       	breq	.+24     	; 0x562 <__fp_splitA+0x20>
 54a:	9f 3f       	cpi	r25, 0xFF	; 255
 54c:	79 f0       	breq	.+30     	; 0x56c <__fp_splitA+0x2a>
 54e:	87 95       	ror	r24
 550:	08 95       	ret
 552:	12 16       	cp	r1, r18
 554:	13 06       	cpc	r1, r19
 556:	14 06       	cpc	r1, r20
 558:	55 1f       	adc	r21, r21
 55a:	f2 cf       	rjmp	.-28     	; 0x540 <__fp_split3+0xe>
 55c:	46 95       	lsr	r20
 55e:	f1 df       	rcall	.-30     	; 0x542 <__fp_splitA>
 560:	08 c0       	rjmp	.+16     	; 0x572 <__fp_splitA+0x30>
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	99 1f       	adc	r25, r25
 56a:	f1 cf       	rjmp	.-30     	; 0x54e <__fp_splitA+0xc>
 56c:	86 95       	lsr	r24
 56e:	71 05       	cpc	r23, r1
 570:	61 05       	cpc	r22, r1
 572:	08 94       	sec
 574:	08 95       	ret

00000576 <__fp_zero>:
 576:	e8 94       	clt

00000578 <__fp_szero>:
 578:	bb 27       	eor	r27, r27
 57a:	66 27       	eor	r22, r22
 57c:	77 27       	eor	r23, r23
 57e:	cb 01       	movw	r24, r22
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__mulsf3>:
 584:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__mulsf3x>
 588:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_round>
 58c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_pscA>
 590:	38 f0       	brcs	.+14     	; 0x5a0 <__mulsf3+0x1c>
 592:	0e 94 81 02 	call	0x502	; 0x502 <__fp_pscB>
 596:	20 f0       	brcs	.+8      	; 0x5a0 <__mulsf3+0x1c>
 598:	95 23       	and	r25, r21
 59a:	11 f0       	breq	.+4      	; 0x5a0 <__mulsf3+0x1c>
 59c:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_inf>
 5a0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_nan>
 5a4:	11 24       	eor	r1, r1
 5a6:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>

000005aa <__mulsf3x>:
 5aa:	0e 94 99 02 	call	0x532	; 0x532 <__fp_split3>
 5ae:	70 f3       	brcs	.-36     	; 0x58c <__mulsf3+0x8>

000005b0 <__mulsf3_pse>:
 5b0:	95 9f       	mul	r25, r21
 5b2:	c1 f3       	breq	.-16     	; 0x5a4 <__mulsf3+0x20>
 5b4:	95 0f       	add	r25, r21
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	55 1f       	adc	r21, r21
 5ba:	62 9f       	mul	r22, r18
 5bc:	f0 01       	movw	r30, r0
 5be:	72 9f       	mul	r23, r18
 5c0:	bb 27       	eor	r27, r27
 5c2:	f0 0d       	add	r31, r0
 5c4:	b1 1d       	adc	r27, r1
 5c6:	63 9f       	mul	r22, r19
 5c8:	aa 27       	eor	r26, r26
 5ca:	f0 0d       	add	r31, r0
 5cc:	b1 1d       	adc	r27, r1
 5ce:	aa 1f       	adc	r26, r26
 5d0:	64 9f       	mul	r22, r20
 5d2:	66 27       	eor	r22, r22
 5d4:	b0 0d       	add	r27, r0
 5d6:	a1 1d       	adc	r26, r1
 5d8:	66 1f       	adc	r22, r22
 5da:	82 9f       	mul	r24, r18
 5dc:	22 27       	eor	r18, r18
 5de:	b0 0d       	add	r27, r0
 5e0:	a1 1d       	adc	r26, r1
 5e2:	62 1f       	adc	r22, r18
 5e4:	73 9f       	mul	r23, r19
 5e6:	b0 0d       	add	r27, r0
 5e8:	a1 1d       	adc	r26, r1
 5ea:	62 1f       	adc	r22, r18
 5ec:	83 9f       	mul	r24, r19
 5ee:	a0 0d       	add	r26, r0
 5f0:	61 1d       	adc	r22, r1
 5f2:	22 1f       	adc	r18, r18
 5f4:	74 9f       	mul	r23, r20
 5f6:	33 27       	eor	r19, r19
 5f8:	a0 0d       	add	r26, r0
 5fa:	61 1d       	adc	r22, r1
 5fc:	23 1f       	adc	r18, r19
 5fe:	84 9f       	mul	r24, r20
 600:	60 0d       	add	r22, r0
 602:	21 1d       	adc	r18, r1
 604:	82 2f       	mov	r24, r18
 606:	76 2f       	mov	r23, r22
 608:	6a 2f       	mov	r22, r26
 60a:	11 24       	eor	r1, r1
 60c:	9f 57       	subi	r25, 0x7F	; 127
 60e:	50 40       	sbci	r21, 0x00	; 0
 610:	9a f0       	brmi	.+38     	; 0x638 <__mulsf3_pse+0x88>
 612:	f1 f0       	breq	.+60     	; 0x650 <__mulsf3_pse+0xa0>
 614:	88 23       	and	r24, r24
 616:	4a f0       	brmi	.+18     	; 0x62a <__mulsf3_pse+0x7a>
 618:	ee 0f       	add	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	bb 1f       	adc	r27, r27
 61e:	66 1f       	adc	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	91 50       	subi	r25, 0x01	; 1
 626:	50 40       	sbci	r21, 0x00	; 0
 628:	a9 f7       	brne	.-22     	; 0x614 <__mulsf3_pse+0x64>
 62a:	9e 3f       	cpi	r25, 0xFE	; 254
 62c:	51 05       	cpc	r21, r1
 62e:	80 f0       	brcs	.+32     	; 0x650 <__mulsf3_pse+0xa0>
 630:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_inf>
 634:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>
 638:	5f 3f       	cpi	r21, 0xFF	; 255
 63a:	e4 f3       	brlt	.-8      	; 0x634 <__mulsf3_pse+0x84>
 63c:	98 3e       	cpi	r25, 0xE8	; 232
 63e:	d4 f3       	brlt	.-12     	; 0x634 <__mulsf3_pse+0x84>
 640:	86 95       	lsr	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b7 95       	ror	r27
 648:	f7 95       	ror	r31
 64a:	e7 95       	ror	r30
 64c:	9f 5f       	subi	r25, 0xFF	; 255
 64e:	c1 f7       	brne	.-16     	; 0x640 <__mulsf3_pse+0x90>
 650:	fe 2b       	or	r31, r30
 652:	88 0f       	add	r24, r24
 654:	91 1d       	adc	r25, r1
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
