
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007c8  0000085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  0000086a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f6  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cf  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a9  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  9e:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWritePortD>:
		portC_value &= ~(1<<pin);
	}
	PORTC = portC_value;
}
void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  a6:	66 23       	and	r22, r22
  a8:	79 f0       	breq	.+30     	; 0xc8 <digitalWritePortD+0x22>
		portD_value |= (1<<pin);
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	a9 01       	movw	r20, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWritePortD+0x10>
  b2:	44 0f       	add	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	8a 95       	dec	r24
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWritePortD+0xc>
  ba:	ca 01       	movw	r24, r20
  bc:	90 91 0e 01 	lds	r25, 0x010E
  c0:	89 2b       	or	r24, r25
  c2:	80 93 0e 01 	sts	0x010E, r24
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <digitalWritePortD+0x40>
	}
	else {
		portD_value &= ~(1<<pin);
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <digitalWritePortD+0x2e>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	8a 95       	dec	r24
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <digitalWritePortD+0x2a>
  d8:	ca 01       	movw	r24, r20
  da:	80 95       	com	r24
  dc:	90 91 0e 01 	lds	r25, 0x010E
  e0:	89 23       	and	r24, r25
  e2:	80 93 0e 01 	sts	0x010E, r24
	}
	PORTD = portD_value;
  e6:	80 91 0e 01 	lds	r24, 0x010E
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	08 95       	ret

000000ee <playFlute>:
	return step_current;
}

void playFlute(int playSound)
{
	if (playSound == HIGH) { //Tells the motor to up and snuff sound
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	59 f4       	brne	.+22     	; 0x10a <playFlute+0x1c>
		digitalWritePortD(mot_Pin_Right, LOW);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Left, HIGH);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 91 01 01 	lds	r24, 0x0101
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 108:	08 95       	ret
	}
	else if (playSound == LOW) {
 10a:	89 2b       	or	r24, r25
 10c:	51 f4       	brne	.+20     	; 0x122 <playFlute+0x34>
		digitalWritePortD(mot_Pin_Left, LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	80 91 01 01 	lds	r24, 0x0101
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		digitalWritePortD(mot_Pin_Right, HIGH);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
 122:	08 95       	ret

00000124 <delay_ms>:
	}
	PORTD = portD_value;
}

void delay_ms(uint16_t count) {
	while(count--) {
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	41 f0       	breq	.+16     	; 0x138 <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <delay_ms+0x8>
 130:	00 c0       	rjmp	.+0      	; 0x132 <delay_ms+0xe>
 132:	00 00       	nop
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	c1 f7       	brne	.-16     	; 0x128 <delay_ms+0x4>
 138:	08 95       	ret

0000013a <delay_us>:
		_delay_ms(1);
	}
}

void delay_us(uint16_t count) {
	while(count--) {
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	31 f0       	breq	.+12     	; 0x14a <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	25 e0       	ldi	r18, 0x05	; 5
 140:	2a 95       	dec	r18
 142:	f1 f7       	brne	.-4      	; 0x140 <delay_us+0x6>
 144:	00 00       	nop
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	d1 f7       	brne	.-12     	; 0x13e <delay_us+0x4>
 14a:	08 95       	ret

0000014c <updateStepper>:

}
}*/

int updateStepper(int step_desired)
{
 14c:	8f 92       	push	r8
 14e:	9f 92       	push	r9
 150:	af 92       	push	r10
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	8c 01       	movw	r16, r24
	int step_start = step_current;
	int accel_distance = 0;
	int accel_sign = 0; //initially the acceleration is neither forward nor backward
	int distance_from_start = 0;
	int velocity_sign = 0;
	int current_velocity = start_velocity;
 166:	c0 91 04 01 	lds	r28, 0x0104
 16a:	d0 91 05 01 	lds	r29, 0x0105
	int steps_to_max_velocity = 0;
	
	//Gives velocity and acceleration signs
	if (step_desired > step_current) {
 16e:	80 91 0f 01 	lds	r24, 0x010F
 172:	90 91 10 01 	lds	r25, 0x0110
 176:	80 17       	cp	r24, r16
 178:	91 07       	cpc	r25, r17
 17a:	0c f4       	brge	.+2      	; 0x17e <updateStepper+0x32>
 17c:	9b c0       	rjmp	.+310    	; 0x2b4 <updateStepper+0x168>
		accel_sign = 1;
		velocity_sign = 1;
	}
	else if (step_desired < step_current) {
 17e:	08 17       	cp	r16, r24
 180:	19 07       	cpc	r17, r25
 182:	0c f4       	brge	.+2      	; 0x186 <updateStepper+0x3a>
 184:	8e c0       	rjmp	.+284    	; 0x2a2 <updateStepper+0x156>
 186:	9f c0       	rjmp	.+318    	; 0x2c6 <updateStepper+0x17a>
		if (current_velocity < max_velocity) {
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
			steps_to_max_velocity++;
 188:	75 01       	movw	r14, r10
 18a:	c1 2c       	mov	r12, r1
 18c:	d1 2c       	mov	r13, r1
 18e:	8a 2c       	mov	r8, r10
 190:	9b 2c       	mov	r9, r11
 192:	7e c0       	rjmp	.+252    	; 0x290 <updateStepper+0x144>
	
	while (step_current != step_desired)
	{
		if (adder_var != 0) //If the motor is not at the desired step, write step pin high then low for a single pulse
		{
			digitalWritePortD(step_pin, HIGH);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 91 03 01 	lds	r24, 0x0103
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
			digitalWritePortD(step_pin, LOW);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 91 03 01 	lds	r24, 0x0103
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		}
		
		// increment current position
		step_current += adder_var;
 1a8:	80 91 0f 01 	lds	r24, 0x010F
 1ac:	90 91 10 01 	lds	r25, 0x0110
 1b0:	8a 0d       	add	r24, r10
 1b2:	9b 1d       	adc	r25, r11
 1b4:	90 93 10 01 	sts	0x0110, r25
 1b8:	80 93 0f 01 	sts	0x010F, r24
		delay_us(current_velocity);
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 9d 00 	call	0x13a	; 0x13a <delay_us>
		
		if (velocity_sign == accel_sign) {
 1c2:	ea 14       	cp	r14, r10
 1c4:	fb 04       	cpc	r15, r11
 1c6:	01 f5       	brne	.+64     	; 0x208 <updateStepper+0xbc>
			current_velocity = current_velocity / accel_multiplier;
 1c8:	be 01       	movw	r22, r28
 1ca:	dd 0f       	add	r29, r29
 1cc:	88 0b       	sbc	r24, r24
 1ce:	99 0b       	sbc	r25, r25
 1d0:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__floatsisf>
 1d4:	20 91 0a 01 	lds	r18, 0x010A
 1d8:	30 91 0b 01 	lds	r19, 0x010B
 1dc:	40 91 0c 01 	lds	r20, 0x010C
 1e0:	50 91 0d 01 	lds	r21, 0x010D
 1e4:	0e 94 3f 02 	call	0x47e	; 0x47e <__divsf3>
 1e8:	0e 94 b1 02 	call	0x562	; 0x562 <__fixsfsi>
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
		}
		
		if (current_velocity < max_velocity) {
 1ec:	20 91 08 01 	lds	r18, 0x0108
 1f0:	30 91 09 01 	lds	r19, 0x0109
 1f4:	eb 01       	movw	r28, r22
 1f6:	62 17       	cp	r22, r18
 1f8:	73 07       	cpc	r23, r19
 1fa:	0c f4       	brge	.+2      	; 0x1fe <updateStepper+0xb2>
 1fc:	e9 01       	movw	r28, r18
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 1fe:	c2 17       	cp	r28, r18
 200:	d3 07       	cpc	r29, r19
 202:	f1 f4       	brne	.+60     	; 0x240 <updateStepper+0xf4>
 204:	e9 01       	movw	r28, r18
 206:	31 c0       	rjmp	.+98     	; 0x26a <updateStepper+0x11e>
		
		if (velocity_sign == accel_sign) {
			current_velocity = current_velocity / accel_multiplier;
		}
		else {
			current_velocity = current_velocity * accel_multiplier;
 208:	be 01       	movw	r22, r28
 20a:	dd 0f       	add	r29, r29
 20c:	88 0b       	sbc	r24, r24
 20e:	99 0b       	sbc	r25, r25
 210:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__floatsisf>
 214:	20 91 0a 01 	lds	r18, 0x010A
 218:	30 91 0b 01 	lds	r19, 0x010B
 21c:	40 91 0c 01 	lds	r20, 0x010C
 220:	50 91 0d 01 	lds	r21, 0x010D
 224:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 228:	0e 94 b1 02 	call	0x562	; 0x562 <__fixsfsi>
		}
		
		if (current_velocity < max_velocity) {
 22c:	20 91 08 01 	lds	r18, 0x0108
 230:	30 91 09 01 	lds	r19, 0x0109
 234:	eb 01       	movw	r28, r22
 236:	62 17       	cp	r22, r18
 238:	73 07       	cpc	r23, r19
 23a:	bc f4       	brge	.+46     	; 0x26a <updateStepper+0x11e>
 23c:	e9 01       	movw	r28, r18
 23e:	15 c0       	rjmp	.+42     	; 0x26a <updateStepper+0x11e>
			current_velocity = max_velocity;
		}
		
		if ((current_velocity != max_velocity) && (accel_sign == velocity_sign) && (steps_to_max_velocity < abs(step_current - step_desired))) {
 240:	80 91 0f 01 	lds	r24, 0x010F
 244:	90 91 10 01 	lds	r25, 0x0110
 248:	80 1b       	sub	r24, r16
 24a:	91 0b       	sbc	r25, r17
 24c:	9c 01       	movw	r18, r24
 24e:	22 f4       	brpl	.+8      	; 0x258 <updateStepper+0x10c>
 250:	22 27       	eor	r18, r18
 252:	33 27       	eor	r19, r19
 254:	28 1b       	sub	r18, r24
 256:	39 0b       	sbc	r19, r25
 258:	c2 16       	cp	r12, r18
 25a:	d3 06       	cpc	r13, r19
 25c:	34 f4       	brge	.+12     	; 0x26a <updateStepper+0x11e>
			steps_to_max_velocity++;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	c8 1a       	sub	r12, r24
 262:	d8 0a       	sbc	r13, r24
 264:	e8 2c       	mov	r14, r8
 266:	f9 2c       	mov	r15, r9
 268:	13 c0       	rjmp	.+38     	; 0x290 <updateStepper+0x144>
		}
		else if (steps_to_max_velocity > abs(step_current - step_desired)){
 26a:	20 91 0f 01 	lds	r18, 0x010F
 26e:	30 91 10 01 	lds	r19, 0x0110
 272:	20 1b       	sub	r18, r16
 274:	31 0b       	sbc	r19, r17
 276:	c9 01       	movw	r24, r18
 278:	99 23       	and	r25, r25
 27a:	24 f4       	brge	.+8      	; 0x284 <updateStepper+0x138>
 27c:	88 27       	eor	r24, r24
 27e:	99 27       	eor	r25, r25
 280:	82 1b       	sub	r24, r18
 282:	93 0b       	sbc	r25, r19
 284:	8c 15       	cp	r24, r12
 286:	9d 05       	cpc	r25, r13
 288:	1c f4       	brge	.+6      	; 0x290 <updateStepper+0x144>
			accel_sign = -accel_sign;
 28a:	f1 94       	neg	r15
 28c:	e1 94       	neg	r14
 28e:	f1 08       	sbc	r15, r1
	{
		digitalWritePortD(direction_pin, LOW);
		adder_var = -1;
	}
	
	while (step_current != step_desired)
 290:	80 91 0f 01 	lds	r24, 0x010F
 294:	90 91 10 01 	lds	r25, 0x0110
 298:	80 17       	cp	r24, r16
 29a:	91 07       	cpc	r25, r17
 29c:	09 f0       	breq	.+2      	; 0x2a0 <updateStepper+0x154>
 29e:	7a cf       	rjmp	.-268    	; 0x194 <updateStepper+0x48>
 2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <updateStepper+0x17a>
		digitalWritePortD(direction_pin, HIGH);
		adder_var = 1;
	}
	else if (step_desired < step_current)
	{
		digitalWritePortD(direction_pin, LOW);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	80 91 02 01 	lds	r24, 0x0102
 2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = -1;
 2ac:	aa 24       	eor	r10, r10
 2ae:	aa 94       	dec	r10
 2b0:	ba 2c       	mov	r11, r10
 2b2:	6a cf       	rjmp	.-300    	; 0x188 <updateStepper+0x3c>
	}
	
	int adder_var = 0;
	if (step_desired > step_current)
	{
		digitalWritePortD(direction_pin, HIGH);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	80 91 02 01 	lds	r24, 0x0102
 2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWritePortD>
		adder_var = 1;
 2be:	aa 24       	eor	r10, r10
 2c0:	a3 94       	inc	r10
 2c2:	b1 2c       	mov	r11, r1
 2c4:	61 cf       	rjmp	.-318    	; 0x188 <updateStepper+0x3c>
			accel_sign = -accel_sign;
		}

	}
	return step_current;
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	08 95       	ret

000002e0 <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b11001100; // Sets pins of Port D according to circuit
 2e0:	8c ec       	ldi	r24, 0xCC	; 204
 2e2:	8a b9       	out	0x0a, r24	; 10
	//Stepper Pins: sets PD2 = step pin and PD3 = direction pins
	//Motor Pins: sets PD6 = left pin and PD7 = right pin for the H bridge
	PORTD = 0b00000000; //Sets Port D to match the initial of all zeros
 2e4:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b00000010; // Sets PB1 as output, sets the rest as input
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 2ea:	e0 e8       	ldi	r30, 0x80	; 128
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 6a       	ori	r24, 0xA2	; 162
 2f2:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
 2f4:	e1 e8       	ldi	r30, 0x81	; 129
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8c 61       	ori	r24, 0x1C	; 28
 2fc:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 2fe:	87 e8       	ldi	r24, 0x87	; 135
 300:	93 e1       	ldi	r25, 0x13	; 19
 302:	90 93 87 00 	sts	0x0087, r25
 306:	80 93 86 00 	sts	0x0086, r24
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 30a:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 30c:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 310:	87 e8       	ldi	r24, 0x87	; 135
 312:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 316:	80 e6       	ldi	r24, 0x60	; 96
 318:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)
	
	playFlute(HIGH);  //Starts the flute out as closed
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		//delay_ms(3000);
		//updateStepper(4000);
		//updateStepper(noteLookup('F'));
		
		
		updateStepper(noteLookup('G'));
 324:	8e e4       	ldi	r24, 0x4E	; 78
 326:	9b e1       	ldi	r25, 0x1B	; 27
 328:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(250);
 334:	8a ef       	ldi	r24, 0xFA	; 250
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('A'));
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	9d e1       	ldi	r25, 0x1D	; 29
 348:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(250);
 354:	8a ef       	ldi	r24, 0xFA	; 250
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('a'));
 364:	8b ef       	ldi	r24, 0xFB	; 251
 366:	9d e1       	ldi	r25, 0x1D	; 29
 368:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 374:	84 ef       	ldi	r24, 0xF4	; 244
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(50);
 384:	82 e3       	ldi	r24, 0x32	; 50
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		
		updateStepper(noteLookup('a'));
 38c:	8b ef       	ldi	r24, 0xFB	; 251
 38e:	9d e1       	ldi	r25, 0x1D	; 29
 390:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 39c:	84 ef       	ldi	r24, 0xF4	; 244
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('F'));
 3ac:	80 e1       	ldi	r24, 0x10	; 16
 3ae:	92 e2       	ldi	r25, 0x22	; 34
 3b0:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 3bc:	84 ef       	ldi	r24, 0xF4	; 244
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('d'));
 3cc:	8d e7       	ldi	r24, 0x7D	; 125
 3ce:	90 e2       	ldi	r25, 0x20	; 32
 3d0:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 3dc:	84 ef       	ldi	r24, 0xF4	; 244
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('w'));
 3ec:	8b ef       	ldi	r24, 0xFB	; 251
 3ee:	9d e1       	ldi	r25, 0x1D	; 29
 3f0:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 3fc:	84 ef       	ldi	r24, 0xF4	; 244
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('D'));
 40c:	8d e7       	ldi	r24, 0x7D	; 125
 40e:	90 e2       	ldi	r25, 0x20	; 32
 410:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(250);
 41c:	8a ef       	ldi	r24, 0xFA	; 250
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		updateStepper(noteLookup('D'));
 42c:	8d e7       	ldi	r24, 0x7D	; 125
 42e:	90 e2       	ldi	r25, 0x20	; 32
 430:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(250);
 43c:	8a ef       	ldi	r24, 0xFA	; 250
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(50);
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		
		updateStepper(noteLookup('D'));
 454:	8d e7       	ldi	r24, 0x7D	; 125
 456:	90 e2       	ldi	r25, 0x20	; 32
 458:	0e 94 a6 00 	call	0x14c	; 0x14c <updateStepper>
		playFlute(LOW);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		delay_ms(500);
 464:	84 ef       	ldi	r24, 0xF4	; 244
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		playFlute(HIGH);
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 77 00 	call	0xee	; 0xee <playFlute>
		
		delay_ms(3000);
 474:	88 eb       	ldi	r24, 0xB8	; 184
 476:	9b e0       	ldi	r25, 0x0B	; 11
 478:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	}
 47c:	53 cf       	rjmp	.-346    	; 0x324 <main+0x44>

0000047e <__divsf3>:
 47e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__divsf3x>
 482:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_round>
 486:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscB>
 48a:	58 f0       	brcs	.+22     	; 0x4a2 <__divsf3+0x24>
 48c:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_pscA>
 490:	40 f0       	brcs	.+16     	; 0x4a2 <__divsf3+0x24>
 492:	29 f4       	brne	.+10     	; 0x49e <__divsf3+0x20>
 494:	5f 3f       	cpi	r21, 0xFF	; 255
 496:	29 f0       	breq	.+10     	; 0x4a2 <__divsf3+0x24>
 498:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 49c:	51 11       	cpse	r21, r1
 49e:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 4a2:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_nan>

000004a6 <__divsf3x>:
 4a6:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_split3>
 4aa:	68 f3       	brcs	.-38     	; 0x486 <__divsf3+0x8>

000004ac <__divsf3_pse>:
 4ac:	99 23       	and	r25, r25
 4ae:	b1 f3       	breq	.-20     	; 0x49c <__divsf3+0x1e>
 4b0:	55 23       	and	r21, r21
 4b2:	91 f3       	breq	.-28     	; 0x498 <__divsf3+0x1a>
 4b4:	95 1b       	sub	r25, r21
 4b6:	55 0b       	sbc	r21, r21
 4b8:	bb 27       	eor	r27, r27
 4ba:	aa 27       	eor	r26, r26
 4bc:	62 17       	cp	r22, r18
 4be:	73 07       	cpc	r23, r19
 4c0:	84 07       	cpc	r24, r20
 4c2:	38 f0       	brcs	.+14     	; 0x4d2 <__divsf3_pse+0x26>
 4c4:	9f 5f       	subi	r25, 0xFF	; 255
 4c6:	5f 4f       	sbci	r21, 0xFF	; 255
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	44 1f       	adc	r20, r20
 4ce:	aa 1f       	adc	r26, r26
 4d0:	a9 f3       	breq	.-22     	; 0x4bc <__divsf3_pse+0x10>
 4d2:	35 d0       	rcall	.+106    	; 0x53e <__divsf3_pse+0x92>
 4d4:	0e 2e       	mov	r0, r30
 4d6:	3a f0       	brmi	.+14     	; 0x4e6 <__divsf3_pse+0x3a>
 4d8:	e0 e8       	ldi	r30, 0x80	; 128
 4da:	32 d0       	rcall	.+100    	; 0x540 <__divsf3_pse+0x94>
 4dc:	91 50       	subi	r25, 0x01	; 1
 4de:	50 40       	sbci	r21, 0x00	; 0
 4e0:	e6 95       	lsr	r30
 4e2:	00 1c       	adc	r0, r0
 4e4:	ca f7       	brpl	.-14     	; 0x4d8 <__divsf3_pse+0x2c>
 4e6:	2b d0       	rcall	.+86     	; 0x53e <__divsf3_pse+0x92>
 4e8:	fe 2f       	mov	r31, r30
 4ea:	29 d0       	rcall	.+82     	; 0x53e <__divsf3_pse+0x92>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	bb 1f       	adc	r27, r27
 4f4:	26 17       	cp	r18, r22
 4f6:	37 07       	cpc	r19, r23
 4f8:	48 07       	cpc	r20, r24
 4fa:	ab 07       	cpc	r26, r27
 4fc:	b0 e8       	ldi	r27, 0x80	; 128
 4fe:	09 f0       	breq	.+2      	; 0x502 <__divsf3_pse+0x56>
 500:	bb 0b       	sbc	r27, r27
 502:	80 2d       	mov	r24, r0
 504:	bf 01       	movw	r22, r30
 506:	ff 27       	eor	r31, r31
 508:	93 58       	subi	r25, 0x83	; 131
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	3a f0       	brmi	.+14     	; 0x51c <__divsf3_pse+0x70>
 50e:	9e 3f       	cpi	r25, 0xFE	; 254
 510:	51 05       	cpc	r21, r1
 512:	78 f0       	brcs	.+30     	; 0x532 <__divsf3_pse+0x86>
 514:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 518:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 51c:	5f 3f       	cpi	r21, 0xFF	; 255
 51e:	e4 f3       	brlt	.-8      	; 0x518 <__divsf3_pse+0x6c>
 520:	98 3e       	cpi	r25, 0xE8	; 232
 522:	d4 f3       	brlt	.-12     	; 0x518 <__divsf3_pse+0x6c>
 524:	86 95       	lsr	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b7 95       	ror	r27
 52c:	f7 95       	ror	r31
 52e:	9f 5f       	subi	r25, 0xFF	; 255
 530:	c9 f7       	brne	.-14     	; 0x524 <__divsf3_pse+0x78>
 532:	88 0f       	add	r24, r24
 534:	91 1d       	adc	r25, r1
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret
 53e:	e1 e0       	ldi	r30, 0x01	; 1
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	bb 1f       	adc	r27, r27
 548:	62 17       	cp	r22, r18
 54a:	73 07       	cpc	r23, r19
 54c:	84 07       	cpc	r24, r20
 54e:	ba 07       	cpc	r27, r26
 550:	20 f0       	brcs	.+8      	; 0x55a <__divsf3_pse+0xae>
 552:	62 1b       	sub	r22, r18
 554:	73 0b       	sbc	r23, r19
 556:	84 0b       	sbc	r24, r20
 558:	ba 0b       	sbc	r27, r26
 55a:	ee 1f       	adc	r30, r30
 55c:	88 f7       	brcc	.-30     	; 0x540 <__divsf3_pse+0x94>
 55e:	e0 95       	com	r30
 560:	08 95       	ret

00000562 <__fixsfsi>:
 562:	0e 94 b8 02 	call	0x570	; 0x570 <__fixunssfsi>
 566:	68 94       	set
 568:	b1 11       	cpse	r27, r1
 56a:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 56e:	08 95       	ret

00000570 <__fixunssfsi>:
 570:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_splitA>
 574:	88 f0       	brcs	.+34     	; 0x598 <__fixunssfsi+0x28>
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fixunssfsi+0x30>
 57a:	b9 2f       	mov	r27, r25
 57c:	99 27       	eor	r25, r25
 57e:	b7 51       	subi	r27, 0x17	; 23
 580:	b0 f0       	brcs	.+44     	; 0x5ae <__fixunssfsi+0x3e>
 582:	e1 f0       	breq	.+56     	; 0x5bc <__fixunssfsi+0x4c>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	1a f0       	brmi	.+6      	; 0x594 <__fixunssfsi+0x24>
 58e:	ba 95       	dec	r27
 590:	c9 f7       	brne	.-14     	; 0x584 <__fixunssfsi+0x14>
 592:	14 c0       	rjmp	.+40     	; 0x5bc <__fixunssfsi+0x4c>
 594:	b1 30       	cpi	r27, 0x01	; 1
 596:	91 f0       	breq	.+36     	; 0x5bc <__fixunssfsi+0x4c>
 598:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_zero>
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	08 95       	ret
 5a0:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_zero>
 5a4:	67 2f       	mov	r22, r23
 5a6:	78 2f       	mov	r23, r24
 5a8:	88 27       	eor	r24, r24
 5aa:	b8 5f       	subi	r27, 0xF8	; 248
 5ac:	39 f0       	breq	.+14     	; 0x5bc <__fixunssfsi+0x4c>
 5ae:	b9 3f       	cpi	r27, 0xF9	; 249
 5b0:	cc f3       	brlt	.-14     	; 0x5a4 <__fixunssfsi+0x34>
 5b2:	86 95       	lsr	r24
 5b4:	77 95       	ror	r23
 5b6:	67 95       	ror	r22
 5b8:	b3 95       	inc	r27
 5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__fixunssfsi+0x42>
 5bc:	3e f4       	brtc	.+14     	; 0x5cc <__fixunssfsi+0x5c>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__floatunsisf>:
 5ce:	e8 94       	clt
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__floatsisf+0x12>

000005d2 <__floatsisf>:
 5d2:	97 fb       	bst	r25, 7
 5d4:	3e f4       	brtc	.+14     	; 0x5e4 <__floatsisf+0x12>
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	99 23       	and	r25, r25
 5e6:	a9 f0       	breq	.+42     	; 0x612 <__floatsisf+0x40>
 5e8:	f9 2f       	mov	r31, r25
 5ea:	96 e9       	ldi	r25, 0x96	; 150
 5ec:	bb 27       	eor	r27, r27
 5ee:	93 95       	inc	r25
 5f0:	f6 95       	lsr	r31
 5f2:	87 95       	ror	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f1 11       	cpse	r31, r1
 5fc:	f8 cf       	rjmp	.-16     	; 0x5ee <__floatsisf+0x1c>
 5fe:	fa f4       	brpl	.+62     	; 0x63e <__floatsisf+0x6c>
 600:	bb 0f       	add	r27, r27
 602:	11 f4       	brne	.+4      	; 0x608 <__floatsisf+0x36>
 604:	60 ff       	sbrs	r22, 0
 606:	1b c0       	rjmp	.+54     	; 0x63e <__floatsisf+0x6c>
 608:	6f 5f       	subi	r22, 0xFF	; 255
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8f 4f       	sbci	r24, 0xFF	; 255
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	16 c0       	rjmp	.+44     	; 0x63e <__floatsisf+0x6c>
 612:	88 23       	and	r24, r24
 614:	11 f0       	breq	.+4      	; 0x61a <__floatsisf+0x48>
 616:	96 e9       	ldi	r25, 0x96	; 150
 618:	11 c0       	rjmp	.+34     	; 0x63c <__floatsisf+0x6a>
 61a:	77 23       	and	r23, r23
 61c:	21 f0       	breq	.+8      	; 0x626 <__floatsisf+0x54>
 61e:	9e e8       	ldi	r25, 0x8E	; 142
 620:	87 2f       	mov	r24, r23
 622:	76 2f       	mov	r23, r22
 624:	05 c0       	rjmp	.+10     	; 0x630 <__floatsisf+0x5e>
 626:	66 23       	and	r22, r22
 628:	71 f0       	breq	.+28     	; 0x646 <__floatsisf+0x74>
 62a:	96 e8       	ldi	r25, 0x86	; 134
 62c:	86 2f       	mov	r24, r22
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	2a f0       	brmi	.+10     	; 0x63e <__floatsisf+0x6c>
 634:	9a 95       	dec	r25
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	da f7       	brpl	.-10     	; 0x634 <__floatsisf+0x62>
 63e:	88 0f       	add	r24, r24
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <__fp_inf>:
 648:	97 f9       	bld	r25, 7
 64a:	9f 67       	ori	r25, 0x7F	; 127
 64c:	80 e8       	ldi	r24, 0x80	; 128
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	08 95       	ret

00000654 <__fp_nan>:
 654:	9f ef       	ldi	r25, 0xFF	; 255
 656:	80 ec       	ldi	r24, 0xC0	; 192
 658:	08 95       	ret

0000065a <__fp_pscA>:
 65a:	00 24       	eor	r0, r0
 65c:	0a 94       	dec	r0
 65e:	16 16       	cp	r1, r22
 660:	17 06       	cpc	r1, r23
 662:	18 06       	cpc	r1, r24
 664:	09 06       	cpc	r0, r25
 666:	08 95       	ret

00000668 <__fp_pscB>:
 668:	00 24       	eor	r0, r0
 66a:	0a 94       	dec	r0
 66c:	12 16       	cp	r1, r18
 66e:	13 06       	cpc	r1, r19
 670:	14 06       	cpc	r1, r20
 672:	05 06       	cpc	r0, r21
 674:	08 95       	ret

00000676 <__fp_round>:
 676:	09 2e       	mov	r0, r25
 678:	03 94       	inc	r0
 67a:	00 0c       	add	r0, r0
 67c:	11 f4       	brne	.+4      	; 0x682 <__fp_round+0xc>
 67e:	88 23       	and	r24, r24
 680:	52 f0       	brmi	.+20     	; 0x696 <__fp_round+0x20>
 682:	bb 0f       	add	r27, r27
 684:	40 f4       	brcc	.+16     	; 0x696 <__fp_round+0x20>
 686:	bf 2b       	or	r27, r31
 688:	11 f4       	brne	.+4      	; 0x68e <__fp_round+0x18>
 68a:	60 ff       	sbrs	r22, 0
 68c:	04 c0       	rjmp	.+8      	; 0x696 <__fp_round+0x20>
 68e:	6f 5f       	subi	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__fp_split3>:
 698:	57 fd       	sbrc	r21, 7
 69a:	90 58       	subi	r25, 0x80	; 128
 69c:	44 0f       	add	r20, r20
 69e:	55 1f       	adc	r21, r21
 6a0:	59 f0       	breq	.+22     	; 0x6b8 <__fp_splitA+0x10>
 6a2:	5f 3f       	cpi	r21, 0xFF	; 255
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <__fp_splitA+0x1a>
 6a6:	47 95       	ror	r20

000006a8 <__fp_splitA>:
 6a8:	88 0f       	add	r24, r24
 6aa:	97 fb       	bst	r25, 7
 6ac:	99 1f       	adc	r25, r25
 6ae:	61 f0       	breq	.+24     	; 0x6c8 <__fp_splitA+0x20>
 6b0:	9f 3f       	cpi	r25, 0xFF	; 255
 6b2:	79 f0       	breq	.+30     	; 0x6d2 <__fp_splitA+0x2a>
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret
 6b8:	12 16       	cp	r1, r18
 6ba:	13 06       	cpc	r1, r19
 6bc:	14 06       	cpc	r1, r20
 6be:	55 1f       	adc	r21, r21
 6c0:	f2 cf       	rjmp	.-28     	; 0x6a6 <__fp_split3+0xe>
 6c2:	46 95       	lsr	r20
 6c4:	f1 df       	rcall	.-30     	; 0x6a8 <__fp_splitA>
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <__fp_splitA+0x30>
 6c8:	16 16       	cp	r1, r22
 6ca:	17 06       	cpc	r1, r23
 6cc:	18 06       	cpc	r1, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	f1 cf       	rjmp	.-30     	; 0x6b4 <__fp_splitA+0xc>
 6d2:	86 95       	lsr	r24
 6d4:	71 05       	cpc	r23, r1
 6d6:	61 05       	cpc	r22, r1
 6d8:	08 94       	sec
 6da:	08 95       	ret

000006dc <__fp_zero>:
 6dc:	e8 94       	clt

000006de <__fp_szero>:
 6de:	bb 27       	eor	r27, r27
 6e0:	66 27       	eor	r22, r22
 6e2:	77 27       	eor	r23, r23
 6e4:	cb 01       	movw	r24, r22
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret

000006ea <__mulsf3>:
 6ea:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3x>
 6ee:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_round>
 6f2:	0e 94 2d 03 	call	0x65a	; 0x65a <__fp_pscA>
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__mulsf3+0x1c>
 6f8:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__mulsf3+0x1c>
 6fe:	95 23       	and	r25, r21
 700:	11 f0       	breq	.+4      	; 0x706 <__mulsf3+0x1c>
 702:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 706:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_nan>
 70a:	11 24       	eor	r1, r1
 70c:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>

00000710 <__mulsf3x>:
 710:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_split3>
 714:	70 f3       	brcs	.-36     	; 0x6f2 <__mulsf3+0x8>

00000716 <__mulsf3_pse>:
 716:	95 9f       	mul	r25, r21
 718:	c1 f3       	breq	.-16     	; 0x70a <__mulsf3+0x20>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	62 9f       	mul	r22, r18
 722:	f0 01       	movw	r30, r0
 724:	72 9f       	mul	r23, r18
 726:	bb 27       	eor	r27, r27
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	63 9f       	mul	r22, r19
 72e:	aa 27       	eor	r26, r26
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	aa 1f       	adc	r26, r26
 736:	64 9f       	mul	r22, r20
 738:	66 27       	eor	r22, r22
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	66 1f       	adc	r22, r22
 740:	82 9f       	mul	r24, r18
 742:	22 27       	eor	r18, r18
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	73 9f       	mul	r23, r19
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	83 9f       	mul	r24, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	22 1f       	adc	r18, r18
 75a:	74 9f       	mul	r23, r20
 75c:	33 27       	eor	r19, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	23 1f       	adc	r18, r19
 764:	84 9f       	mul	r24, r20
 766:	60 0d       	add	r22, r0
 768:	21 1d       	adc	r18, r1
 76a:	82 2f       	mov	r24, r18
 76c:	76 2f       	mov	r23, r22
 76e:	6a 2f       	mov	r22, r26
 770:	11 24       	eor	r1, r1
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	9a f0       	brmi	.+38     	; 0x79e <__mulsf3_pse+0x88>
 778:	f1 f0       	breq	.+60     	; 0x7b6 <__mulsf3_pse+0xa0>
 77a:	88 23       	and	r24, r24
 77c:	4a f0       	brmi	.+18     	; 0x790 <__mulsf3_pse+0x7a>
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	a9 f7       	brne	.-22     	; 0x77a <__mulsf3_pse+0x64>
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	51 05       	cpc	r21, r1
 794:	80 f0       	brcs	.+32     	; 0x7b6 <__mulsf3_pse+0xa0>
 796:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_inf>
 79a:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__fp_szero>
 79e:	5f 3f       	cpi	r21, 0xFF	; 255
 7a0:	e4 f3       	brlt	.-8      	; 0x79a <__mulsf3_pse+0x84>
 7a2:	98 3e       	cpi	r25, 0xE8	; 232
 7a4:	d4 f3       	brlt	.-12     	; 0x79a <__mulsf3_pse+0x84>
 7a6:	86 95       	lsr	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	b7 95       	ror	r27
 7ae:	f7 95       	ror	r31
 7b0:	e7 95       	ror	r30
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	c1 f7       	brne	.-16     	; 0x7a6 <__mulsf3_pse+0x90>
 7b6:	fe 2b       	or	r31, r30
 7b8:	88 0f       	add	r24, r24
 7ba:	91 1d       	adc	r25, r1
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	97 f9       	bld	r25, 7
 7c2:	08 95       	ret

000007c4 <_exit>:
 7c4:	f8 94       	cli

000007c6 <__stop_program>:
 7c6:	ff cf       	rjmp	.-2      	; 0x7c6 <__stop_program>
