
StepperTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003e7  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ad  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b7  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029c  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  9e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:
}



void delay_ms(uint16_t count) {
	while(count--) {
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	41 f0       	breq	.+16     	; 0xba <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <delay_ms+0x8>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <delay_ms+0xe>
  b4:	00 00       	nop
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	c1 f7       	brne	.-16     	; 0xaa <delay_ms+0x4>
  ba:	08 95       	ret

000000bc <main>:
float max_vel = 60; // speed in steps/sec
float max_accel = 350; // speed in steps/sec/sec*/

int main(void)
{
	DDRD =	0b000101100; // Sets all pins of Port D to output.
  bc:	8c e2       	ldi	r24, 0x2C	; 44
  be:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b000000000; //Sets Port D to match the initial
  c0:	1b b8       	out	0x0b, r1	; 11
	DDRB =	0b000000010;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	84 b9       	out	0x04, r24	; 4
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  c6:	e0 e8       	ldi	r30, 0x80	; 128
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 6a       	ori	r24, 0xA2	; 162
  ce:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS12); //PRESCALER=256 MODE 14(FAST PWM)
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8c 61       	ori	r24, 0x1C	; 28
  d8:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	90 93 87 00 	sts	0x0087, r25
  e2:	80 93 86 00 	sts	0x0086, r24
	
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
  e6:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
  e8:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
  ec:	87 e8       	ldi	r24, 0x87	; 135
  ee:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	80 93 7c 00 	sts	0x007C, r24
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
  f8:	ca e7       	ldi	r28, 0x7A	; 122
  fa:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
  fc:	0f 2e       	mov	r0, r31
  fe:	f9 e7       	ldi	r31, 0x79	; 121
 100:	af 2e       	mov	r10, r31
 102:	b1 2c       	mov	r11, r1
 104:	f0 2d       	mov	r31, r0
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 106:	0f 2e       	mov	r0, r31
 108:	f2 e3       	ldi	r31, 0x32	; 50
 10a:	9f 2e       	mov	r9, r31
 10c:	f0 2d       	mov	r31, r0
		//updateStepper(desired_location);
		
		//A time delay to accommodate out stepper
		//delay_ms(delay_between_steps);
		
		OCR1A=45;   //0 degree
 10e:	08 e8       	ldi	r16, 0x88	; 136
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	0f 2e       	mov	r0, r31
 114:	fd e2       	ldi	r31, 0x2D	; 45
 116:	cf 2e       	mov	r12, r31
 118:	d1 2c       	mov	r13, r1
 11a:	f0 2d       	mov	r31, r0
		delay_ms(1000);

		//OCR1A=92;  //90 degree
		//delay_ms(5000);

		OCR1A=145;  //135 degree
 11c:	0f 2e       	mov	r0, r31
 11e:	f1 e9       	ldi	r31, 0x91	; 145
 120:	ef 2e       	mov	r14, r31
 122:	f1 2c       	mov	r15, r1
 124:	f0 2d       	mov	r31, r0
	
	
	while (1)
	{
		// Read analog input
		ADCSRA |= (1<<ADSC); // Start conversion
 126:	88 81       	ld	r24, Y
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 12c:	88 81       	ld	r24, Y
 12e:	84 ff       	sbrs	r24, 4
 130:	fd cf       	rjmp	.-6      	; 0x12c <main+0x70>
		sensor_value = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 132:	f5 01       	movw	r30, r10
 134:	80 81       	ld	r24, Z
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 03 01 	sts	0x0103, r25
 13c:	80 93 02 01 	sts	0x0102, r24
		//ADC Complete
		
		desired_location = sensor_value * 50; //The times four comes from we needed more steps per degree from potentiometer
 140:	98 9e       	mul	r9, r24
 142:	90 01       	movw	r18, r0
 144:	99 9e       	mul	r9, r25
 146:	30 0d       	add	r19, r0
 148:	11 24       	eor	r1, r1
 14a:	30 93 01 01 	sts	0x0101, r19
 14e:	20 93 00 01 	sts	0x0100, r18
		//updateStepper(desired_location);
		
		//A time delay to accommodate out stepper
		//delay_ms(delay_between_steps);
		
		OCR1A=45;   //0 degree
 152:	f8 01       	movw	r30, r16
 154:	d1 82       	std	Z+1, r13	; 0x01
 156:	c0 82       	st	Z, r12
		delay_ms(1000);
 158:	88 ee       	ldi	r24, 0xE8	; 232
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>

		//OCR1A=92;  //90 degree
		//delay_ms(5000);

		OCR1A=145;  //135 degree
 160:	f8 01       	movw	r30, r16
 162:	f1 82       	std	Z+1, r15	; 0x01
 164:	e0 82       	st	Z, r14
		delay_ms(1000);
 166:	88 ee       	ldi	r24, 0xE8	; 232
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>


	}
 16e:	db cf       	rjmp	.-74     	; 0x126 <main+0x6a>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
