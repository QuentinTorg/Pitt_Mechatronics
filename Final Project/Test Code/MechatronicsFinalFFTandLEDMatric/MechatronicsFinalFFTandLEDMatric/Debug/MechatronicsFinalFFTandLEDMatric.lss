
MechatronicsFinalFFTandLEDMatric.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000590  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ec  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e0  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000261  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e5  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 c6 02 	jmp	0x58c	; 0x58c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:
		}
	}
}

void delay_ms(uint16_t count) {
	while(count--) {
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	41 f0       	breq	.+16     	; 0xba <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef e9       	ldi	r30, 0x9F	; 159
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <delay_ms+0x8>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <delay_ms+0xe>
  b4:	00 00       	nop
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	c1 f7       	brne	.-16     	; 0xaa <delay_ms+0x4>
  ba:	08 95       	ret

000000bc <digitalWritePortD>:
		_delay_ms(1);
	}
}

void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  bc:	66 23       	and	r22, r22
  be:	79 f0       	breq	.+30     	; 0xde <digitalWritePortD+0x22>
		portD_value = (portD_value) | (1<<pin);
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	a9 01       	movw	r20, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <digitalWritePortD+0x10>
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	8a 95       	dec	r24
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <digitalWritePortD+0xc>
  d0:	ca 01       	movw	r24, r20
  d2:	90 91 0a 01 	lds	r25, 0x010A
  d6:	89 2b       	or	r24, r25
  d8:	80 93 0a 01 	sts	0x010A, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <digitalWritePortD+0x26>
	}
	else {
		portD_value = (portD_value) & (0<<pin);
  de:	10 92 0a 01 	sts	0x010A, r1
	}
	PORTD = portD_value;
  e2:	80 91 0a 01 	lds	r24, 0x010A
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret

000000ea <max7219_byte>:
}

void max7219_byte(uint8_t data)
{
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	98 e0       	ldi	r25, 0x08	; 8
	for(uint8_t i = 8; i >= 1; i--)
	{
		PORTD &= ~(1 << MAX7219_CLK);	// Set to LOW
  ee:	5f 98       	cbi	0x0b, 7	; 11
		if ((data & 0x80) != 0)			// Mask the MSB of the data
  f0:	88 23       	and	r24, r24
  f2:	14 f4       	brge	.+4      	; 0xf8 <max7219_byte+0xe>
		PORTD |= (1 << MAX7219_DIN);	// Set to HIGH
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	01 c0       	rjmp	.+2      	; 0xfa <max7219_byte+0x10>
		else
		PORTD &= ~(1 << MAX7219_DIN);	// Set to LOW
  f8:	5d 98       	cbi	0x0b, 5	; 11
		data = data<<1;
  fa:	88 0f       	add	r24, r24
		PORTD |= (1 << MAX7219_CLK);		// Set to HIGH
  fc:	5f 9a       	sbi	0x0b, 7	; 11
  fe:	91 50       	subi	r25, 0x01	; 1
}

void max7219_byte(uint8_t data)
{
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
	for(uint8_t i = 8; i >= 1; i--)
 100:	b1 f7       	brne	.-20     	; 0xee <max7219_byte+0x4>
		else
		PORTD &= ~(1 << MAX7219_DIN);	// Set to LOW
		data = data<<1;
		PORTD |= (1 << MAX7219_CLK);		// Set to HIGH
	}
}
 102:	08 95       	ret

00000104 <max7219_word>:

void max7219_word(uint8_t address, uint8_t data)
{
 104:	cf 93       	push	r28
 106:	c6 2f       	mov	r28, r22
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
 108:	5e 98       	cbi	0x0b, 6	; 11
	max7219_byte(address);			//
 10a:	0e 94 75 00 	call	0xea	; 0xea <max7219_byte>
	max7219_byte(data);				//
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 75 00 	call	0xea	; 0xea <max7219_byte>
	PORTD |= (1 << MAX7219_CS);		// Set to HIGH
 114:	5e 9a       	sbi	0x0b, 6	; 11
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <max7219_init>:

void max7219_init(void)
{
	DDRD |= (1 << MAX7219_CLK);	// Set port as output
 11a:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1 << MAX7219_CS);	// Set port as output
 11c:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << MAX7219_DIN);	// Set port as output
 11e:	55 9a       	sbi	0x0a, 5	; 10
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <max7219_init+0xc>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <max7219_init+0x16>
 130:	00 00       	nop
	_delay_ms(50);	// TODO: Q: Is this necessary?
	max7219_word(0x09, 0x00);	// Decode: BCD
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	89 e0       	ldi	r24, 0x09	; 9
 136:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
	max7219_word(0x0a, 0x03);	// Brightness
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
	max7219_word(0x0b, 0x07);	//
 142:	67 e0       	ldi	r22, 0x07	; 7
 144:	8b e0       	ldi	r24, 0x0B	; 11
 146:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
	max7219_word(0x0c, 0x01);	//
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
	max7219_word(0x0f, 0x00);	//
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
 15a:	08 95       	ret

0000015c <max7219_row>:
}

void max7219_row(uint8_t address, uint8_t data) {
	if (address >= 1 && address <= 8) max7219_word(address, data);
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	98 0f       	add	r25, r24
 160:	98 30       	cpi	r25, 0x08	; 8
 162:	10 f4       	brcc	.+4      	; 0x168 <max7219_row+0xc>
 164:	0e 94 82 00 	call	0x104	; 0x104 <max7219_word>
 168:	08 95       	ret

0000016a <max7219_buffer_out>:
}

uint8_t max7219_buffer[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void max7219_buffer_out(void) {
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	00 e0       	ldi	r16, 0x00	; 0
 172:	11 e0       	ldi	r17, 0x01	; 1
	// Output the buffer
	for (uint8_t row = 1; row <= 8; row++)
 174:	c1 e0       	ldi	r28, 0x01	; 1
	max7219_row(row, max7219_buffer[row - 1]);
 176:	f8 01       	movw	r30, r16
 178:	61 91       	ld	r22, Z+
 17a:	8f 01       	movw	r16, r30
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 ae 00 	call	0x15c	; 0x15c <max7219_row>

uint8_t max7219_buffer[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void max7219_buffer_out(void) {
	// Output the buffer
	for (uint8_t row = 1; row <= 8; row++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c9 30       	cpi	r28, 0x09	; 9
 186:	b9 f7       	brne	.-18     	; 0x176 <max7219_buffer_out+0xc>
	max7219_row(row, max7219_buffer[row - 1]);
}
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <max7219_buffer_set>:

void max7219_buffer_set(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
	uint8_t sy = (y & 0b0111);
 190:	67 70       	andi	r22, 0x07	; 7
	max7219_buffer[sy] |= (1 << sx);
 192:	e6 2f       	mov	r30, r22
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
	for (uint8_t row = 1; row <= 8; row++)
	max7219_row(row, max7219_buffer[row - 1]);
}

void max7219_buffer_set(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
 19a:	80 95       	com	r24
 19c:	28 2f       	mov	r18, r24
 19e:	27 70       	andi	r18, 0x07	; 7
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] |= (1 << sx);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <max7219_buffer_set+0x1a>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	2a 95       	dec	r18
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <max7219_buffer_set+0x16>
 1ae:	90 81       	ld	r25, Z
 1b0:	89 2b       	or	r24, r25
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <max7219_buffer_clr>:
}

void max7219_buffer_clr(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
	uint8_t sy = (y & 0b0111);
 1b6:	67 70       	andi	r22, 0x07	; 7
	max7219_buffer[sy] &= ~(1 << sx);
 1b8:	e6 2f       	mov	r30, r22
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] |= (1 << sx);
}

void max7219_buffer_clr(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
 1c0:	80 95       	com	r24
 1c2:	28 2f       	mov	r18, r24
 1c4:	27 70       	andi	r18, 0x07	; 7
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] &= ~(1 << sx);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <max7219_buffer_clr+0x1a>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	2a 95       	dec	r18
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <max7219_buffer_clr+0x16>
 1d4:	80 95       	com	r24
 1d6:	90 81       	ld	r25, Z
 1d8:	89 23       	and	r24, r25
 1da:	80 83       	st	Z, r24
 1dc:	08 95       	ret

000001de <main>:
const int RESET = 1; //PD1
int outputValues[7];

int main(void)
{
	max7219_init();
 1de:	0e 94 8d 00 	call	0x11a	; 0x11a <max7219_init>
	
	DDRD = 0xFF; // Sets all pins of Port D to output.
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00; // Sets all pins of Port C to input.
 1e6:	17 b8       	out	0x07, r1	; 7
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 1e8:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 1ea:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	87 e8       	ldi	r24, 0x87	; 135
 1f4:	80 83       	st	Z, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)

	//Initialize the sensorValue a second time :)
	ADCSRA |= (1<<ADSC); // Start conversion
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 202:	80 81       	ld	r24, Z
 204:	84 ff       	sbrs	r24, 4
 206:	fd cf       	rjmp	.-6      	; 0x202 <main+0x24>
	sensorValue = ADCH;  //Assigns sensorValue to be the high 8 bits of the 10 bit ADC converter
 208:	80 91 79 00 	lds	r24, 0x0079
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 09 01 	sts	0x0109, r25
 212:	80 93 08 01 	sts	0x0108, r24
	
	digitalWritePortD(RESET, LOW); //Turns off the reset
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
	digitalWritePortD(STROBE, HIGH); //Turns on the strobe
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
 226:	0f 2e       	mov	r0, r31
 228:	f9 e1       	ldi	r31, 0x19	; 25
 22a:	6f 2e       	mov	r6, r31
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	7f 2e       	mov	r7, r31
 230:	f0 2d       	mov	r31, r0
		{
			digitalWritePortD(STROBE, LOW);
			delay_ms(30); //A time delay
			
			// Read analog input: begin ADC
			ADCSRA |= (1<<ADSC); // Start conversion
 232:	0f 2e       	mov	r0, r31
 234:	fa e7       	ldi	r31, 0x7A	; 122
 236:	af 2e       	mov	r10, r31
 238:	b1 2c       	mov	r11, r1
 23a:	f0 2d       	mov	r31, r0
			while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
			sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 23c:	0f 2e       	mov	r0, r31
 23e:	f9 e7       	ldi	r31, 0x79	; 121
 240:	4f 2e       	mov	r4, r31
 242:	51 2c       	mov	r5, r1
 244:	f0 2d       	mov	r31, r0
		
		//max7219_buffer_out();	// Output the buffer
		
		for (int j = 0; j < 8; j++)
		{
			for (int i = 0; i < outputValues[j]; i++)
 246:	31 2c       	mov	r3, r1
 248:	21 2c       	mov	r2, r1
	digitalWritePortD(STROBE, HIGH); //Turns on the strobe
	
	while (1)
	{
		
		digitalWritePortD(RESET, HIGH); //Sets the reset
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
		digitalWritePortD(RESET, LOW); //Turns off the reset
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
 25a:	0f 2e       	mov	r0, r31
 25c:	fb e0       	ldi	r31, 0x0B	; 11
 25e:	8f 2e       	mov	r8, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	9f 2e       	mov	r9, r31
 264:	f0 2d       	mov	r31, r0
 266:	e4 01       	movw	r28, r8

		for (int i = 0; i < 7; i++)
		{
			digitalWritePortD(STROBE, LOW);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
			delay_ms(30); //A time delay
 270:	8e e1       	ldi	r24, 0x1E	; 30
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
			
			// Read analog input: begin ADC
			ADCSRA |= (1<<ADSC); // Start conversion
 278:	f5 01       	movw	r30, r10
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
			while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 280:	f5 01       	movw	r30, r10
 282:	80 81       	ld	r24, Z
 284:	84 ff       	sbrs	r24, 4
 286:	fc cf       	rjmp	.-8      	; 0x280 <main+0xa2>
			sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 288:	f2 01       	movw	r30, r4
 28a:	60 81       	ld	r22, Z
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	70 93 09 01 	sts	0x0109, r23
 292:	60 93 08 01 	sts	0x0108, r22
			//ADC Complete
			
			outputValues[i] = sensorValue/32.0;
 296:	07 2e       	mov	r0, r23
 298:	00 0c       	add	r0, r0
 29a:	88 0b       	sbc	r24, r24
 29c:	99 0b       	sbc	r25, r25
 29e:	0e 94 cd 01 	call	0x39a	; 0x39a <__floatsisf>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	5d e3       	ldi	r21, 0x3D	; 61
 2aa:	0e 94 31 02 	call	0x462	; 0x462 <__mulsf3>
 2ae:	0e 94 95 01 	call	0x32a	; 0x32a <__fixsfsi>
 2b2:	69 93       	st	Y+, r22
 2b4:	79 93       	st	Y+, r23
			digitalWritePortD(STROBE, HIGH);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 5e 00 	call	0xbc	; 0xbc <digitalWritePortD>
	{
		
		digitalWritePortD(RESET, HIGH); //Sets the reset
		digitalWritePortD(RESET, LOW); //Turns off the reset

		for (int i = 0; i < 7; i++)
 2be:	c6 15       	cp	r28, r6
 2c0:	d7 05       	cpc	r29, r7
 2c2:	91 f6       	brne	.-92     	; 0x268 <main+0x8a>
 2c4:	e1 2c       	mov	r14, r1
 2c6:	f1 2c       	mov	r15, r1
 2c8:	28 c0       	rjmp	.+80     	; 0x31a <main+0x13c>
		
		//max7219_buffer_out();	// Output the buffer
		
		for (int j = 0; j < 8; j++)
		{
			for (int i = 0; i < outputValues[j]; i++)
 2ca:	c3 2d       	mov	r28, r3
 2cc:	d2 2d       	mov	r29, r2
			{
				max7219_buffer_out();	// Output the buffer
 2ce:	0e 94 b5 00 	call	0x16a	; 0x16a <max7219_buffer_out>
				max7219_buffer_set(j, i);	// Set pixel
 2d2:	be 01       	movw	r22, r28
 2d4:	c7 01       	movw	r24, r14
 2d6:	0e 94 c8 00 	call	0x190	; 0x190 <max7219_buffer_set>
		
		//max7219_buffer_out();	// Output the buffer
		
		for (int j = 0; j < 8; j++)
		{
			for (int i = 0; i < outputValues[j]; i++)
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	f6 01       	movw	r30, r12
 2de:	00 81       	ld	r16, Z
 2e0:	11 81       	ldd	r17, Z+1	; 0x01
 2e2:	c0 17       	cp	r28, r16
 2e4:	d1 07       	cpc	r29, r17
 2e6:	9c f3       	brlt	.-26     	; 0x2ce <main+0xf0>
				max7219_buffer_out();	// Output the buffer
				max7219_buffer_set(j, i);	// Set pixel
				//_delay_ms(10);
			}
			
			for (int k = outputValues[j]; k < 8; k++)
 2e8:	08 30       	cpi	r16, 0x08	; 8
 2ea:	11 05       	cpc	r17, r1
 2ec:	5c f4       	brge	.+22     	; 0x304 <main+0x126>
			{
				max7219_buffer_out();	// Output the buffer
 2ee:	0e 94 b5 00 	call	0x16a	; 0x16a <max7219_buffer_out>
				max7219_buffer_clr(j, k);	// Clear pixel
 2f2:	b8 01       	movw	r22, r16
 2f4:	c7 01       	movw	r24, r14
 2f6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <max7219_buffer_clr>
				max7219_buffer_out();	// Output the buffer
				max7219_buffer_set(j, i);	// Set pixel
				//_delay_ms(10);
			}
			
			for (int k = outputValues[j]; k < 8; k++)
 2fa:	0f 5f       	subi	r16, 0xFF	; 255
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	08 30       	cpi	r16, 0x08	; 8
 300:	11 05       	cpc	r17, r1
 302:	a9 f7       	brne	.-22     	; 0x2ee <main+0x110>
			digitalWritePortD(STROBE, HIGH);
		}
		
		//max7219_buffer_out();	// Output the buffer
		
		for (int j = 0; j < 8; j++)
 304:	ff ef       	ldi	r31, 0xFF	; 255
 306:	ef 1a       	sub	r14, r31
 308:	ff 0a       	sbc	r15, r31
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	88 0e       	add	r8, r24
 30e:	91 1c       	adc	r9, r1
 310:	e8 e0       	ldi	r30, 0x08	; 8
 312:	ee 16       	cp	r14, r30
 314:	f1 04       	cpc	r15, r1
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x13c>
 318:	98 cf       	rjmp	.-208    	; 0x24a <main+0x6c>
 31a:	64 01       	movw	r12, r8
		{
			for (int i = 0; i < outputValues[j]; i++)
 31c:	f4 01       	movw	r30, r8
 31e:	00 81       	ld	r16, Z
 320:	11 81       	ldd	r17, Z+1	; 0x01
 322:	10 16       	cp	r1, r16
 324:	11 06       	cpc	r1, r17
 326:	8c f2       	brlt	.-94     	; 0x2ca <main+0xec>
 328:	df cf       	rjmp	.-66     	; 0x2e8 <main+0x10a>

0000032a <__fixsfsi>:
 32a:	0e 94 9c 01 	call	0x338	; 0x338 <__fixunssfsi>
 32e:	68 94       	set
 330:	b1 11       	cpse	r27, r1
 332:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>
 336:	08 95       	ret

00000338 <__fixunssfsi>:
 338:	0e 94 10 02 	call	0x420	; 0x420 <__fp_splitA>
 33c:	88 f0       	brcs	.+34     	; 0x360 <__fixunssfsi+0x28>
 33e:	9f 57       	subi	r25, 0x7F	; 127
 340:	98 f0       	brcs	.+38     	; 0x368 <__fixunssfsi+0x30>
 342:	b9 2f       	mov	r27, r25
 344:	99 27       	eor	r25, r25
 346:	b7 51       	subi	r27, 0x17	; 23
 348:	b0 f0       	brcs	.+44     	; 0x376 <__fixunssfsi+0x3e>
 34a:	e1 f0       	breq	.+56     	; 0x384 <__fixunssfsi+0x4c>
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	1a f0       	brmi	.+6      	; 0x35c <__fixunssfsi+0x24>
 356:	ba 95       	dec	r27
 358:	c9 f7       	brne	.-14     	; 0x34c <__fixunssfsi+0x14>
 35a:	14 c0       	rjmp	.+40     	; 0x384 <__fixunssfsi+0x4c>
 35c:	b1 30       	cpi	r27, 0x01	; 1
 35e:	91 f0       	breq	.+36     	; 0x384 <__fixunssfsi+0x4c>
 360:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_zero>
 364:	b1 e0       	ldi	r27, 0x01	; 1
 366:	08 95       	ret
 368:	0c 94 2a 02 	jmp	0x454	; 0x454 <__fp_zero>
 36c:	67 2f       	mov	r22, r23
 36e:	78 2f       	mov	r23, r24
 370:	88 27       	eor	r24, r24
 372:	b8 5f       	subi	r27, 0xF8	; 248
 374:	39 f0       	breq	.+14     	; 0x384 <__fixunssfsi+0x4c>
 376:	b9 3f       	cpi	r27, 0xF9	; 249
 378:	cc f3       	brlt	.-14     	; 0x36c <__fixunssfsi+0x34>
 37a:	86 95       	lsr	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b3 95       	inc	r27
 382:	d9 f7       	brne	.-10     	; 0x37a <__fixunssfsi+0x42>
 384:	3e f4       	brtc	.+14     	; 0x394 <__fixunssfsi+0x5c>
 386:	90 95       	com	r25
 388:	80 95       	com	r24
 38a:	70 95       	com	r23
 38c:	61 95       	neg	r22
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	8f 4f       	sbci	r24, 0xFF	; 255
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	08 95       	ret

00000396 <__floatunsisf>:
 396:	e8 94       	clt
 398:	09 c0       	rjmp	.+18     	; 0x3ac <__floatsisf+0x12>

0000039a <__floatsisf>:
 39a:	97 fb       	bst	r25, 7
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__floatsisf+0x12>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	99 23       	and	r25, r25
 3ae:	a9 f0       	breq	.+42     	; 0x3da <__floatsisf+0x40>
 3b0:	f9 2f       	mov	r31, r25
 3b2:	96 e9       	ldi	r25, 0x96	; 150
 3b4:	bb 27       	eor	r27, r27
 3b6:	93 95       	inc	r25
 3b8:	f6 95       	lsr	r31
 3ba:	87 95       	ror	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b7 95       	ror	r27
 3c2:	f1 11       	cpse	r31, r1
 3c4:	f8 cf       	rjmp	.-16     	; 0x3b6 <__floatsisf+0x1c>
 3c6:	fa f4       	brpl	.+62     	; 0x406 <__floatsisf+0x6c>
 3c8:	bb 0f       	add	r27, r27
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__floatsisf+0x36>
 3cc:	60 ff       	sbrs	r22, 0
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <__floatsisf+0x6c>
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	16 c0       	rjmp	.+44     	; 0x406 <__floatsisf+0x6c>
 3da:	88 23       	and	r24, r24
 3dc:	11 f0       	breq	.+4      	; 0x3e2 <__floatsisf+0x48>
 3de:	96 e9       	ldi	r25, 0x96	; 150
 3e0:	11 c0       	rjmp	.+34     	; 0x404 <__floatsisf+0x6a>
 3e2:	77 23       	and	r23, r23
 3e4:	21 f0       	breq	.+8      	; 0x3ee <__floatsisf+0x54>
 3e6:	9e e8       	ldi	r25, 0x8E	; 142
 3e8:	87 2f       	mov	r24, r23
 3ea:	76 2f       	mov	r23, r22
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__floatsisf+0x5e>
 3ee:	66 23       	and	r22, r22
 3f0:	71 f0       	breq	.+28     	; 0x40e <__floatsisf+0x74>
 3f2:	96 e8       	ldi	r25, 0x86	; 134
 3f4:	86 2f       	mov	r24, r22
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	2a f0       	brmi	.+10     	; 0x406 <__floatsisf+0x6c>
 3fc:	9a 95       	dec	r25
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	da f7       	brpl	.-10     	; 0x3fc <__floatsisf+0x62>
 406:	88 0f       	add	r24, r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret

00000410 <__fp_split3>:
 410:	57 fd       	sbrc	r21, 7
 412:	90 58       	subi	r25, 0x80	; 128
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	59 f0       	breq	.+22     	; 0x430 <__fp_splitA+0x10>
 41a:	5f 3f       	cpi	r21, 0xFF	; 255
 41c:	71 f0       	breq	.+28     	; 0x43a <__fp_splitA+0x1a>
 41e:	47 95       	ror	r20

00000420 <__fp_splitA>:
 420:	88 0f       	add	r24, r24
 422:	97 fb       	bst	r25, 7
 424:	99 1f       	adc	r25, r25
 426:	61 f0       	breq	.+24     	; 0x440 <__fp_splitA+0x20>
 428:	9f 3f       	cpi	r25, 0xFF	; 255
 42a:	79 f0       	breq	.+30     	; 0x44a <__fp_splitA+0x2a>
 42c:	87 95       	ror	r24
 42e:	08 95       	ret
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	55 1f       	adc	r21, r21
 438:	f2 cf       	rjmp	.-28     	; 0x41e <__fp_split3+0xe>
 43a:	46 95       	lsr	r20
 43c:	f1 df       	rcall	.-30     	; 0x420 <__fp_splitA>
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__fp_splitA+0x30>
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	18 06       	cpc	r1, r24
 446:	99 1f       	adc	r25, r25
 448:	f1 cf       	rjmp	.-30     	; 0x42c <__fp_splitA+0xc>
 44a:	86 95       	lsr	r24
 44c:	71 05       	cpc	r23, r1
 44e:	61 05       	cpc	r22, r1
 450:	08 94       	sec
 452:	08 95       	ret

00000454 <__fp_zero>:
 454:	e8 94       	clt

00000456 <__fp_szero>:
 456:	bb 27       	eor	r27, r27
 458:	66 27       	eor	r22, r22
 45a:	77 27       	eor	r23, r23
 45c:	cb 01       	movw	r24, r22
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret

00000462 <__mulsf3>:
 462:	0e 94 44 02 	call	0x488	; 0x488 <__mulsf3x>
 466:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_round>
 46a:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_pscA>
 46e:	38 f0       	brcs	.+14     	; 0x47e <__mulsf3+0x1c>
 470:	0e 94 ae 02 	call	0x55c	; 0x55c <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__mulsf3+0x1c>
 476:	95 23       	and	r25, r21
 478:	11 f0       	breq	.+4      	; 0x47e <__mulsf3+0x1c>
 47a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_inf>
 47e:	0c 94 a4 02 	jmp	0x548	; 0x548 <__fp_nan>
 482:	11 24       	eor	r1, r1
 484:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>

00000488 <__mulsf3x>:
 488:	0e 94 08 02 	call	0x410	; 0x410 <__fp_split3>
 48c:	70 f3       	brcs	.-36     	; 0x46a <__mulsf3+0x8>

0000048e <__mulsf3_pse>:
 48e:	95 9f       	mul	r25, r21
 490:	c1 f3       	breq	.-16     	; 0x482 <__mulsf3+0x20>
 492:	95 0f       	add	r25, r21
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	55 1f       	adc	r21, r21
 498:	62 9f       	mul	r22, r18
 49a:	f0 01       	movw	r30, r0
 49c:	72 9f       	mul	r23, r18
 49e:	bb 27       	eor	r27, r27
 4a0:	f0 0d       	add	r31, r0
 4a2:	b1 1d       	adc	r27, r1
 4a4:	63 9f       	mul	r22, r19
 4a6:	aa 27       	eor	r26, r26
 4a8:	f0 0d       	add	r31, r0
 4aa:	b1 1d       	adc	r27, r1
 4ac:	aa 1f       	adc	r26, r26
 4ae:	64 9f       	mul	r22, r20
 4b0:	66 27       	eor	r22, r22
 4b2:	b0 0d       	add	r27, r0
 4b4:	a1 1d       	adc	r26, r1
 4b6:	66 1f       	adc	r22, r22
 4b8:	82 9f       	mul	r24, r18
 4ba:	22 27       	eor	r18, r18
 4bc:	b0 0d       	add	r27, r0
 4be:	a1 1d       	adc	r26, r1
 4c0:	62 1f       	adc	r22, r18
 4c2:	73 9f       	mul	r23, r19
 4c4:	b0 0d       	add	r27, r0
 4c6:	a1 1d       	adc	r26, r1
 4c8:	62 1f       	adc	r22, r18
 4ca:	83 9f       	mul	r24, r19
 4cc:	a0 0d       	add	r26, r0
 4ce:	61 1d       	adc	r22, r1
 4d0:	22 1f       	adc	r18, r18
 4d2:	74 9f       	mul	r23, r20
 4d4:	33 27       	eor	r19, r19
 4d6:	a0 0d       	add	r26, r0
 4d8:	61 1d       	adc	r22, r1
 4da:	23 1f       	adc	r18, r19
 4dc:	84 9f       	mul	r24, r20
 4de:	60 0d       	add	r22, r0
 4e0:	21 1d       	adc	r18, r1
 4e2:	82 2f       	mov	r24, r18
 4e4:	76 2f       	mov	r23, r22
 4e6:	6a 2f       	mov	r22, r26
 4e8:	11 24       	eor	r1, r1
 4ea:	9f 57       	subi	r25, 0x7F	; 127
 4ec:	50 40       	sbci	r21, 0x00	; 0
 4ee:	9a f0       	brmi	.+38     	; 0x516 <__mulsf3_pse+0x88>
 4f0:	f1 f0       	breq	.+60     	; 0x52e <__mulsf3_pse+0xa0>
 4f2:	88 23       	and	r24, r24
 4f4:	4a f0       	brmi	.+18     	; 0x508 <__mulsf3_pse+0x7a>
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	bb 1f       	adc	r27, r27
 4fc:	66 1f       	adc	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	91 50       	subi	r25, 0x01	; 1
 504:	50 40       	sbci	r21, 0x00	; 0
 506:	a9 f7       	brne	.-22     	; 0x4f2 <__mulsf3_pse+0x64>
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	51 05       	cpc	r21, r1
 50c:	80 f0       	brcs	.+32     	; 0x52e <__mulsf3_pse+0xa0>
 50e:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_inf>
 512:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	e4 f3       	brlt	.-8      	; 0x512 <__mulsf3_pse+0x84>
 51a:	98 3e       	cpi	r25, 0xE8	; 232
 51c:	d4 f3       	brlt	.-12     	; 0x512 <__mulsf3_pse+0x84>
 51e:	86 95       	lsr	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b7 95       	ror	r27
 526:	f7 95       	ror	r31
 528:	e7 95       	ror	r30
 52a:	9f 5f       	subi	r25, 0xFF	; 255
 52c:	c1 f7       	brne	.-16     	; 0x51e <__mulsf3_pse+0x90>
 52e:	fe 2b       	or	r31, r30
 530:	88 0f       	add	r24, r24
 532:	91 1d       	adc	r25, r1
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	97 f9       	bld	r25, 7
 53a:	08 95       	ret

0000053c <__fp_inf>:
 53c:	97 f9       	bld	r25, 7
 53e:	9f 67       	ori	r25, 0x7F	; 127
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	08 95       	ret

00000548 <__fp_nan>:
 548:	9f ef       	ldi	r25, 0xFF	; 255
 54a:	80 ec       	ldi	r24, 0xC0	; 192
 54c:	08 95       	ret

0000054e <__fp_pscA>:
 54e:	00 24       	eor	r0, r0
 550:	0a 94       	dec	r0
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	09 06       	cpc	r0, r25
 55a:	08 95       	ret

0000055c <__fp_pscB>:
 55c:	00 24       	eor	r0, r0
 55e:	0a 94       	dec	r0
 560:	12 16       	cp	r1, r18
 562:	13 06       	cpc	r1, r19
 564:	14 06       	cpc	r1, r20
 566:	05 06       	cpc	r0, r21
 568:	08 95       	ret

0000056a <__fp_round>:
 56a:	09 2e       	mov	r0, r25
 56c:	03 94       	inc	r0
 56e:	00 0c       	add	r0, r0
 570:	11 f4       	brne	.+4      	; 0x576 <__fp_round+0xc>
 572:	88 23       	and	r24, r24
 574:	52 f0       	brmi	.+20     	; 0x58a <__fp_round+0x20>
 576:	bb 0f       	add	r27, r27
 578:	40 f4       	brcc	.+16     	; 0x58a <__fp_round+0x20>
 57a:	bf 2b       	or	r27, r31
 57c:	11 f4       	brne	.+4      	; 0x582 <__fp_round+0x18>
 57e:	60 ff       	sbrs	r22, 0
 580:	04 c0       	rjmp	.+8      	; 0x58a <__fp_round+0x20>
 582:	6f 5f       	subi	r22, 0xFF	; 255
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <_exit>:
 58c:	f8 94       	cli

0000058e <__stop_program>:
 58e:	ff cf       	rjmp	.-2      	; 0x58e <__stop_program>
