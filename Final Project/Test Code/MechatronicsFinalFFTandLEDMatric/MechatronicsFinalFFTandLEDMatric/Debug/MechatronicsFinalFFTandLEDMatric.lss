
MechatronicsFinalFFTandLEDMatric.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cb  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001eb  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026f  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ed  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000444  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  9e:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_us>:
		_delay_ms(1);
	}
}

void delay_us(uint16_t count) {
	while(count--) {
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	31 f0       	breq	.+12     	; 0xb6 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	25 e0       	ldi	r18, 0x05	; 5
  ac:	2a 95       	dec	r18
  ae:	f1 f7       	brne	.-4      	; 0xac <delay_us+0x6>
  b0:	00 00       	nop
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	d1 f7       	brne	.-12     	; 0xaa <delay_us+0x4>
  b6:	08 95       	ret

000000b8 <digitalWritePortD>:
		_delay_us(1);
	}
}

void digitalWritePortD(uint8_t pin, uint8_t val) {
	if (val != 0) {
  b8:	66 23       	and	r22, r22
  ba:	79 f0       	breq	.+30     	; 0xda <digitalWritePortD+0x22>
		portD_value = (portD_value) | (1<<pin);
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	a9 01       	movw	r20, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <digitalWritePortD+0x10>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <digitalWritePortD+0xc>
  cc:	ca 01       	movw	r24, r20
  ce:	90 91 0a 01 	lds	r25, 0x010A
  d2:	89 2b       	or	r24, r25
  d4:	80 93 0a 01 	sts	0x010A, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <digitalWritePortD+0x26>
	}
	else {
		portD_value = (portD_value) & (0<<pin);
  da:	10 92 0a 01 	sts	0x010A, r1
	}
	PORTD = portD_value;
  de:	80 91 0a 01 	lds	r24, 0x010A
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret

000000e6 <max7219_byte>:
}

void max7219_byte(uint8_t data)
{
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
  e6:	5e 98       	cbi	0x0b, 6	; 11
  e8:	98 e0       	ldi	r25, 0x08	; 8
	for(uint8_t i = 8; i >= 1; i--)
	{
		PORTD &= ~(1 << MAX7219_CLK);	// Set to LOW
  ea:	5f 98       	cbi	0x0b, 7	; 11
		if ((data & 0x80) != 0)			// Mask the MSB of the data
  ec:	88 23       	and	r24, r24
  ee:	14 f4       	brge	.+4      	; 0xf4 <max7219_byte+0xe>
		PORTD |= (1 << MAX7219_DIN);	// Set to HIGH
  f0:	5d 9a       	sbi	0x0b, 5	; 11
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <max7219_byte+0x10>
		else
		PORTD &= ~(1 << MAX7219_DIN);	// Set to LOW
  f4:	5d 98       	cbi	0x0b, 5	; 11
		data = data<<1;
  f6:	88 0f       	add	r24, r24
		PORTD |= (1 << MAX7219_CLK);		// Set to HIGH
  f8:	5f 9a       	sbi	0x0b, 7	; 11
  fa:	91 50       	subi	r25, 0x01	; 1
}

void max7219_byte(uint8_t data)
{
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
	for(uint8_t i = 8; i >= 1; i--)
  fc:	b1 f7       	brne	.-20     	; 0xea <max7219_byte+0x4>
		else
		PORTD &= ~(1 << MAX7219_DIN);	// Set to LOW
		data = data<<1;
		PORTD |= (1 << MAX7219_CLK);		// Set to HIGH
	}
}
  fe:	08 95       	ret

00000100 <max7219_word>:

void max7219_word(uint8_t address, uint8_t data)
{
 100:	cf 93       	push	r28
 102:	c6 2f       	mov	r28, r22
	PORTD &= ~(1 << MAX7219_CS);	// Set to LOW
 104:	5e 98       	cbi	0x0b, 6	; 11
	max7219_byte(address);			//
 106:	0e 94 73 00 	call	0xe6	; 0xe6 <max7219_byte>
	max7219_byte(data);				//
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 73 00 	call	0xe6	; 0xe6 <max7219_byte>
	PORTD |= (1 << MAX7219_CS);		// Set to HIGH
 110:	5e 9a       	sbi	0x0b, 6	; 11
}
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <max7219_init>:

void max7219_init(void)
{
	DDRD |= (1 << MAX7219_CLK);	// Set port as output
 116:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1 << MAX7219_CS);	// Set port as output
 118:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << MAX7219_DIN);	// Set port as output
 11a:	55 9a       	sbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	80 e7       	ldi	r24, 0x70	; 112
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <max7219_init+0xc>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <max7219_init+0x16>
 12c:	00 00       	nop
	_delay_ms(50);	// TODO: Q: Is this necessary?
	max7219_word(0x09, 0x00);	// Decode: BCD
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
	max7219_word(0x0a, 0x03);	// Brightness
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
	max7219_word(0x0b, 0x07);	//
 13e:	67 e0       	ldi	r22, 0x07	; 7
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
	max7219_word(0x0c, 0x01);	//
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
	max7219_word(0x0f, 0x00);	//
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8f e0       	ldi	r24, 0x0F	; 15
 152:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
 156:	08 95       	ret

00000158 <max7219_row>:
}

void max7219_row(uint8_t address, uint8_t data) {
	if (address >= 1 && address <= 8) max7219_word(address, data);
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	98 0f       	add	r25, r24
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	10 f4       	brcc	.+4      	; 0x164 <max7219_row+0xc>
 160:	0e 94 80 00 	call	0x100	; 0x100 <max7219_word>
 164:	08 95       	ret

00000166 <max7219_buffer_out>:
}

uint8_t max7219_buffer[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void max7219_buffer_out(void) {
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	11 e0       	ldi	r17, 0x01	; 1
	// Output the buffer
	for (uint8_t row = 1; row <= 8; row++)
 170:	c1 e0       	ldi	r28, 0x01	; 1
	max7219_row(row, max7219_buffer[row - 1]);
 172:	f8 01       	movw	r30, r16
 174:	61 91       	ld	r22, Z+
 176:	8f 01       	movw	r16, r30
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 ac 00 	call	0x158	; 0x158 <max7219_row>

uint8_t max7219_buffer[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void max7219_buffer_out(void) {
	// Output the buffer
	for (uint8_t row = 1; row <= 8; row++)
 17e:	cf 5f       	subi	r28, 0xFF	; 255
 180:	c9 30       	cpi	r28, 0x09	; 9
 182:	b9 f7       	brne	.-18     	; 0x172 <max7219_buffer_out+0xc>
	max7219_row(row, max7219_buffer[row - 1]);
}
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <max7219_buffer_set>:

void max7219_buffer_set(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
	uint8_t sy = (y & 0b0111);
 18c:	67 70       	andi	r22, 0x07	; 7
	max7219_buffer[sy] |= (1 << sx);
 18e:	e6 2f       	mov	r30, r22
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
	for (uint8_t row = 1; row <= 8; row++)
	max7219_row(row, max7219_buffer[row - 1]);
}

void max7219_buffer_set(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
 196:	80 95       	com	r24
 198:	28 2f       	mov	r18, r24
 19a:	27 70       	andi	r18, 0x07	; 7
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] |= (1 << sx);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <max7219_buffer_set+0x1a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <max7219_buffer_set+0x16>
 1aa:	90 81       	ld	r25, Z
 1ac:	89 2b       	or	r24, r25
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <max7219_buffer_clr>:
}

void max7219_buffer_clr(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
	uint8_t sy = (y & 0b0111);
 1b2:	67 70       	andi	r22, 0x07	; 7
	max7219_buffer[sy] &= ~(1 << sx);
 1b4:	e6 2f       	mov	r30, r22
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e0 50       	subi	r30, 0x00	; 0
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] |= (1 << sx);
}

void max7219_buffer_clr(uint8_t x, uint8_t y) {
	uint8_t sx = 7 - (x & 0b0111);
 1bc:	80 95       	com	r24
 1be:	28 2f       	mov	r18, r24
 1c0:	27 70       	andi	r18, 0x07	; 7
	uint8_t sy = (y & 0b0111);
	max7219_buffer[sy] &= ~(1 << sx);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <max7219_buffer_clr+0x1a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <max7219_buffer_clr+0x16>
 1d0:	80 95       	com	r24
 1d2:	90 81       	ld	r25, Z
 1d4:	89 23       	and	r24, r25
 1d6:	80 83       	st	Z, r24
 1d8:	08 95       	ret

000001da <main>:
const int RESET = 1; //PD1
int outputValues[7];

int main(void)
{
	max7219_init();
 1da:	0e 94 8b 00 	call	0x116	; 0x116 <max7219_init>
	
	DDRD = 0xFF; // Sets all pins of Port D to output.
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00; // Sets all pins of Port C to input.
 1e2:	17 b8       	out	0x07, r1	; 7
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
 1e4:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
 1e6:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
 1ea:	ea e7       	ldi	r30, 0x7A	; 122
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	87 e8       	ldi	r24, 0x87	; 135
 1f0:	80 83       	st	Z, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
 1f2:	80 e6       	ldi	r24, 0x60	; 96
 1f4:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)

	//Initialize the sensorValue a second time :)
	ADCSRA |= (1<<ADSC); // Start conversion
 1f8:	80 81       	ld	r24, Z
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 1fe:	80 81       	ld	r24, Z
 200:	84 ff       	sbrs	r24, 4
 202:	fd cf       	rjmp	.-6      	; 0x1fe <main+0x24>
	sensorValue = ADCH;  //Assigns sensorValue to be the high 8 bits of the 10 bit ADC converter
 204:	80 91 79 00 	lds	r24, 0x0079
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 09 01 	sts	0x0109, r25
 20e:	80 93 08 01 	sts	0x0108, r24
	
	digitalWritePortD(RESET, LOW); //Turns off the reset
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
	digitalWritePortD(STROBE, HIGH); //Turns on the strobe
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
 222:	0f 2e       	mov	r0, r31
 224:	fb e0       	ldi	r31, 0x0B	; 11
 226:	6f 2e       	mov	r6, r31
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	7f 2e       	mov	r7, r31
 22c:	f0 2d       	mov	r31, r0
 22e:	0f 2e       	mov	r0, r31
 230:	f9 e1       	ldi	r31, 0x19	; 25
 232:	8f 2e       	mov	r8, r31
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	9f 2e       	mov	r9, r31
 238:	f0 2d       	mov	r31, r0
		{
			digitalWritePortD(STROBE, LOW);
			delay_us(50); //A time delay of 30 micro seconds
			
			// Read analog input: begin ADC
			ADCSRA |= (1<<ADSC); // Start conversion
 23a:	0a e7       	ldi	r16, 0x7A	; 122
 23c:	10 e0       	ldi	r17, 0x00	; 0
			while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
			sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 23e:	0f 2e       	mov	r0, r31
 240:	f9 e7       	ldi	r31, 0x79	; 121
 242:	af 2e       	mov	r10, r31
 244:	b1 2c       	mov	r11, r1
 246:	f0 2d       	mov	r31, r0
 248:	31 2c       	mov	r3, r1
 24a:	21 2c       	mov	r2, r1
	{
		
		digitalWritePortD(RESET, HIGH); //Sets the reset
		delay_us(1);
		digitalWritePortD(RESET, LOW); //Turns off the reset
		delay_us(100);
 24c:	43 2c       	mov	r4, r3
 24e:	52 2c       	mov	r5, r2
	digitalWritePortD(STROBE, HIGH); //Turns on the strobe
	
	while (1)
	{
		
		digitalWritePortD(RESET, HIGH); //Sets the reset
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
		delay_us(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		digitalWritePortD(RESET, LOW); //Turns off the reset
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
		delay_us(100);
 268:	84 e6       	ldi	r24, 0x64	; 100
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
 270:	63 01       	movw	r12, r6
 272:	e3 01       	movw	r28, r6

		for (int i = 0; i < 7; i++)
		{
			digitalWritePortD(STROBE, LOW);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
			delay_us(50); //A time delay of 30 micro seconds
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
			
			// Read analog input: begin ADC
			ADCSRA |= (1<<ADSC); // Start conversion
 284:	f8 01       	movw	r30, r16
 286:	80 81       	ld	r24, Z
 288:	80 64       	ori	r24, 0x40	; 64
 28a:	80 83       	st	Z, r24
			while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 28c:	f8 01       	movw	r30, r16
 28e:	80 81       	ld	r24, Z
 290:	84 ff       	sbrs	r24, 4
 292:	fc cf       	rjmp	.-8      	; 0x28c <main+0xb2>
			sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 294:	f5 01       	movw	r30, r10
 296:	60 81       	ld	r22, Z
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	70 93 09 01 	sts	0x0109, r23
 29e:	60 93 08 01 	sts	0x0108, r22
			//ADC Complete
			
			outputValues[i] = sensorValue/32.0;
 2a2:	07 2e       	mov	r0, r23
 2a4:	00 0c       	add	r0, r0
 2a6:	88 0b       	sbc	r24, r24
 2a8:	99 0b       	sbc	r25, r25
 2aa:	0e 94 ce 01 	call	0x39c	; 0x39c <__floatsisf>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	5d e3       	ldi	r21, 0x3D	; 61
 2b6:	0e 94 32 02 	call	0x464	; 0x464 <__mulsf3>
 2ba:	0e 94 96 01 	call	0x32c	; 0x32c <__fixsfsi>
 2be:	69 93       	st	Y+, r22
 2c0:	79 93       	st	Y+, r23
			delay_us(50);
 2c2:	82 e3       	ldi	r24, 0x32	; 50
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
			digitalWritePortD(STROBE, HIGH);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 5c 00 	call	0xb8	; 0xb8 <digitalWritePortD>
			delay_us(40);
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_us>
		digitalWritePortD(RESET, HIGH); //Sets the reset
		delay_us(1);
		digitalWritePortD(RESET, LOW); //Turns off the reset
		delay_us(100);

		for (int i = 0; i < 7; i++)
 2da:	c8 15       	cp	r28, r8
 2dc:	d9 05       	cpc	r29, r9
 2de:	51 f6       	brne	.-108    	; 0x274 <main+0x9a>
 2e0:	e3 2c       	mov	r14, r3
 2e2:	f2 2c       	mov	r15, r2
 2e4:	20 c0       	rjmp	.+64     	; 0x326 <main+0x14c>
		
		for (int i = 0; i < 8; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				max7219_buffer_out();	// Output the buffer
 2e6:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_buffer_out>
				
				if (j < outputValues[i])
 2ea:	f6 01       	movw	r30, r12
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	c8 17       	cp	r28, r24
 2f2:	d9 07       	cpc	r29, r25
 2f4:	2c f4       	brge	.+10     	; 0x300 <main+0x126>
				{
					max7219_buffer_set(i, j);	// Set pixel
 2f6:	be 01       	movw	r22, r28
 2f8:	c7 01       	movw	r24, r14
 2fa:	0e 94 c6 00 	call	0x18c	; 0x18c <max7219_buffer_set>
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <main+0x12e>
				}
				else
				{
					max7219_buffer_clr(i, j);	// Clear pixel
 300:	be 01       	movw	r22, r28
 302:	c7 01       	movw	r24, r14
 304:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <max7219_buffer_clr>
			delay_us(40);
		}
		
		for (int i = 0; i < 8; i++)
		{
			for (int j = 0; j < 8; j++)
 308:	21 96       	adiw	r28, 0x01	; 1
 30a:	c8 30       	cpi	r28, 0x08	; 8
 30c:	d1 05       	cpc	r29, r1
 30e:	59 f7       	brne	.-42     	; 0x2e6 <main+0x10c>
			delay_us(50);
			digitalWritePortD(STROBE, HIGH);
			delay_us(40);
		}
		
		for (int i = 0; i < 8; i++)
 310:	ff ef       	ldi	r31, 0xFF	; 255
 312:	ef 1a       	sub	r14, r31
 314:	ff 0a       	sbc	r15, r31
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	c8 0e       	add	r12, r24
 31a:	d1 1c       	adc	r13, r1
 31c:	e8 e0       	ldi	r30, 0x08	; 8
 31e:	ee 16       	cp	r14, r30
 320:	f1 04       	cpc	r15, r1
 322:	09 f4       	brne	.+2      	; 0x326 <main+0x14c>
 324:	95 cf       	rjmp	.-214    	; 0x250 <main+0x76>
	{
		
		digitalWritePortD(RESET, HIGH); //Sets the reset
		delay_us(1);
		digitalWritePortD(RESET, LOW); //Turns off the reset
		delay_us(100);
 326:	c4 2d       	mov	r28, r4
 328:	d5 2d       	mov	r29, r5
 32a:	dd cf       	rjmp	.-70     	; 0x2e6 <main+0x10c>

0000032c <__fixsfsi>:
 32c:	0e 94 9d 01 	call	0x33a	; 0x33a <__fixunssfsi>
 330:	68 94       	set
 332:	b1 11       	cpse	r27, r1
 334:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 338:	08 95       	ret

0000033a <__fixunssfsi>:
 33a:	0e 94 11 02 	call	0x422	; 0x422 <__fp_splitA>
 33e:	88 f0       	brcs	.+34     	; 0x362 <__fixunssfsi+0x28>
 340:	9f 57       	subi	r25, 0x7F	; 127
 342:	98 f0       	brcs	.+38     	; 0x36a <__fixunssfsi+0x30>
 344:	b9 2f       	mov	r27, r25
 346:	99 27       	eor	r25, r25
 348:	b7 51       	subi	r27, 0x17	; 23
 34a:	b0 f0       	brcs	.+44     	; 0x378 <__fixunssfsi+0x3e>
 34c:	e1 f0       	breq	.+56     	; 0x386 <__fixunssfsi+0x4c>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	88 1f       	adc	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	1a f0       	brmi	.+6      	; 0x35e <__fixunssfsi+0x24>
 358:	ba 95       	dec	r27
 35a:	c9 f7       	brne	.-14     	; 0x34e <__fixunssfsi+0x14>
 35c:	14 c0       	rjmp	.+40     	; 0x386 <__fixunssfsi+0x4c>
 35e:	b1 30       	cpi	r27, 0x01	; 1
 360:	91 f0       	breq	.+36     	; 0x386 <__fixunssfsi+0x4c>
 362:	0e 94 2b 02 	call	0x456	; 0x456 <__fp_zero>
 366:	b1 e0       	ldi	r27, 0x01	; 1
 368:	08 95       	ret
 36a:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_zero>
 36e:	67 2f       	mov	r22, r23
 370:	78 2f       	mov	r23, r24
 372:	88 27       	eor	r24, r24
 374:	b8 5f       	subi	r27, 0xF8	; 248
 376:	39 f0       	breq	.+14     	; 0x386 <__fixunssfsi+0x4c>
 378:	b9 3f       	cpi	r27, 0xF9	; 249
 37a:	cc f3       	brlt	.-14     	; 0x36e <__fixunssfsi+0x34>
 37c:	86 95       	lsr	r24
 37e:	77 95       	ror	r23
 380:	67 95       	ror	r22
 382:	b3 95       	inc	r27
 384:	d9 f7       	brne	.-10     	; 0x37c <__fixunssfsi+0x42>
 386:	3e f4       	brtc	.+14     	; 0x396 <__fixunssfsi+0x5c>
 388:	90 95       	com	r25
 38a:	80 95       	com	r24
 38c:	70 95       	com	r23
 38e:	61 95       	neg	r22
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	8f 4f       	sbci	r24, 0xFF	; 255
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	08 95       	ret

00000398 <__floatunsisf>:
 398:	e8 94       	clt
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <__floatsisf+0x12>

0000039c <__floatsisf>:
 39c:	97 fb       	bst	r25, 7
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__floatsisf+0x12>
 3a0:	90 95       	com	r25
 3a2:	80 95       	com	r24
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f 4f       	sbci	r24, 0xFF	; 255
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	99 23       	and	r25, r25
 3b0:	a9 f0       	breq	.+42     	; 0x3dc <__floatsisf+0x40>
 3b2:	f9 2f       	mov	r31, r25
 3b4:	96 e9       	ldi	r25, 0x96	; 150
 3b6:	bb 27       	eor	r27, r27
 3b8:	93 95       	inc	r25
 3ba:	f6 95       	lsr	r31
 3bc:	87 95       	ror	r24
 3be:	77 95       	ror	r23
 3c0:	67 95       	ror	r22
 3c2:	b7 95       	ror	r27
 3c4:	f1 11       	cpse	r31, r1
 3c6:	f8 cf       	rjmp	.-16     	; 0x3b8 <__floatsisf+0x1c>
 3c8:	fa f4       	brpl	.+62     	; 0x408 <__floatsisf+0x6c>
 3ca:	bb 0f       	add	r27, r27
 3cc:	11 f4       	brne	.+4      	; 0x3d2 <__floatsisf+0x36>
 3ce:	60 ff       	sbrs	r22, 0
 3d0:	1b c0       	rjmp	.+54     	; 0x408 <__floatsisf+0x6c>
 3d2:	6f 5f       	subi	r22, 0xFF	; 255
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	16 c0       	rjmp	.+44     	; 0x408 <__floatsisf+0x6c>
 3dc:	88 23       	and	r24, r24
 3de:	11 f0       	breq	.+4      	; 0x3e4 <__floatsisf+0x48>
 3e0:	96 e9       	ldi	r25, 0x96	; 150
 3e2:	11 c0       	rjmp	.+34     	; 0x406 <__floatsisf+0x6a>
 3e4:	77 23       	and	r23, r23
 3e6:	21 f0       	breq	.+8      	; 0x3f0 <__floatsisf+0x54>
 3e8:	9e e8       	ldi	r25, 0x8E	; 142
 3ea:	87 2f       	mov	r24, r23
 3ec:	76 2f       	mov	r23, r22
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <__floatsisf+0x5e>
 3f0:	66 23       	and	r22, r22
 3f2:	71 f0       	breq	.+28     	; 0x410 <__floatsisf+0x74>
 3f4:	96 e8       	ldi	r25, 0x86	; 134
 3f6:	86 2f       	mov	r24, r22
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	2a f0       	brmi	.+10     	; 0x408 <__floatsisf+0x6c>
 3fe:	9a 95       	dec	r25
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	da f7       	brpl	.-10     	; 0x3fe <__floatsisf+0x62>
 408:	88 0f       	add	r24, r24
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	97 f9       	bld	r25, 7
 410:	08 95       	ret

00000412 <__fp_split3>:
 412:	57 fd       	sbrc	r21, 7
 414:	90 58       	subi	r25, 0x80	; 128
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	59 f0       	breq	.+22     	; 0x432 <__fp_splitA+0x10>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	71 f0       	breq	.+28     	; 0x43c <__fp_splitA+0x1a>
 420:	47 95       	ror	r20

00000422 <__fp_splitA>:
 422:	88 0f       	add	r24, r24
 424:	97 fb       	bst	r25, 7
 426:	99 1f       	adc	r25, r25
 428:	61 f0       	breq	.+24     	; 0x442 <__fp_splitA+0x20>
 42a:	9f 3f       	cpi	r25, 0xFF	; 255
 42c:	79 f0       	breq	.+30     	; 0x44c <__fp_splitA+0x2a>
 42e:	87 95       	ror	r24
 430:	08 95       	ret
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	55 1f       	adc	r21, r21
 43a:	f2 cf       	rjmp	.-28     	; 0x420 <__fp_split3+0xe>
 43c:	46 95       	lsr	r20
 43e:	f1 df       	rcall	.-30     	; 0x422 <__fp_splitA>
 440:	08 c0       	rjmp	.+16     	; 0x452 <__fp_splitA+0x30>
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	99 1f       	adc	r25, r25
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <__fp_splitA+0xc>
 44c:	86 95       	lsr	r24
 44e:	71 05       	cpc	r23, r1
 450:	61 05       	cpc	r22, r1
 452:	08 94       	sec
 454:	08 95       	ret

00000456 <__fp_zero>:
 456:	e8 94       	clt

00000458 <__fp_szero>:
 458:	bb 27       	eor	r27, r27
 45a:	66 27       	eor	r22, r22
 45c:	77 27       	eor	r23, r23
 45e:	cb 01       	movw	r24, r22
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__mulsf3>:
 464:	0e 94 45 02 	call	0x48a	; 0x48a <__mulsf3x>
 468:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_round>
 46c:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_pscA>
 470:	38 f0       	brcs	.+14     	; 0x480 <__mulsf3+0x1c>
 472:	0e 94 af 02 	call	0x55e	; 0x55e <__fp_pscB>
 476:	20 f0       	brcs	.+8      	; 0x480 <__mulsf3+0x1c>
 478:	95 23       	and	r25, r21
 47a:	11 f0       	breq	.+4      	; 0x480 <__mulsf3+0x1c>
 47c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_inf>
 480:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_nan>
 484:	11 24       	eor	r1, r1
 486:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>

0000048a <__mulsf3x>:
 48a:	0e 94 09 02 	call	0x412	; 0x412 <__fp_split3>
 48e:	70 f3       	brcs	.-36     	; 0x46c <__mulsf3+0x8>

00000490 <__mulsf3_pse>:
 490:	95 9f       	mul	r25, r21
 492:	c1 f3       	breq	.-16     	; 0x484 <__mulsf3+0x20>
 494:	95 0f       	add	r25, r21
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	55 1f       	adc	r21, r21
 49a:	62 9f       	mul	r22, r18
 49c:	f0 01       	movw	r30, r0
 49e:	72 9f       	mul	r23, r18
 4a0:	bb 27       	eor	r27, r27
 4a2:	f0 0d       	add	r31, r0
 4a4:	b1 1d       	adc	r27, r1
 4a6:	63 9f       	mul	r22, r19
 4a8:	aa 27       	eor	r26, r26
 4aa:	f0 0d       	add	r31, r0
 4ac:	b1 1d       	adc	r27, r1
 4ae:	aa 1f       	adc	r26, r26
 4b0:	64 9f       	mul	r22, r20
 4b2:	66 27       	eor	r22, r22
 4b4:	b0 0d       	add	r27, r0
 4b6:	a1 1d       	adc	r26, r1
 4b8:	66 1f       	adc	r22, r22
 4ba:	82 9f       	mul	r24, r18
 4bc:	22 27       	eor	r18, r18
 4be:	b0 0d       	add	r27, r0
 4c0:	a1 1d       	adc	r26, r1
 4c2:	62 1f       	adc	r22, r18
 4c4:	73 9f       	mul	r23, r19
 4c6:	b0 0d       	add	r27, r0
 4c8:	a1 1d       	adc	r26, r1
 4ca:	62 1f       	adc	r22, r18
 4cc:	83 9f       	mul	r24, r19
 4ce:	a0 0d       	add	r26, r0
 4d0:	61 1d       	adc	r22, r1
 4d2:	22 1f       	adc	r18, r18
 4d4:	74 9f       	mul	r23, r20
 4d6:	33 27       	eor	r19, r19
 4d8:	a0 0d       	add	r26, r0
 4da:	61 1d       	adc	r22, r1
 4dc:	23 1f       	adc	r18, r19
 4de:	84 9f       	mul	r24, r20
 4e0:	60 0d       	add	r22, r0
 4e2:	21 1d       	adc	r18, r1
 4e4:	82 2f       	mov	r24, r18
 4e6:	76 2f       	mov	r23, r22
 4e8:	6a 2f       	mov	r22, r26
 4ea:	11 24       	eor	r1, r1
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	9a f0       	brmi	.+38     	; 0x518 <__mulsf3_pse+0x88>
 4f2:	f1 f0       	breq	.+60     	; 0x530 <__mulsf3_pse+0xa0>
 4f4:	88 23       	and	r24, r24
 4f6:	4a f0       	brmi	.+18     	; 0x50a <__mulsf3_pse+0x7a>
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	bb 1f       	adc	r27, r27
 4fe:	66 1f       	adc	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	91 50       	subi	r25, 0x01	; 1
 506:	50 40       	sbci	r21, 0x00	; 0
 508:	a9 f7       	brne	.-22     	; 0x4f4 <__mulsf3_pse+0x64>
 50a:	9e 3f       	cpi	r25, 0xFE	; 254
 50c:	51 05       	cpc	r21, r1
 50e:	80 f0       	brcs	.+32     	; 0x530 <__mulsf3_pse+0xa0>
 510:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_inf>
 514:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_szero>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	e4 f3       	brlt	.-8      	; 0x514 <__mulsf3_pse+0x84>
 51c:	98 3e       	cpi	r25, 0xE8	; 232
 51e:	d4 f3       	brlt	.-12     	; 0x514 <__mulsf3_pse+0x84>
 520:	86 95       	lsr	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f7 95       	ror	r31
 52a:	e7 95       	ror	r30
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	c1 f7       	brne	.-16     	; 0x520 <__mulsf3_pse+0x90>
 530:	fe 2b       	or	r31, r30
 532:	88 0f       	add	r24, r24
 534:	91 1d       	adc	r25, r1
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret

0000053e <__fp_inf>:
 53e:	97 f9       	bld	r25, 7
 540:	9f 67       	ori	r25, 0x7F	; 127
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	08 95       	ret

0000054a <__fp_nan>:
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	80 ec       	ldi	r24, 0xC0	; 192
 54e:	08 95       	ret

00000550 <__fp_pscA>:
 550:	00 24       	eor	r0, r0
 552:	0a 94       	dec	r0
 554:	16 16       	cp	r1, r22
 556:	17 06       	cpc	r1, r23
 558:	18 06       	cpc	r1, r24
 55a:	09 06       	cpc	r0, r25
 55c:	08 95       	ret

0000055e <__fp_pscB>:
 55e:	00 24       	eor	r0, r0
 560:	0a 94       	dec	r0
 562:	12 16       	cp	r1, r18
 564:	13 06       	cpc	r1, r19
 566:	14 06       	cpc	r1, r20
 568:	05 06       	cpc	r0, r21
 56a:	08 95       	ret

0000056c <__fp_round>:
 56c:	09 2e       	mov	r0, r25
 56e:	03 94       	inc	r0
 570:	00 0c       	add	r0, r0
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0xc>
 574:	88 23       	and	r24, r24
 576:	52 f0       	brmi	.+20     	; 0x58c <__fp_round+0x20>
 578:	bb 0f       	add	r27, r27
 57a:	40 f4       	brcc	.+16     	; 0x58c <__fp_round+0x20>
 57c:	bf 2b       	or	r27, r31
 57e:	11 f4       	brne	.+4      	; 0x584 <__fp_round+0x18>
 580:	60 ff       	sbrs	r22, 0
 582:	04 c0       	rjmp	.+8      	; 0x58c <__fp_round+0x20>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
