
MechatronicsLab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800104  00800104  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bd  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  00000361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000b7  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000161  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
long delay = 8000000; //set a time to delay
long loopVar = 0; //initialize a looping variable

int main(void)
{
	DDRD = 0xFF; // Sets all pins of Port D to output.
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b000000100; //Sets Port D to match the initial
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	8b b9       	out	0x0b, r24	; 11
	
	OCR0A = 0x00; // Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
  ae:	17 bc       	out	0x27, r1	; 39
	
	TCCR0A = 1<<COM0A1 | 1<<WGM01 | 1<<WGM00; // Set non?inverting mode on OC0A pin (COMA1:0 and COMB0:1 bits = bits 7:4 = 1000; Fast PWM (WGM1:0 bits = bits 1:0 = 11)
  b0:	83 e8       	ldi	r24, 0x83	; 131
  b2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0<<CS02 | 1<<CS01 | 1<<CS00; // Set base PWM frequency (CS02:0 ? bits 2?0 = 011 for prescaler of 64, for approximately 1kHz base frequency)
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	85 bd       	out	0x25, r24	; 37
	// PWM is now running on selected pin at selected duty cycle
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
  b8:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
  ba:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	87 e8       	ldi	r24, 0x87	; 135
  c4:	80 83       	st	Z, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	80 93 7c 00 	sts	0x007C, r24
	//left justification (bit 5 of ADMUX = ADLAR = 1) and select channel 0 (bits 3-0 of ADMUX = MUX3-MUX0 = 000)

	//Initialize the sensorValue a second time :)
	ADCSRA |= (1<<ADSC); // Start conversion
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
  d2:	80 81       	ld	r24, Z
  d4:	84 ff       	sbrs	r24, 4
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <main+0x2c>
	sensorValue = ADCH;  //Assigns sensorValue to be the high 8 bits of the 10 bit ADC converter
  d8:	80 91 79 00 	lds	r24, 0x0079
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 09 01 	sts	0x0109, r25
  e2:	80 93 08 01 	sts	0x0108, r24
	
	while (1)
	{
		// Read analog input: begin ADC
		ADCSRA |= (1<<ADSC); // Start conversion
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
  ea:	c9 e7       	ldi	r28, 0x79	; 121
  ec:	d0 e0       	ldi	r29, 0x00	; 0
		//ADC Complete
		
		OCR0A = 0xff; // Load a number between 0?255 into OCR0A to set the duty cycle (0 = motor off, 255 = motor full on)
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	ff 24       	eor	r15, r15
  f2:	f3 94       	inc	r15
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
	sensorValue = ADCH;  //Assigns sensorValue to be the high 8 bits of the 10 bit ADC converter
	
	while (1)
	{
		// Read analog input: begin ADC
		ADCSRA |= (1<<ADSC); // Start conversion
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 100:	80 81       	ld	r24, Z
 102:	84 ff       	sbrs	r24, 4
 104:	fd cf       	rjmp	.-6      	; 0x100 <main+0x5a>
		sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 106:	88 81       	ld	r24, Y
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 09 01 	sts	0x0109, r25
 10e:	80 93 08 01 	sts	0x0108, r24
		//ADC Complete
		
		OCR0A = 0xff; // Load a number between 0?255 into OCR0A to set the duty cycle (0 = motor off, 255 = motor full on)
 112:	27 bd       	out	0x27, r18	; 39
		
		//A time delay
		loopVar = 0;
 114:	10 92 04 01 	sts	0x0104, r1
 118:	10 92 05 01 	sts	0x0105, r1
 11c:	10 92 06 01 	sts	0x0106, r1
 120:	10 92 07 01 	sts	0x0107, r1
		while (loopVar < delay)
 124:	40 91 00 01 	lds	r20, 0x0100
 128:	50 91 01 01 	lds	r21, 0x0101
 12c:	60 91 02 01 	lds	r22, 0x0102
 130:	70 91 03 01 	lds	r23, 0x0103
 134:	14 16       	cp	r1, r20
 136:	15 06       	cpc	r1, r21
 138:	16 06       	cpc	r1, r22
 13a:	17 06       	cpc	r1, r23
 13c:	f4 f6       	brge	.-68     	; 0xfa <main+0x54>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	dc 01       	movw	r26, r24
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	a1 1d       	adc	r26, r1
 148:	b1 1d       	adc	r27, r1
 14a:	84 17       	cp	r24, r20
 14c:	95 07       	cpc	r25, r21
 14e:	a6 07       	cpc	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	c4 f3       	brlt	.-16     	; 0x144 <main+0x9e>
 154:	14 16       	cp	r1, r20
 156:	15 06       	cpc	r1, r21
 158:	16 06       	cpc	r1, r22
 15a:	17 06       	cpc	r1, r23
 15c:	24 f0       	brlt	.+8      	; 0x166 <main+0xc0>
 15e:	4f 2d       	mov	r20, r15
 160:	50 2f       	mov	r21, r16
 162:	61 2f       	mov	r22, r17
 164:	73 2f       	mov	r23, r19
 166:	40 93 04 01 	sts	0x0104, r20
 16a:	50 93 05 01 	sts	0x0105, r21
 16e:	60 93 06 01 	sts	0x0106, r22
 172:	70 93 07 01 	sts	0x0107, r23
 176:	c1 cf       	rjmp	.-126    	; 0xfa <main+0x54>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
