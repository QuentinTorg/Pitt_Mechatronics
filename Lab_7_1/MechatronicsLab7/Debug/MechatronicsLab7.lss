
MechatronicsLab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001b6  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000110  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000e4  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019d  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fb  00000000  00000000  000008c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9e:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setMotor>:

	}
}

void setMotor(int PWM_speed) {
	if (PWM_speed > 0){
  a6:	18 16       	cp	r1, r24
  a8:	19 06       	cpc	r1, r25
  aa:	1c f4       	brge	.+6      	; 0xb2 <setMotor+0xc>
		
		OCR0A = PWM_speed;
  ac:	87 bd       	out	0x27, r24	; 39
		OCR0B = 0;
  ae:	18 bc       	out	0x28, r1	; 40
  b0:	08 95       	ret
	}
	else if( PWM_speed < 0){
  b2:	99 23       	and	r25, r25
  b4:	34 f4       	brge	.+12     	; 0xc2 <setMotor+0x1c>
		PWM_speed *= -1;
  b6:	91 95       	neg	r25
  b8:	81 95       	neg	r24
  ba:	91 09       	sbc	r25, r1
		OCR0B = PWM_speed;
  bc:	88 bd       	out	0x28, r24	; 40
		OCR0A = 0;
  be:	17 bc       	out	0x27, r1	; 39
  c0:	08 95       	ret
	}
	else {
		OCR0B = 0;
  c2:	18 bc       	out	0x28, r1	; 40
		OCR0A = 0;
  c4:	17 bc       	out	0x27, r1	; 39
  c6:	08 95       	ret

000000c8 <main>:



int main(void)
{
	DDRD = 0xFF; // Sets all pins of Port D to output.
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a b9       	out	0x0a, r24	; 10
	
	OCR0A = 0xff; // for PD6, pin12.  Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
  cc:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xff; // for PD5, pin11.  Load $00 into OCR0 to set initial duty cycle to 0 (motor off)
  ce:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM01 | 1<<WGM00; // Set non?inverting mode on OC0A pin (COMA1:0 and COMB0:1 bits = bits 7:4 = 1000; Fast PWM (WGM1:0 bits = bits 1:0 = 11)
  d0:	83 ea       	ldi	r24, 0xA3	; 163
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 1<<CS02 | 0<<CS01 | 0<<CS00; // Set base PWM frequency (CS02:0 ? bits 2?0 = 011 for prescaler of 64, for approximately 1kHz base frequency)
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	85 bd       	out	0x25, r24	; 37
	// PWM is now running on selected pin at selected duty cycle

	
	
	// Set up ADC
	DDRC = 0x00; // define all Port C bits as input
  d8:	17 b8       	out	0x07, r1	; 7
	PRR = 0x00; // clear Power Reduction ADC bit (0) in PRR register
  da:	10 92 64 00 	sts	0x0064, r1
	ADCSRA = 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // 0x87 or 0b10000111 // Set ADC Enable bit (7) in ADCSRA register, and set ADC prescaler to 128 (bits 2-0 of ADCSRA = ADPS2-ADPS0 = 111)
  de:	87 e8       	ldi	r24, 0x87	; 135
  e0:	80 93 7a 00 	sts	0x007A, r24
	//enable ADC and set frequency (with a prescaler of 128)
	ADMUX = 0<<REFS1 | 1<<REFS0 | 1<<ADLAR; //0x60 or 0b01100000 // select Analog Reference voltage to be AVcc (bits 7-6 of ADMUX = 01),
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	80 93 7c 00 	sts	0x007C, r24

	
	while (1)
	{
		// Read analog input: begin ADC
		ADCSRA |= (1<<ADSC); // Start conversion
  ea:	ca e7       	ldi	r28, 0x7A	; 122
  ec:	d0 e0       	ldi	r29, 0x00	; 0
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
  ee:	09 e7       	ldi	r16, 0x79	; 121
  f0:	10 e0       	ldi	r17, 0x00	; 0
	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  f2:	c1 2c       	mov	r12, r1
  f4:	d1 2c       	mov	r13, r1
  f6:	76 01       	movw	r14, r12
  f8:	ca 94       	dec	r12

	
	while (1)
	{
		// Read analog input: begin ADC
		ADCSRA |= (1<<ADSC); // Start conversion
  fa:	88 81       	ld	r24, Y
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	88 83       	st	Y, r24
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
 100:	88 81       	ld	r24, Y
 102:	84 ff       	sbrs	r24, 4
 104:	fd cf       	rjmp	.-6      	; 0x100 <main+0x38>
		sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
 106:	f8 01       	movw	r30, r16
 108:	80 81       	ld	r24, Z
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	30 93 01 01 	sts	0x0101, r19
 112:	20 93 00 01 	sts	0x0100, r18
	}
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 116:	ae ef       	ldi	r26, 0xFE	; 254
 118:	b1 e0       	ldi	r27, 0x01	; 1
 11a:	0e 94 bb 00 	call	0x176	; 0x176 <__umulhisi3>
 11e:	a7 01       	movw	r20, r14
 120:	96 01       	movw	r18, r12
 122:	0e 94 9c 00 	call	0x138	; 0x138 <__divmodsi4>
 126:	da 01       	movw	r26, r20
 128:	c9 01       	movw	r24, r18
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	91 09       	sbc	r25, r1
 12e:	a1 09       	sbc	r26, r1
 130:	b1 09       	sbc	r27, r1
		ADCSRA |= (1<<ADSC); // Start conversion
		while ((ADCSRA & (1<<ADIF)) ==0); // wait for conversion to finish
		sensorValue = ADCH; // Keep high byte of 10-bit result (throw away lowest two bits)
		//ADC Complete
		
		setMotor(map(sensorValue, 0, 255, -255, 255));
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <setMotor>

	}
 136:	e1 cf       	rjmp	.-62     	; 0xfa <main+0x32>

00000138 <__divmodsi4>:
 138:	05 2e       	mov	r0, r21
 13a:	97 fb       	bst	r25, 7
 13c:	1e f4       	brtc	.+6      	; 0x144 <__divmodsi4+0xc>
 13e:	00 94       	com	r0
 140:	0e 94 b3 00 	call	0x166	; 0x166 <__negsi2>
 144:	57 fd       	sbrc	r21, 7
 146:	07 d0       	rcall	.+14     	; 0x156 <__divmodsi4_neg2>
 148:	0e 94 ca 00 	call	0x194	; 0x194 <__udivmodsi4>
 14c:	07 fc       	sbrc	r0, 7
 14e:	03 d0       	rcall	.+6      	; 0x156 <__divmodsi4_neg2>
 150:	4e f4       	brtc	.+18     	; 0x164 <__divmodsi4_exit>
 152:	0c 94 b3 00 	jmp	0x166	; 0x166 <__negsi2>

00000156 <__divmodsi4_neg2>:
 156:	50 95       	com	r21
 158:	40 95       	com	r20
 15a:	30 95       	com	r19
 15c:	21 95       	neg	r18
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	4f 4f       	sbci	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255

00000164 <__divmodsi4_exit>:
 164:	08 95       	ret

00000166 <__negsi2>:
 166:	90 95       	com	r25
 168:	80 95       	com	r24
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	8f 4f       	sbci	r24, 0xFF	; 255
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	08 95       	ret

00000176 <__umulhisi3>:
 176:	a2 9f       	mul	r26, r18
 178:	b0 01       	movw	r22, r0
 17a:	b3 9f       	mul	r27, r19
 17c:	c0 01       	movw	r24, r0
 17e:	a3 9f       	mul	r26, r19
 180:	70 0d       	add	r23, r0
 182:	81 1d       	adc	r24, r1
 184:	11 24       	eor	r1, r1
 186:	91 1d       	adc	r25, r1
 188:	b2 9f       	mul	r27, r18
 18a:	70 0d       	add	r23, r0
 18c:	81 1d       	adc	r24, r1
 18e:	11 24       	eor	r1, r1
 190:	91 1d       	adc	r25, r1
 192:	08 95       	ret

00000194 <__udivmodsi4>:
 194:	a1 e2       	ldi	r26, 0x21	; 33
 196:	1a 2e       	mov	r1, r26
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	fd 01       	movw	r30, r26
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__udivmodsi4_ep>

000001a0 <__udivmodsi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ee 1f       	adc	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	e4 07       	cpc	r30, r20
 1ae:	f5 07       	cpc	r31, r21
 1b0:	20 f0       	brcs	.+8      	; 0x1ba <__udivmodsi4_ep>
 1b2:	a2 1b       	sub	r26, r18
 1b4:	b3 0b       	sbc	r27, r19
 1b6:	e4 0b       	sbc	r30, r20
 1b8:	f5 0b       	sbc	r31, r21

000001ba <__udivmodsi4_ep>:
 1ba:	66 1f       	adc	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	1a 94       	dec	r1
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <__udivmodsi4_loop>
 1c6:	60 95       	com	r22
 1c8:	70 95       	com	r23
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	cf 01       	movw	r24, r30
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
